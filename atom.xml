<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EUNII&#39;s BLOG</title>
  
  <subtitle>my recode</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://eunii.github.io/"/>
  <updated>2020-01-27T12:04:00.058Z</updated>
  <id>https://eunii.github.io/</id>
  
  <author>
    <name>eunii</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[알고리즘] 6. 자료구조</title>
    <link href="https://eunii.github.io/2019/12/06/tec/algorithm/al8/"/>
    <id>https://eunii.github.io/2019/12/06/tec/algorithm/al8/</id>
    <published>2019-12-05T15:00:00.000Z</published>
    <updated>2020-01-27T12:04:00.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-자료구조-기본"><a href="#1-자료구조-기본" class="headerlink" title="1. 자료구조 기본"></a>1. 자료구조 기본</h2><h3 id="1-1-컴퓨터-기본-커리큘럽"><a href="#1-1-컴퓨터-기본-커리큘럽" class="headerlink" title="1.1 컴퓨터 기본 커리큘럽"></a>1.1 컴퓨터 기본 커리큘럽</h3><h4 id="1-1-1-기본언어"><a href="#1-1-1-기본언어" class="headerlink" title="1.1.1 기본언어"></a>1.1.1 기본언어</h4><h4 id="1-1-2-자료구조"><a href="#1-1-2-자료구조" class="headerlink" title="1.1.2 자료구조"></a>1.1.2 자료구조</h4><h4 id="1-1-3-알고리즘"><a href="#1-1-3-알고리즘" class="headerlink" title="1.1.3 알고리즘"></a>1.1.3 알고리즘</h4><h3 id="1-2-자료구조란"><a href="#1-2-자료구조란" class="headerlink" title="1.2 자료구조란?"></a>1.2 자료구조란?</h3><blockquote><p>데이터를 담는 구조</p></blockquote><h3 id="1-3-기본-자료-구조"><a href="#1-3-기본-자료-구조" class="headerlink" title="1.3 기본 자료 구조"></a>1.3 기본 자료 구조</h3><h4 id="1-3-1-변수"><a href="#1-3-1-변수" class="headerlink" title="1.3.1 변수"></a>1.3.1 변수</h4><ul><li>int x=4;</li></ul><h4 id="1-3-2-배열"><a href="#1-3-2-배열" class="headerlink" title="1.3.2 배열"></a>1.3.2 배열</h4><ul><li>int[] arr={0,1,2};</li><li>장점: arr[i]번째 수를 바로 일 수 있음.</li><li>딘잠: 데이터 넣고 빼기가 힘듬(배열 앞뒤로 다 이동시키고 삽입)<h3 id="1-3-3-링크드-리스트"><a href="#1-3-3-링크드-리스트" class="headerlink" title="1.3.3 링크드 리스트"></a>1.3.3 링크드 리스트</h3></li><li>앞의 값이 다음 값을 알고있음</li><li>장점: 데이터 넣고 빼기 용이</li><li>x[i]번째 값 알기 어려움(처음부터 탐색)</li></ul><h2 id="2-기초-자료구조"><a href="#2-기초-자료구조" class="headerlink" title="2. 기초 자료구조"></a>2. 기초 자료구조</h2><blockquote><p>자료구조가 설계된 목적을 이해해야함</p></blockquote><ul><li>스택</li><li>큐</li><li>트리</li><li>그래프</li></ul><h3 id="2-1-스택-Stack"><a href="#2-1-스택-Stack" class="headerlink" title="2.1 스택(Stack)"></a>2.1 스택(Stack)</h3><ul><li>선형 자료구조</li></ul><table><thead><tr><th>in/out</th></tr></thead><tbody><tr><td></td></tr><tr><td></td></tr><tr><td></td></tr></tbody></table><ul><li>LIFO(Last in first out)</li><li>push(), .pop(), </li><li>스택 오버플로우란 push()할때 할당된 공간이 다 차서 넘치는것</li><li>스택언더플로우란 공간에 데이터가 하나도 없을때 pop()하는것</li></ul><h4 id="2-1-1-스택-구현"><a href="#2-1-1-스택-구현" class="headerlink" title="2.1.1 스택 구현"></a>2.1.1 스택 구현</h4><ul><li>push()</li><li>pop()</li><li>top()</li><li>size()</li></ul><pre><code></code></pre><h3 id="2-2-큐-Quque"><a href="#2-2-큐-Quque" class="headerlink" title="2.2 큐(Quque)"></a>2.2 큐(Quque)</h3><table><thead><tr><th>&lt;-out</th><th></th><th></th><th></th><th></th><th>&lt;- in</th></tr></thead><tbody><tr><td></td></tr></tbody></table><ul><li>FIFO(First in first out)</li><li>push(), .pop(), </li><li>스택 오버플로우란 push()할때 할당된 공간이 다 차서 넘치는것</li><li><p>스택언더플로우란 공간에 데이터가 하나도 없을때 pop()하는것</p></li><li><p>큐의 문제점 : 공간활용이 안좋음 &gt;&gt; 해결 원형큐</p></li></ul><h3 id="2-2-1-원형큐"><a href="#2-2-1-원형큐" class="headerlink" title="2.2.1 원형큐"></a>2.2.1 원형큐</h3><p>배열 공간을 원형으로 만들어서 함</p><h3 id="2-2-2-큐-활용문제-예시"><a href="#2-2-2-큐-활용문제-예시" class="headerlink" title="2.2.2 큐 활용문제 예시"></a>2.2.2 큐 활용문제 예시</h3><p>괄호가 올바른지 판단하기</p><h3 id="2-3-트리-Three"><a href="#2-3-트리-Three" class="headerlink" title="2.3 트리(Three)"></a>2.3 트리(Three)</h3><ul><li>root</li><li>노드(정점)</li><li>간선</li><li>트리의 재귀적성질</li></ul><h4 id="2-3-1-트리순회"><a href="#2-3-1-트리순회" class="headerlink" title="2.3.1 트리순회"></a>2.3.1 트리순회</h4><ul><li>전위순회 : root-Left-Right</li><li>중위순회 : Left-Root-Right</li><li>후위순회 : Left-Right-Root</li></ul><h3 id="2-4-우선순의-큐"><a href="#2-4-우선순의-큐" class="headerlink" title="2.4 우선순의 큐"></a>2.4 우선순의 큐</h3><ul><li>큐에 넣고 우선순위가 높은것 순으로 뽑기</li><li>배열을 이용한 우선순의 큐는 뽑고 다시채워야 해서 O(n^2)걸림-&gt;느림</li></ul><h3 id="2-4-힙-Heap"><a href="#2-4-힙-Heap" class="headerlink" title="2.4 힙(Heap)"></a>2.4 힙(Heap)</h3><blockquote><p>부모값이 항상 자식보다 작은 이진트리</p></blockquote><p>아래 트리에 4를 추가한다고 하면.</p><table><thead><tr><th></th><th></th><th></th><th>3</th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>5</td><td></td><td></td><td></td><td>7</td><td></td></tr><tr><td>23</td><td></td><td>7</td><td></td><td>9</td><td></td><td>null</td></tr></tbody></table><p>–4추가</p><table><thead><tr><th></th><th></th><th></th><th>3</th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>5</td><td></td><td></td><td></td><td>7</td><td></td></tr><tr><td>23</td><td></td><td>7</td><td></td><td>9</td><td></td><td>4</td></tr></tbody></table><p>4랑 7비교 4랑 7변경</p><table><thead><tr><th></th><th></th><th></th><th>3</th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>5</td><td></td><td></td><td></td><td>4</td><td></td></tr><tr><td>23</td><td></td><td>7</td><td></td><td>9</td><td></td><td>7</td></tr></tbody></table><p>4랑 3비교 유지 &gt; 정렬끝!!</p><table><thead><tr><th></th><th></th><th></th><th>3</th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>5</td><td></td><td></td><td></td><td>4</td><td></td></tr><tr><td>23</td><td></td><td>7</td><td></td><td>9</td><td></td><td>7</td></tr></tbody></table><h4 id="2-4-1-힙의-삽입의-시간복잡도"><a href="#2-4-1-힙의-삽입의-시간복잡도" class="headerlink" title="2.4.1 힙의 삽입의 시간복잡도"></a>2.4.1 힙의 삽입의 시간복잡도</h4><p>완전 이진트리의 높이</p><table><thead><tr><th>노드수</th><th>높이</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td></tr><tr><td>3</td><td>2</td></tr><tr><td>4</td><td>3</td></tr><tr><td>5</td><td>3</td></tr><tr><td>6</td><td>3</td></tr><tr><td>7</td><td>3</td></tr><tr><td>8</td><td>4</td></tr></tbody></table><p>노드의 개수가 n개일때의 높이 = logn  </p><p>2^n-1</p><ul><li>힙 값 삽입의 시간복잡도=&gt; O(logn)</li><li>힙 값 삭제의 시간복잡도 =&gt; O(logn)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-자료구조-기본&quot;&gt;&lt;a href=&quot;#1-자료구조-기본&quot; class=&quot;headerlink&quot; title=&quot;1. 자료구조 기본&quot;&gt;&lt;/a&gt;1. 자료구조 기본&lt;/h2&gt;&lt;h3 id=&quot;1-1-컴퓨터-기본-커리큘럽&quot;&gt;&lt;a href=&quot;#1-1-컴퓨터-
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/categories/tec/alogrithm/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/tags/alogrithm/"/>
    
      <category term="알고리즘" scheme="https://eunii.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="자료구조" scheme="https://eunii.github.io/tags/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/"/>
    
  </entry>
  
  <entry>
    <title>[알고리즘] 5. 고급 정렬(합병정렬, 퀵정렬)</title>
    <link href="https://eunii.github.io/2019/12/05/tec/algorithm/al7/"/>
    <id>https://eunii.github.io/2019/12/05/tec/algorithm/al7/</id>
    <published>2019-12-04T15:00:00.000Z</published>
    <updated>2020-01-27T12:02:55.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-로그-개념과-효율성"><a href="#1-로그-개념과-효율성" class="headerlink" title="1. 로그 개념과 효율성"></a>1. 로그 개념과 효율성</h2><p>log2 16=4;<br>logx y = N;<br>x^n=y;<br>nlog n &lt;- n이커질수록 o(n)과 속도 차이가 크다  </p><h2 id="2-고급정렬-종류"><a href="#2-고급정렬-종류" class="headerlink" title="2. 고급정렬 종류"></a>2. 고급정렬 종류</h2><h3 id="2-1-합병정렬"><a href="#2-1-합병정렬" class="headerlink" title="2.1 합병정렬"></a>2.1 합병정렬</h3><blockquote><p>정렬할 값을 반으로 나눠 각각 정렬 후 두 정렬을 크기순으로 합침</p></blockquote><h4 id="2-1-1-고급정렬-예제"><a href="#2-1-1-고급정렬-예제" class="headerlink" title="2.1.1 고급정렬 예제"></a>2.1.1 고급정렬 예제</h4><p>1) 아래 배열 정렬  </p><table><thead><tr><th>4</th><th>14</th><th>8</th><th>23</th><th>11</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>2) 반으로 나누기-&gt;각 값이 하나씩 있을때까지  </p><table><thead><tr><th>4</th><th>14</th><th>8</th><th></th><th>3</th><th>23</th><th>11</th></tr></thead><tbody><tr><td></td></tr></tbody></table><table><thead><tr><th>4</th><th>14</th><th></th><th>8</th><th></th><th>3</th><th>23</th><th></th><th>11</th></tr></thead><tbody><tr><td></td></tr></tbody></table><table><thead><tr><th>4</th><th></th><th>14</th><th></th><th>8</th><th></th><th>3</th><th></th><th>23</th><th></th><th>11</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>3) 각각 크기순으로 배열 합치기  </p><table><thead><tr><th><strong>4</strong></th><th><strong>14</strong></th><th></th><th>8</th><th></th><th><strong>3</strong></th><th><strong>23</strong></th><th></th><th>11</th></tr></thead><tbody><tr><td></td></tr></tbody></table><table><thead><tr><th><strong>4</strong></th><th><strong>8</strong></th><th><strong>14</strong></th><th></th><th><strong>3</strong></th><th><strong>11</strong></th><th><strong>23</strong></th></tr></thead><tbody><tr><td></td></tr></tbody></table><table><thead><tr><th><strong>3</strong></th><th><strong>4</strong></th><th><strong>8</strong></th><th><strong>11</strong></th><th><strong>14</strong></th><th><strong>23</strong></th></tr></thead><tbody><tr><td></td></tr></tbody></table><h4 id="2-1-2-합병정렬-시간복잡도"><a href="#2-1-2-합병정렬-시간복잡도" class="headerlink" title="2.1.2 합병정렬 시간복잡도"></a>2.1.2 합병정렬 시간복잡도</h4><p>1) 왼쪽 /오른쪽 합병정렬 T(n/2) +T(n/2) =&gt; n<br>2) 두 배열 합치기 o(n)<br>3) T(n)=2*T(n/2)+O(n)<br>이걸 풀면…<br>T(n)=O(nlogn)</p><h4 id="2-1-3-합병정렬-재귀함수-디자인"><a href="#2-1-3-합병정렬-재귀함수-디자인" class="headerlink" title="2.1.3 합병정렬 재귀함수 디자인"></a>2.1.3 합병정렬 재귀함수 디자인</h4><p>1) 함수 정의<br>2) 기저조건 s&gt;=e이면 retrun<br>3) mearge(arr, s, e)<br>mearge(arr, s, mid)<br>mearge(arr, mid+1, e)</p><h4 id="2-1-4-합병정렬-구현"><a href="#2-1-4-합병정렬-구현" class="headerlink" title="2.1.4 합병정렬 구현"></a>2.1.4 합병정렬 구현</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-퀵정렬"><a href="#2-2-퀵정렬" class="headerlink" title="2.2 퀵정렬"></a>2.2 퀵정렬</h3><blockquote><p>임의의 값 하나를 기준으로 기준값보다 큰건 오른쪽 작은건 왼쪽으로 보내기</p></blockquote><h3 id="2-2-1-예시"><a href="#2-2-1-예시" class="headerlink" title="2.2.1 예시"></a>2.2.1 예시</h3><p>1) 아래 배열 퀵정렬</p><table><thead><tr><th>3</th><th>1</th><th>5</th><th>4</th><th>2</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>2) 배열 제일 앞숫자3 기준 정렬</p><table><thead><tr><th>1</th><th>2</th><th><strong>3</strong></th><th>5</th><th>4</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>3-1) 3기준 앞 배열 제일 앞 숫자1로 정렬</p><table><thead><tr><th><strong>1</strong></th><th><strong>2</strong></th><th><strong>3</strong></th><th>5</th><th>4</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>3-2) 3기준 뒤 배열 중 가장 앞 숫자 5기준으로 정렬</p><table><thead><tr><th><strong>1</strong></th><th><strong>2</strong></th><th><strong>3</strong></th><th><strong>5</strong></th><th><strong>4</strong></th></tr></thead><tbody><tr><td></td></tr></tbody></table><h3 id="2-2-2-퀵정렬-시간복잡도"><a href="#2-2-2-퀵정렬-시간복잡도" class="headerlink" title="2.2.2 퀵정렬 시간복잡도"></a>2.2.2 퀵정렬 시간복잡도</h3><p>평균적으로는 O(nlogn) 가장 오래 걸리면 O(n^2)</p><h3 id="2-2-3-퀵정렬-구현"><a href="#2-2-3-퀵정렬-구현" class="headerlink" title="2.2.3 퀵정렬 구현"></a>2.2.3 퀵정렬 구현</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-힙정렬"><a href="#2-3-힙정렬" class="headerlink" title="2.3 힙정렬"></a>2.3 힙정렬</h3><blockquote><p>트리구조를 이용한 정렬 나중에 나옴!</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-로그-개념과-효율성&quot;&gt;&lt;a href=&quot;#1-로그-개념과-효율성&quot; class=&quot;headerlink&quot; title=&quot;1. 로그 개념과 효율성&quot;&gt;&lt;/a&gt;1. 로그 개념과 효율성&lt;/h2&gt;&lt;p&gt;log2 16=4;&lt;br&gt;logx y = N;&lt;br
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/categories/tec/alogrithm/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/tags/alogrithm/"/>
    
      <category term="정렬" scheme="https://eunii.github.io/tags/%EC%A0%95%EB%A0%AC/"/>
    
      <category term="알고리즘" scheme="https://eunii.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
  </entry>
  
  <entry>
    <title>[알고리즘] 4. 재귀함수</title>
    <link href="https://eunii.github.io/2019/12/04/tec/algorithm/al6/"/>
    <id>https://eunii.github.io/2019/12/04/tec/algorithm/al6/</id>
    <published>2019-12-03T15:00:00.000Z</published>
    <updated>2020-01-27T12:02:17.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-재귀함수"><a href="#1-재귀함수" class="headerlink" title="1. 재귀함수"></a>1. 재귀함수</h2><blockquote><p>자기자신을 부르는 함수</p></blockquote><h3 id="1-2-재귀함수가-의미있는-예제"><a href="#1-2-재귀함수가-의미있는-예제" class="headerlink" title="1.2 재귀함수가 의미있는 예제"></a>1.2 재귀함수가 의미있는 예제</h3><ul><li>펙토리얼 n! = n<em>(n-1)</em>(n-2)…*1<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getFactorial</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> n*getFactorial(n-<span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>함수 호출 흐름</p><ol><li>main에서 getFactorial(3) 호출된다고 가정.</li><li>getFactorial(3)에서<br> 3*getFactorial(2)리턴</li><li>getFactorial(2)에서<br>  2*getFactorial(1) 리턴</li><li>getFactorial(1)에서 1리턴</li><li>1<em>2</em>3 도출</li></ol><h3 id="1-2-두가지-계산반벙"><a href="#1-2-두가지-계산반벙" class="headerlink" title="1.2 두가지 계산반벙"></a>1.2 두가지 계산반벙</h3><h4 id="1-2-1-순차적-계산방법"><a href="#1-2-1-순차적-계산방법" class="headerlink" title="1.2.1 순차적 계산방법"></a>1.2.1 순차적 계산방법</h4><p>A를 계산, A를 이용해서 B를 계산, B를 이용해서 C를 계산..<br>n!=n<em>(n-1)…</em>1</p><h4 id="1-2-2-귀납적-계산방법"><a href="#1-2-2-귀납적-계산방법" class="headerlink" title="1.2.2 귀납적 계산방법"></a>1.2.2 귀납적 계산방법</h4><p>구하려고 하는 값은 f(x) f(x)를 구하기 위해 또 f(x)를 활용함<br>n!= 5<em>f(4)<br>n!=5</em>4<em>f(3)<br>…<br>n! = 5</em>4<em>3</em>2*f(1)</p><ul><li>n의 m제곱을 귀납적으로 정의<br>n^m = n<em>n^(m-1)<br>…<br>n^m = n</em>n<em>n..</em>n^0</li></ul><h3 id="1-3-수납적-귀납법"><a href="#1-3-수납적-귀납법" class="headerlink" title="1.3 수납적 귀납법"></a>1.3 수납적 귀납법</h3><p>명제 p(n)이 모든 n에 성립함을 증명.<br>p(k)가 성립한다고 가정후 p(k+1)이 성립함을 증명.</p><h2 id="2-재귀함수-디자인"><a href="#2-재귀함수-디자인" class="headerlink" title="2 재귀함수 디자인"></a>2 재귀함수 디자인</h2><h3 id="2-1-3가지-절차"><a href="#2-1-3가지-절차" class="headerlink" title="2.1 3가지 절차"></a>2.1 3가지 절차</h3><h4 id="1-함수의-역할을-명확하게-정의"><a href="#1-함수의-역할을-명확하게-정의" class="headerlink" title="1) 함수의 역할을 명확하게 정의"></a>1) 함수의 역할을 명확하게 정의</h4><h4 id="2-기저조건에서-함수가-제대로-동작함을-보임"><a href="#2-기저조건에서-함수가-제대로-동작함을-보임" class="headerlink" title="2) 기저조건에서 함수가 제대로 동작함을 보임"></a>2) 기저조건에서 함수가 제대로 동작함을 보임</h4><h4 id="3-함수가-제대로-동작한다고-가정하고-함수를-완성"><a href="#3-함수가-제대로-동작한다고-가정하고-함수를-완성" class="headerlink" title="3) 함수가 제대로 동작한다고 가정하고 함수를 완성"></a>3) 함수가 제대로 동작한다고 가정하고 함수를 완성</h4><h3 id="2-2-재귀함수-구현"><a href="#2-2-재귀함수-구현" class="headerlink" title="2.2 재귀함수 구현"></a>2.2 재귀함수 구현</h3><h4 id="2-2-1-n의-m제곱"><a href="#2-2-1-n의-m제곱" class="headerlink" title="2.2.1 n의 m제곱"></a>2.2.1 n의 m제곱</h4><h5 id="1-getPower-n-m-은-n의-m승을-반환하는-함수이다"><a href="#1-getPower-n-m-은-n의-m승을-반환하는-함수이다" class="headerlink" title="1) getPower(n,m)은 n의 m승을 반환하는 함수이다."></a>1) getPower(n,m)은 n의 m승을 반환하는 함수이다.</h5><p>ex) getPower(2,4)=16</p><h5 id="2-기저조건-getPower-n-0-1"><a href="#2-기저조건-getPower-n-0-1" class="headerlink" title="2) 기저조건 getPower(n,0)=1"></a>2) 기저조건 getPower(n,0)=1</h5><h5 id="3-getPower-n-m-n-getPower-n-m-1"><a href="#3-getPower-n-m-n-getPower-n-m-1" class="headerlink" title="3) getPower(n,m)=n * getPower(n, m-1)"></a>3) getPower(n,m)=n * getPower(n, m-1)</h5><h4 id="2-2-2-이진수-출력하기"><a href="#2-2-2-이진수-출력하기" class="headerlink" title="2.2.2 이진수 출력하기"></a>2.2.2 이진수 출력하기</h4><h5 id="1-pringBin-x-는-X를-이진수로-바꿔출력하는-함수"><a href="#1-pringBin-x-는-X를-이진수로-바꿔출력하는-함수" class="headerlink" title="1) pringBin(x)는 X를 이진수로 바꿔출력하는 함수"></a>1) pringBin(x)는 X를 이진수로 바꿔출력하는 함수</h5><h5 id="2-기저조건-printBin-1-1-printBin-0-0"><a href="#2-기저조건-printBin-1-1-printBin-0-0" class="headerlink" title="2) 기저조건 printBin(1)=1, printBin(0)=0"></a>2) 기저조건 printBin(1)=1, printBin(0)=0</h5><h5 id="3-printBin-x-print-x-2-print-x-2"><a href="#3-printBin-x-print-x-2-print-x-2" class="headerlink" title="3) printBin(x)={ print(x/2); print(x%2);}"></a>3) printBin(x)={ print(x/2); print(x%2);}</h5><h4 id="2-2-3-펠린드롬인지-판별하기"><a href="#2-2-3-펠린드롬인지-판별하기" class="headerlink" title="2.2.3 펠린드롬인지 판별하기"></a>2.2.3 펠린드롬인지 판별하기</h4><ul><li>펠린드롬은 좌우 대칭인 값을 말함<h5 id="1-isPal-String-start-end"><a href="#1-isPal-String-start-end" class="headerlink" title="1) isPal(String, start, end)"></a>1) isPal(String, start, end)</h5><h5 id="2-기저조건-start-end-isPal-String-start-end-true"><a href="#2-기저조건-start-end-isPal-String-start-end-true" class="headerlink" title="2) 기저조건: start==end isPal(String, start, end)=true;"></a>2) 기저조건: start==end isPal(String, start, end)=true;</h5><h5 id="3-isPal-String-start-end"><a href="#3-isPal-String-start-end" class="headerlink" title="3) isPal(String, start, end)"></a>3) isPal(String, start, end)</h5>if(String.start==String.end) return isPal(String, start+1, end-1);<br>else return false;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-재귀함수&quot;&gt;&lt;a href=&quot;#1-재귀함수&quot; class=&quot;headerlink&quot; title=&quot;1. 재귀함수&quot;&gt;&lt;/a&gt;1. 재귀함수&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;자기자신을 부르는 함수&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/categories/tec/alogrithm/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/tags/alogrithm/"/>
    
      <category term="알고리즘" scheme="https://eunii.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="재귀함수" scheme="https://eunii.github.io/tags/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>[알고리즘] 3. 정수(Integer)</title>
    <link href="https://eunii.github.io/2019/12/03/tec/algorithm/al5/"/>
    <id>https://eunii.github.io/2019/12/03/tec/algorithm/al5/</id>
    <published>2019-12-02T15:00:00.000Z</published>
    <updated>2020-01-27T12:07:10.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-정수"><a href="#1-정수" class="headerlink" title="1. 정수"></a>1. 정수</h2><h3 id="1-1-약수"><a href="#1-1-약수" class="headerlink" title="1.1 약수"></a>1.1 약수</h3><blockquote><p>특정 수를 나누어 떨어지게 하는 수</p></blockquote><h4 id="1-1-1-약수-구하기-구현"><a href="#1-1-1-약수-구하기-구현" class="headerlink" title="1.1.1 약수 구하기 구현"></a>1.1.1 약수 구하기 구현</h4><h3 id="1-2-소수"><a href="#1-2-소수" class="headerlink" title="1.2 소수"></a>1.2 소수</h3><blockquote><p>약수가 1과 자기자신인 수 </p></blockquote><h4 id="1-2-1-소수-구하기-구현"><a href="#1-2-1-소수-구하기-구현" class="headerlink" title="1.2.1 소수 구하기 구현"></a>1.2.1 소수 구하기 구현</h4><h4 id="1-2-2-에라토스테네스의-체-소수-구하기-구현"><a href="#1-2-2-에라토스테네스의-체-소수-구하기-구현" class="headerlink" title="1.2.2 에라토스테네스의 체(소수 구하기) 구현"></a>1.2.2 에라토스테네스의 체(소수 구하기) 구현</h4><h3 id="1-3-소인수-분해"><a href="#1-3-소인수-분해" class="headerlink" title="1.3 소인수 분해"></a>1.3 소인수 분해</h3><p>숫자N을 소수의 곱으로 나타냄</p><h4 id="1-3-1-구현"><a href="#1-3-1-구현" class="headerlink" title="1.3.1 구현"></a>1.3.1 구현</h4><h3 id="1-4-공약수와-공배수"><a href="#1-4-공약수와-공배수" class="headerlink" title="1.4 공약수와 공배수"></a>1.4 공약수와 공배수</h3><blockquote><p>A,B 공약수, A와 B의 공통된 약수<br>AB 공배수 A와 B의 공통된 배수</p></blockquote><h4 id="1-4-1-최대공약수-GCD-최소공배수-LCM"><a href="#1-4-1-최대공약수-GCD-최소공배수-LCM" class="headerlink" title="1.4.1 최대공약수(GCD), 최소공배수(LCM)"></a>1.4.1 최대공약수(GCD), 최소공배수(LCM)</h4><h4 id="1-4-2-유클리드-호제법"><a href="#1-4-2-유클리드-호제법" class="headerlink" title="1.4.2 유클리드 호제법"></a>1.4.2 유클리드 호제법</h4><blockquote><p>a, b, r(a/b)<br>b, r(a/b) , r(b, r(a/b))<br>… a, b, r==0일때, b 가 최대공약수</p></blockquote><h3 id="1-4-파스칼-삼각형"><a href="#1-4-파스칼-삼각형" class="headerlink" title="1.4 파스칼 삼각형"></a>1.4 파스칼 삼각형</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">121</span><br><span class="line">1331</span><br><span class="line">3C0, 3C1, 3C2, 3C3</span><br><span class="line">14641</span><br></pre></td></tr></table></figure><p>콤비네이션 값 구할때 사용(20C11)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-정수&quot;&gt;&lt;a href=&quot;#1-정수&quot; class=&quot;headerlink&quot; title=&quot;1. 정수&quot;&gt;&lt;/a&gt;1. 정수&lt;/h2&gt;&lt;h3 id=&quot;1-1-약수&quot;&gt;&lt;a href=&quot;#1-1-약수&quot; class=&quot;headerlink&quot; title=&quot;1.1
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/categories/tec/alogrithm/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/tags/alogrithm/"/>
    
      <category term="알고리즘" scheme="https://eunii.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="시간복잡도" scheme="https://eunii.github.io/tags/%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84/"/>
    
  </entry>
  
  <entry>
    <title>[알고리즘] 2. 시간복잡도</title>
    <link href="https://eunii.github.io/2019/12/02/tec/algorithm/al4/"/>
    <id>https://eunii.github.io/2019/12/02/tec/algorithm/al4/</id>
    <published>2019-12-01T15:00:00.000Z</published>
    <updated>2020-01-27T12:00:06.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-시간복잡도"><a href="#1-시간복잡도" class="headerlink" title="1. 시간복잡도"></a>1. 시간복잡도</h2><blockquote><p>문제가 얼마나 빠르게 해결되는지 나타냄<br>대략적으로 몇개의 명령을 수행하는지?</p></blockquote><h3 id="1-1-for문"><a href="#1-1-for문" class="headerlink" title="1.1 for문"></a>1.1 for문</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span> ; i&lt;n; i++)&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>int a=0;명령을 n번 수행 &gt;&gt; <strong>시간복잡도 O(n)</strong></p></blockquote><h3 id="1-2-n-n-이중for문"><a href="#1-2-n-n-이중for문" class="headerlink" title="1.2 n*n 이중for문"></a>1.2 n*n 이중for문</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span> ; i&lt;n; i++)&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span> ; j&lt;n; j++)&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>int a=0;명령을 n*n번 수행 &gt;&gt; <strong>시간복잡도 O(n^2)</strong></p></blockquote><h3 id="1-3-n-n-1-n-2-…2-1-이중for문"><a href="#1-3-n-n-1-n-2-…2-1-이중for문" class="headerlink" title="1.3 n(n-1)(n-2) …2*1 이중for문"></a>1.3 n<em>(n-1)</em>(n-2) …2*1 이중for문</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span> ; i&lt;n; i++)&#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span> ; j&lt;i; j++)&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>int a=0;명령을 n(n-1)/2번 수행  &gt;&gt; 1/2<em>n</em>n &gt;&gt; 상수는 무시 &gt;&gt; <strong>시간복잡도 O(n^2)</strong></p></blockquote><h3 id="1-4-if절-있는-for문"><a href="#1-4-if절-있는-for문" class="headerlink" title="1.4 if절 있는 for문"></a>1.4 if절 있는 for문</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span> ; i&lt;n; i++)&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>최악의 경우 n번 수행(if절 결과에 따라) &gt; O(N)<br>최고차항만 체크</p></blockquote><h2 id="2-입력크기에-따른-수행시간"><a href="#2-입력크기에-따른-수행시간" class="headerlink" title="2. 입력크기에 따른 수행시간"></a>2. 입력크기에 따른 수행시간</h2><ol><li>n의 입력 값에 따라 수행시간 다름</li><li>컴퓨터 사양에 따라 다름</li></ol><h3 id="2-1-O-N-시간복잡도"><a href="#2-1-O-N-시간복잡도" class="headerlink" title="2.1 O(N) 시간복잡도"></a>2.1 O(N) 시간복잡도</h3><ul><li>n이 9000만개일때 보통 1초</li></ul><h3 id="2-2-O-N-2-시간복잡도"><a href="#2-2-O-N-2-시간복잡도" class="headerlink" title="2.2 O(N^2) 시간복잡도"></a>2.2 O(N^2) 시간복잡도</h3><ul><li>n이 10000개일때 보통 1초 &gt; 명령어 실행수 대략 <strong>1억에 1</strong></li></ul><h2 id="3-정렬의-시간복잡도"><a href="#3-정렬의-시간복잡도" class="headerlink" title="3. 정렬의 시간복잡도"></a>3. 정렬의 시간복잡도</h2><h3 id="3-1-선택정렬"><a href="#3-1-선택정렬" class="headerlink" title="3.1 선택정렬"></a>3.1 선택정렬</h3><blockquote><p>최소값 1번 찾는데 O(N)번 * N번 &gt; <strong>O(n^2)</strong></p></blockquote><h3 id="3-2-삽입정렬"><a href="#3-2-삽입정렬" class="headerlink" title="3.2 삽입정렬"></a>3.2 삽입정렬</h3><blockquote><p>원소 하나 삽입 시 O(N)걸림 * N번 &gt; <strong>O(n^2)</strong></p></blockquote><h3 id="3-3-버블-정렬"><a href="#3-3-버블-정렬" class="headerlink" title="3.3 버블 정렬"></a>3.3 버블 정렬</h3><blockquote><p>인접한 원소 비교해서 뒤로 보냄 O(n) 걸림 * n번 &gt; <strong>O(n^2)</strong></p></blockquote><ul><li>선택, 삽입, 버블 정렬은 시간복잡도가 안 좋은편!!</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-시간복잡도&quot;&gt;&lt;a href=&quot;#1-시간복잡도&quot; class=&quot;headerlink&quot; title=&quot;1. 시간복잡도&quot;&gt;&lt;/a&gt;1. 시간복잡도&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;문제가 얼마나 빠르게 해결되는지 나타냄&lt;br&gt;대략적으로 몇개의 
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/categories/tec/alogrithm/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/tags/alogrithm/"/>
    
      <category term="알고리즘" scheme="https://eunii.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
      <category term="시간복잡도" scheme="https://eunii.github.io/tags/%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84/"/>
    
  </entry>
  
  <entry>
    <title>[알고리즘] 1. 정렬 기초(선택정렬, 삽입정렬, 버블정렬)</title>
    <link href="https://eunii.github.io/2019/12/01/tec/algorithm/al3/"/>
    <id>https://eunii.github.io/2019/12/01/tec/algorithm/al3/</id>
    <published>2019-11-30T15:00:00.000Z</published>
    <updated>2020-01-27T11:59:17.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-정렬"><a href="#1-정렬" class="headerlink" title="1.정렬"></a>1.정렬</h2><blockquote><p>오름차순, 내림차순 </p></blockquote><h3 id="1-1-정렬의-종류"><a href="#1-1-정렬의-종류" class="headerlink" title="1.1 정렬의 종류"></a>1.1 정렬의 종류</h3><ol><li>선택정렬</li><li>삽입정렬</li><li>버블정렬</li></ol><h4 id="1-1-1-선택정렬-예시"><a href="#1-1-1-선택정렬-예시" class="headerlink" title="1.1.1 선택정렬 예시"></a>1.1.1 선택정렬 예시</h4><blockquote><p>배열을 순서대로 탐색하면서 최소값을 앞으로 이동시킴</p></blockquote><h5 id="0-주어진-배열"><a href="#0-주어진-배열" class="headerlink" title="0) 주어진 배열"></a>0) 주어진 배열</h5><table><thead><tr><th>2</th><th>5</th><th>6</th><th>7</th><th>1</th><th>3</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="1-첫번째-정렬-1과-2-자리변경"><a href="#1-첫번째-정렬-1과-2-자리변경" class="headerlink" title="1) 첫번째 정렬(1과 2 자리변경)"></a>1) 첫번째 정렬(1과 2 자리변경)</h5><table><thead><tr><th><strong>1</strong></th><th>5</th><th>6</th><th>7</th><th><strong>2</strong></th><th>3</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="2-두번째-정렬-배열2부터-최소값찾기-2와-5자리-변경"><a href="#2-두번째-정렬-배열2부터-최소값찾기-2와-5자리-변경" class="headerlink" title="2) 두번째 정렬(배열2부터 최소값찾기/2와 5자리 변경)"></a>2) 두번째 정렬(배열2부터 최소값찾기/2와 5자리 변경)</h5><table><thead><tr><th>1</th><th><strong>2</strong></th><th>6</th><th>7</th><th><strong>5</strong></th><th>3</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="3-세번째-정렬-배열3부터-최소값찾기-3와-6자리-변경"><a href="#3-세번째-정렬-배열3부터-최소값찾기-3와-6자리-변경" class="headerlink" title="3) 세번째 정렬(배열3부터 최소값찾기/3와 6자리 변경)"></a>3) 세번째 정렬(배열3부터 최소값찾기/3와 6자리 변경)</h5><table><thead><tr><th>1</th><th>2</th><th>3</th><th>7</th><th>5</th><th>6</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="4-네번째-정렬-배열4부터-최소값찾기-5와-7자리-변경"><a href="#4-네번째-정렬-배열4부터-최소값찾기-5와-7자리-변경" class="headerlink" title="4) 네번째 정렬(배열4부터 최소값찾기/5와 7자리 변경)"></a>4) 네번째 정렬(배열4부터 최소값찾기/5와 7자리 변경)</h5><table><thead><tr><th>1</th><th>2</th><th>3</th><th>5</th><th>7</th><th>6</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="5-다섯번째-정렬-배열5부터-최소값찾기-6와-7자리-변경"><a href="#5-다섯번째-정렬-배열5부터-최소값찾기-6와-7자리-변경" class="headerlink" title="5) 다섯번째 정렬(배열5부터 최소값찾기/6와 7자리 변경)"></a>5) 다섯번째 정렬(배열5부터 최소값찾기/6와 7자리 변경)</h5><table><thead><tr><th>1</th><th>2</th><th>3</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="6-선택정렬끝"><a href="#6-선택정렬끝" class="headerlink" title="6) 선택정렬끝!!"></a>6) 선택정렬끝!!</h5><h4 id="1-2-1-삽입정렬"><a href="#1-2-1-삽입정렬" class="headerlink" title="1.2.1 삽입정렬"></a>1.2.1 삽입정렬</h4><blockquote><p>기준 배열과 나머지 배열 비교하여 작은것 것을 앞으로 바꿈</p></blockquote><p>ex)</p><h5 id="0-주어진-배열-1"><a href="#0-주어진-배열-1" class="headerlink" title="0) 주어진 배열"></a>0) 주어진 배열</h5><table><thead><tr><th>2</th><th>5</th><th>9</th><th>1</th><th>6</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="1-첫번째-정렬"><a href="#1-첫번째-정렬" class="headerlink" title="1) 첫번째 정렬"></a>1) 첫번째 정렬</h5><p>(2와 5비교 유지)  </p><table><thead><tr><th>2</th><th>5</th><th>9</th><th>1</th><th>6</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>(2와 9비교 유지) </p><table><thead><tr><th>2</th><th>5</th><th>9</th><th>1</th><th>6</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>(2와 1비교 1과 2위치 변경)</p><table><thead><tr><th>1</th><th>5</th><th>9</th><th>2</th><th>6</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>(1과 6비교 유지)</p><table><thead><tr><th>1</th><th>5</th><th>9</th><th>2</th><th>6</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="2-두번째-정렬-배열2부터-최소값찾기-2와-5자리-변경-1"><a href="#2-두번째-정렬-배열2부터-최소값찾기-2와-5자리-변경-1" class="headerlink" title="2) 두번째 정렬(배열2부터 최소값찾기/2와 5자리 변경)"></a>2) 두번째 정렬(배열2부터 최소값찾기/2와 5자리 변경)</h5><p>(5와 9비교 유지)</p><table><thead><tr><th>1</th><th>5</th><th>9</th><th>2</th><th>6</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>(5와 2비교 자리변경)</p><table><thead><tr><th>1</th><th>2</th><th>9</th><th>5</th><th>6</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>(2와 6비교 유지)</p><table><thead><tr><th>1</th><th>2</th><th>9</th><th>5</th><th>6</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="3-세번째-정렬-배열3부터-최소값찾기-3와-6자리-변경-1"><a href="#3-세번째-정렬-배열3부터-최소값찾기-3와-6자리-변경-1" class="headerlink" title="3) 세번째 정렬(배열3부터 최소값찾기/3와 6자리 변경)"></a>3) 세번째 정렬(배열3부터 최소값찾기/3와 6자리 변경)</h5><p>(5와9비교 유지)</p><table><thead><tr><th>1</th><th>2</th><th>5</th><th>9</th><th>6</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>(5와 6비교 유지)</p><table><thead><tr><th>1</th><th>2</th><th>5</th><th>9</th><th>6</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="4-네번째-정렬-배열3부터-최소값찾기-3와-6자리-변경"><a href="#4-네번째-정렬-배열3부터-최소값찾기-3와-6자리-변경" class="headerlink" title="4) 네번째 정렬(배열3부터 최소값찾기/3와 6자리 변경)"></a>4) 네번째 정렬(배열3부터 최소값찾기/3와 6자리 변경)</h5><p>(9와9비교 변경)</p><table><thead><tr><th>1</th><th>2</th><th>5</th><th>6</th><th>9</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="5-삽입정렬끝"><a href="#5-삽입정렬끝" class="headerlink" title="5) 삽입정렬끝!!"></a>5) 삽입정렬끝!!</h5><h4 id="1-3-1-버블정렬"><a href="#1-3-1-버블정렬" class="headerlink" title="1.3.1 버블정렬"></a>1.3.1 버블정렬</h4><blockquote><p>인접한 두 원소 비교 해서 큰 수를 뒤로 보냄</p></blockquote><p>ex)</p><h5 id="0-주어진-배열-2"><a href="#0-주어진-배열-2" class="headerlink" title="0) 주어진 배열"></a>0) 주어진 배열</h5><table><thead><tr><th>3</th><th>2</th><th>5</th><th>1</th><th>4</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="1-첫번째-정렬-1"><a href="#1-첫번째-정렬-1" class="headerlink" title="1) 첫번째 정렬"></a>1) 첫번째 정렬</h5><p>(3과 2비교 자리 바꿈)  </p><table><thead><tr><th>2</th><th>3</th><th>5</th><th>1</th><th>4</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>(3과 5비교 유지) </p><table><thead><tr><th>2</th><th>3</th><th>5</th><th>1</th><th>4</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>(5와 1비교 자리 변경)</p><table><thead><tr><th>2</th><th>3</th><th>1</th><th>5</th><th>4</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>(5와 4비교 변경 &gt; 5자리 확정)</p><table><thead><tr><th>2</th><th>3</th><th>1</th><th>4</th><th>5</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="2-두번째-정렬"><a href="#2-두번째-정렬" class="headerlink" title="2) 두번째 정렬"></a>2) 두번째 정렬</h5><p>(2와 3비교 유지)</p><table><thead><tr><th>2</th><th>3</th><th>1</th><th>4</th><th>5</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>(3와 1비교 자리변경)</p><table><thead><tr><th>2</th><th>1</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>(3와 4비교 유지 &gt; 4자리 확정)</p><table><thead><tr><th>2</th><th>1</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="3-세번째-정렬"><a href="#3-세번째-정렬" class="headerlink" title="3) 세번째 정렬"></a>3) 세번째 정렬</h5><p>(2와1비교 변경)</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>(2와 3비교 유지 &gt; 3자리 확정)</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="4-네번째-정렬"><a href="#4-네번째-정렬" class="headerlink" title="4) 네번째 정렬"></a>4) 네번째 정렬</h5><p>(1와2비교 유지 &gt; 2자리 확정)</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h5 id="5-버블정렬끝"><a href="#5-버블정렬끝" class="headerlink" title="5) 버블정렬끝!!"></a>5) 버블정렬끝!!</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-정렬&quot;&gt;&lt;a href=&quot;#1-정렬&quot; class=&quot;headerlink&quot; title=&quot;1.정렬&quot;&gt;&lt;/a&gt;1.정렬&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;오름차순, 내림차순 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-1-정렬의-종류&quot;
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/categories/tec/alogrithm/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/tags/alogrithm/"/>
    
      <category term="정렬" scheme="https://eunii.github.io/tags/%EC%A0%95%EB%A0%AC/"/>
    
      <category term="알고리즘" scheme="https://eunii.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
  </entry>
  
  <entry>
    <title>[Hexo와 깃허브로 블로그 만들기] 블로그에 layout 만들어 빠른 포스팅 하기</title>
    <link href="https://eunii.github.io/2019/10/18/tec/blog/blog12/"/>
    <id>https://eunii.github.io/2019/10/18/tec/blog/blog12/</id>
    <published>2019-10-18T04:10:25.000Z</published>
    <updated>2019-10-18T04:13:01.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-scaffolds-파일-아래-blog-md-파일을-만든다"><a href="#1-scaffolds-파일-아래-blog-md-파일을-만든다" class="headerlink" title="1. /scaffolds 파일 아래 blog.md 파일을 만든다."></a>1. /scaffolds 파일 아래 blog.md 파일을 만든다.</h2><p>원하는 형식으로 Front-Matter부분을 수정한다.<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line"></span><br><span class="line">categories:</span><br><span class="line">   [tec, blog]</span><br><span class="line">tags:</span><br><span class="line">   [blog, tec, hexo, github]</span><br><span class="line">   </span><br><span class="line">toc: true</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h2 id="2-커멘드-창에서-프로젝트-위치아래에서-아래와-같이-명령어를-입력한다"><a href="#2-커멘드-창에서-프로젝트-위치아래에서-아래와-같이-명령어를-입력한다" class="headerlink" title="2. 커멘드 창에서 (프로젝트 위치아래에서) 아래와 같이 명령어를 입력한다."></a>2. 커멘드 창에서 (프로젝트 위치아래에서) 아래와 같이 명령어를 입력한다.</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new blog -p tec/blog/blog13 &quot;레이아웃 만들기&quot;</span><br></pre></td></tr></table></figure><ul><li>blog:  아까 scaffolders에서 만든 레이아웃 파일명  </li><li>-p:  경로명  </li><li>“레이아웃만들기”:  title안에 들어갈 내용<br><a href="https://hexo.io/docs/writing#content-inner" rel="external nofollow noopener noreferrer" target="_blank">명령어 옵션 참고</a></li></ul><h2 id="3-source-posts-tec-blog-blog13-md-파일이-생성된-것을-확인-할-수있다"><a href="#3-source-posts-tec-blog-blog13-md-파일이-생성된-것을-확인-할-수있다" class="headerlink" title="3. /source/_posts/tec/blog/blog13.md 파일이 생성된 것을 확인 할 수있다."></a>3. /source/_posts/tec/blog/blog13.md 파일이 생성된 것을 확인 할 수있다.</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: &quot;레이아웃 만들기&quot;</span><br><span class="line">categories:</span><br><span class="line">   [tec, blog]</span><br><span class="line">tags:</span><br><span class="line">   [blog, tec, hexo, github, google-analytics]</span><br><span class="line">toc: true </span><br><span class="line">date: 2019/10/18 13:09:23   </span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="4-해당-파일에-원하는-글을-써서-배포한다"><a href="#4-해당-파일에-원하는-글을-써서-배포한다" class="headerlink" title="4. 해당 파일에 원하는 글을 써서 배포한다."></a>4. 해당 파일에 원하는 글을 써서 배포한다.</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-scaffolds-파일-아래-blog-md-파일을-만든다&quot;&gt;&lt;a href=&quot;#1-scaffolds-파일-아래-blog-md-파일을-만든다&quot; class=&quot;headerlink&quot; title=&quot;1. /scaffolds 파일 아래 blog.m
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/categories/tec/blog/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/tags/blog/"/>
    
      <category term="github" scheme="https://eunii.github.io/tags/github/"/>
    
      <category term="hexo" scheme="https://eunii.github.io/tags/hexo/"/>
    
      <category term="google-analytics" scheme="https://eunii.github.io/tags/google-analytics/"/>
    
  </entry>
  
  <entry>
    <title>[React 교과서] 6장 React 에서 이벤트 다루기</title>
    <link href="https://eunii.github.io/2019/09/03/tec/react/react7/"/>
    <id>https://eunii.github.io/2019/09/03/tec/react/react7/</id>
    <published>2019-09-03T02:26:25.000Z</published>
    <updated>2019-09-03T08:20:08.795Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>리엑트 교과서를 정리한 내용입니다.</p></blockquote><h2 id="6-1-React에서-DOM이벤트-다루기"><a href="#6-1-React에서-DOM이벤트-다루기" class="headerlink" title="6.1 React에서 DOM이벤트 다루기"></a>6.1 React에서 DOM이벤트 다루기</h2><p>아래 예제 코드는 이벤트 리스너에서 this를 콘솔에 표시하도록 한 코드. 여기서 event 객체는 내장 DOM이벤트를 객체를 개선한 것으로 합성 이벤트라고 부름  </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=&#123;(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.event)</span><br><span class="line">&#125;).bind(<span class="hljs-keyword">this</span>)&#125;&gt;</span><br><span class="line">Save</span><br><span class="line">&lt;<span class="hljs-regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><p>아래 경우에 bind(tnis)로 바인딩하지 않는다.</p><ul><li>this를 이용해서 해당 클래스를 참조 할 필요가 없을때</li><li>ES6+ 클래스 대신 예쩐방식인 React.createClass()를 사용할때. 이때는 createClass()가 자동으로 바인딩함.  </li><li>화살표 함수(() =&gt; {})를 사용할 때</li></ul><p>Reaact버전 15에서 지원하는 DOM 이벤트</p><table><thead><tr><th>이벤트 분류</th><th>React가 지원하는 이벤트</th></tr></thead><tbody><tr><td>마우스 이벤트</td><td>onClick, onContentMenu, <br> onDoubleClick, onDrag, <br>onDragEnd, onDragEnter,<br> onDragExit, onDragLeave, <br> onDragOver, onDragStart,<br>  onDrop, onMouseDown, <br> onMouseEnter, onMouseLeave, <br> onMouseMove, onMouseOut,<br>  onMouseOver, onMouseUp <br></td></tr><tr><td>키보드 이벤트</td><td>onKeyDown, onKeyPress, onKeyup</td></tr><tr><td>클립보드 이벤트</td><td>onCopy, onCut, onPaste</td></tr><tr><td>폼 이벤트</td><td>onChange, onInpute,<br>  onSubmit, onTnvalid</td></tr><tr><td>포커스 이벤트</td><td>onFocus, onBlur</td></tr><tr><td>터치 이벤트</td><td>onTouchCancel, onTouchEnd,<br>  onTouchMove, onTouchStart</td></tr><tr><td>UI이벤트</td><td>onScroll</td></tr><tr><td>휠 이벤트</td><td>onWheel</td></tr><tr><td>영역선택 이벤트</td><td>onSelect</td></tr><tr><td>이미지 이벤트</td><td>onLoad, onError</td></tr><tr><td>애니메이션 이벤트</td><td>onAnimationStart, onAnimationEnd, <br> onAnimationIteration</td></tr><tr><td>트랜지션 이벤트</td><td>onTransitionEnd</td></tr></tbody></table><h3 id="6-1-1-캡쳐-및-버블링-단계"><a href="#6-1-1-캡쳐-및-버블링-단계" class="headerlink" title="6.1.1 캡쳐 및 버블링 단계"></a>6.1.1 캡쳐 및 버블링 단계</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      &lt;div</span><br><span class="line">        style=&#123;&#123;border: '1px solid red'&#125;&#125;</span><br><span class="line">        onMouseOverCapture=&#123;((event)=&gt;&#123;</span><br><span class="line">          console.log('mouse over on capture event')</span><br><span class="line">          console.dir(event, this)&#125;).bind(this)&#125;</span><br><span class="line">        onMouseOver=&#123;((event)=&gt;&#123;</span><br><span class="line">          console.log('mouse over on bubbling event')</span><br><span class="line">          console.dir(event, this)&#125;).bind(this)&#125; &gt;</span><br><span class="line">          Open DevTools and move your mouse cursor over here</span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-2-React이벤트-살펴보기"><a href="#6-1-2-React이벤트-살펴보기" class="headerlink" title="6.1.2 React이벤트 살펴보기"></a>6.1.2 React이벤트 살펴보기</h3><h3 id="6-1-3-React-합성-이벤트-객체-다루기"><a href="#6-1-3-React-합성-이벤트-객체-다루기" class="headerlink" title="6.1.3 React 합성 이벤트 객체 다루기"></a>6.1.3 React 합성 이벤트 객체 다루기</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      &lt;div</span><br><span class="line">        style=&#123;&#123;border: '1px solid red'&#125;&#125;</span><br><span class="line">        onMouseOver=&#123;((event)=&gt;&#123;</span><br><span class="line">          console.log('mouse is over with event')</span><br><span class="line">          console.dir(event)&#125;).bind(this)&#125; &gt;</span><br><span class="line">          Open DevTools and move your mouse cursor over here</span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-4-이벤트와-상태-사용하기"><a href="#6-1-4-이벤트와-상태-사용하기" class="headerlink" title="6.1.4 이벤트와 상태 사용하기"></a>6.1.4 이벤트와 상태 사용하기</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Content</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props)</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;<span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick(event) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.setState(&#123;<span class="hljs-attr">counter</span>: ++<span class="hljs-keyword">this</span>.state.counter&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          onClick=&#123;<span class="hljs-keyword">this</span>.handleClick.bind(<span class="hljs-keyword">this</span>)&#125;</span><br><span class="line">          className=<span class="hljs-string">"btn btn-primary"</span>&gt;</span><br><span class="line">          Don<span class="hljs-string">'t click me &#123;this.state.counter&#125; times!</span></span><br><span class="line"><span class="hljs-string">        &lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">    )</span></span><br><span class="line"><span class="hljs-string">  &#125;</span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6-1-5-이벤트-핸들러를-속성으로-전달하기"><a href="#6-1-5-이벤트-핸들러를-속성으로-전달하기" class="headerlink" title="6.1.5 이벤트 핸들러를 속성으로 전달하기"></a>6.1.5 이벤트 핸들러를 속성으로 전달하기</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClickCounterButton</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span></span><br><span class="line"><span class="hljs-xml">      onClick=&#123;this.props.handler&#125;</span></span><br><span class="line"><span class="hljs-xml">      className="btn btn-danger"&gt;</span></span><br><span class="line"><span class="hljs-xml">      Increase Volume (Current volume is &#123;this.props.counter&#125;)</span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-6-컴포넌트-간의-데이터-교환"><a href="#6-1-6-컴포넌트-간의-데이터-교환" class="headerlink" title="6.1.6 컴포넌트 간의 데이터 교환"></a>6.1.6 컴포넌트 간의 데이터 교환</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClickCounterButton</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span></span><br><span class="line"><span class="hljs-xml">      onClick=&#123;this.props.handler&#125;</span></span><br><span class="line"><span class="hljs-xml">      className="btn btn-info"&gt;</span></span><br><span class="line"><span class="hljs-xml">      Don't touch me with your dirty hands!</span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Content</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props)</span><br><span class="line">    <span class="hljs-keyword">this</span>.handleClick = <span class="hljs-keyword">this</span>.handleClick.bind(<span class="hljs-keyword">this</span>)</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;<span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick(event) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.setState(&#123;<span class="hljs-attr">counter</span>: ++<span class="hljs-keyword">this</span>.state.counter&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ClickCounterButton handler=&#123;<span class="hljs-keyword">this</span>.handleClick&#125;/&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;Counter value=&#123;<span class="hljs-keyword">this</span>.state.counter&#125;/&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="6-2-React가-지원하지-않는-DOM이벤트-처리하기"><a href="#6-2-React가-지원하지-않는-DOM이벤트-처리하기" class="headerlink" title="6.2 React가 지원하지 않는 DOM이벤트 처리하기"></a>6.2 React가 지원하지 않는 DOM이벤트 처리하기</h2><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Radio</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props)</span><br><span class="line">    <span class="hljs-keyword">this</span>.handleResize = <span class="hljs-keyword">this</span>.handleResize.bind(<span class="hljs-keyword">this</span>)</span><br><span class="line">    <span class="hljs-keyword">let</span> order = props.order</span><br><span class="line">    <span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;</span><br><span class="line">      outerStyle: <span class="hljs-keyword">this</span>.getStyle(<span class="hljs-number">4</span>, i),</span><br><span class="line">      innerStyle: <span class="hljs-keyword">this</span>.getStyle(<span class="hljs-number">1</span>, i),</span><br><span class="line">      selectedStyle: <span class="hljs-keyword">this</span>.getStyle(<span class="hljs-number">2</span>, i),</span><br><span class="line">      taggerStyle: &#123;<span class="hljs-attr">top</span>: order*<span class="hljs-number">20</span>, <span class="hljs-attr">width</span>: <span class="hljs-number">25</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">25</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  getStyle(i, m) &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> value = i*m</span><br><span class="line">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">      top: value,</span><br><span class="line">      bottom: value,</span><br><span class="line">      left: value,</span><br><span class="line">      right: value,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'resize'</span>, <span class="hljs-keyword">this</span>.handleResize)</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">'resize'</span>, <span class="hljs-keyword">this</span>.handleResize)</span><br><span class="line">  &#125;</span><br><span class="line">  handleResize(event) &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> w = <span class="hljs-number">1</span>+ <span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">window</span>.innerWidth / <span class="hljs-number">300</span>)</span><br><span class="line">    <span class="hljs-keyword">this</span>.setState(&#123;</span><br><span class="line">      taggerStyle: &#123;<span class="hljs-attr">top</span>: <span class="hljs-keyword">this</span>.props.order*w*<span class="hljs-number">10</span>, <span class="hljs-attr">width</span>: w*<span class="hljs-number">10</span>, <span class="hljs-attr">height</span>: w*<span class="hljs-number">10</span>&#125;,</span><br><span class="line">      textStyle: &#123;<span class="hljs-attr">left</span>: w*<span class="hljs-number">13</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-number">7</span>*w&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      &lt;div className="radio-tagger" style=&#123;this.state.taggerStyle&#125;&gt;</span><br><span class="line">        &lt;input type="radio" name=&#123;this.props.name&#125; id=&#123;this.props.id&#125;&gt;</span><br><span class="line">        &lt;/input&gt;</span><br><span class="line">        &lt;label htmlFor=&#123;this.props.id&#125;&gt;</span><br><span class="line">          &lt;div className="radio-text" style=&#123;this.state.textStyle&#125;&gt;&#123;this.props.label&#125;&lt;/div&gt;</span><br><span class="line">          &lt;div className="radio-outer" style=&#123;this.state.outerStyle&#125;&gt;</span><br><span class="line">            &lt;div className="radio-inner" style=&#123;this.state.innerStyle&#125;&gt;</span><br><span class="line">              &lt;div className="radio-selected" style=&#123;this.state.selectedStyle&#125;&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line"><span class="hljs-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-React를-다른-라이브러리와-통합하기-jQurey-UI이벤트"><a href="#6-3-React를-다른-라이브러리와-통합하기-jQurey-UI이벤트" class="headerlink" title="6.3 React를 다른 라이브러리와 통합하기: jQurey UI이벤트"></a>6.3 React를 다른 라이브러리와 통합하기: jQurey UI이벤트</h2><h3 id="6-3-1-버튼-통합하기"><a href="#6-3-1-버튼-통합하기" class="headerlink" title="6.3.1. 버튼 통합하기"></a>6.3.1. 버튼 통합하기</h3><p>방법1 jQuery슬라이더를 위한 이벤트를 React컴포넌트에서 등록하는 방법</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SliderButtons</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props)</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;<span class="hljs-attr">sliderValue</span>: <span class="hljs-number">0</span>&#125;</span><br><span class="line">    <span class="hljs-keyword">this</span>.handleSlide = <span class="hljs-keyword">this</span>.handleSlide.bind(<span class="hljs-keyword">this</span>)</span><br><span class="line">    <span class="hljs-keyword">this</span>.handleChange = <span class="hljs-keyword">this</span>.handleChange.bind(<span class="hljs-keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  handleSlide(event, ui) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.setState(&#123;<span class="hljs-attr">sliderValue</span>: ui.value&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(value) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span> &#123;</span><br><span class="line">      $(<span class="hljs-string">'#slider'</span>).slider(<span class="hljs-string">'value'</span>, <span class="hljs-keyword">this</span>.state.sliderValue + value)</span><br><span class="line">      <span class="hljs-keyword">this</span>.setState(&#123;<span class="hljs-attr">sliderValue</span>: <span class="hljs-keyword">this</span>.state.sliderValue + value&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    $(<span class="hljs-string">'#slider'</span>).on(<span class="hljs-string">'slide'</span>, <span class="hljs-keyword">this</span>.handleSlide)</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    $(<span class="hljs-string">'#slider'</span>).off(<span class="hljs-string">'slide'</span>, <span class="hljs-keyword">this</span>.handleSlide)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">      &lt;button disabled=&#123;(this.state.sliderValue&lt;1) ? true : false&#125;</span><br><span class="line">        className="btn default-btn"</span><br><span class="line">        onClick=&#123;this.handleChange(-1)&#125;&gt;</span><br><span class="line">          1 Less (&#123;this.state.sliderValue - 1&#125;)</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;button disabled=&#123;(this.state.sliderValue&gt;99) ? true : false&#125;</span><br><span class="line">        className="btn default-btn"</span><br><span class="line">        onClick=&#123;this.handleChange(1)&#125;&gt;</span><br><span class="line">          1 More (&#123;this.state.sliderValue + 1&#125;)</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">  &#125;</span></span><br><span class="line"><span class="hljs-xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-2-라벨-통합하기"><a href="#6-3-2-라벨-통합하기" class="headerlink" title="6.3.2 라벨 통합하기"></a>6.3.2 라벨 통합하기</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SliderValue</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props)</span><br><span class="line">    <span class="hljs-keyword">this</span>.handleSlide = <span class="hljs-keyword">this</span>.handleSlide.bind(<span class="hljs-keyword">this</span>)</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;<span class="hljs-attr">sliderValue</span>: <span class="hljs-number">0</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleSlide(event) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.setState(&#123;<span class="hljs-attr">sliderValue</span>: event.detail.ui.value&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'slide'</span>, <span class="hljs-keyword">this</span>.handleSlide)</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">'slide'</span>, <span class="hljs-keyword">this</span>.handleSlide)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">""</span> &gt;</span></span></span><br><span class="line"><span class="hljs-xml">      Value: &#123;this.state.sliderValue&#125;</span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;리엑트 교과서를 정리한 내용입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;6-1-React에서-DOM이벤트-다루기&quot;&gt;&lt;a href=&quot;#6-1-React에서-DOM이벤트-다루기&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/categories/tec/react/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/tags/react/"/>
    
      <category term="프레임워크" scheme="https://eunii.github.io/tags/%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/"/>
    
      <category term="리엑트" scheme="https://eunii.github.io/tags/%EB%A6%AC%EC%97%91%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>[React 교과서] 5장 React 컴포넌트 라이프사이클 이벤트</title>
    <link href="https://eunii.github.io/2019/08/29/tec/react/react6/"/>
    <id>https://eunii.github.io/2019/08/29/tec/react/react6/</id>
    <published>2019-08-29T02:26:25.000Z</published>
    <updated>2019-08-29T06:44:41.140Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>리엑트 교과서를 정리한 내용입니다.</p></blockquote><h2 id="5-1-React컴포넌트-라이프사이클-이벤트-한눈에-살펴보기"><a href="#5-1-React컴포넌트-라이프사이클-이벤트-한눈에-살펴보기" class="headerlink" title="5.1 React컴포넌트 라이프사이클 이벤트 한눈에 살펴보기"></a>5.1 React컴포넌트 라이프사이클 이벤트 한눈에 살펴보기</h2><p>라이프사이클 이벤트를 기반으로 컴포넌트의 동작을 제어하고 사용자 정의를 할 수 있다. </p><ul><li>마운팅 이벤트 : React엘리먼트를 DOM 노드에 추가할때 발생</li><li>갱신 이벤트 : 속성이나 상태가 변경되어 React엘리먼트를 갱신할 때 발생</li><li>언마운팅이벤트 : React엘리먼트를 DOM에서 제거할때 발생</li></ul><h2 id="5-2-이벤트-분류"><a href="#5-2-이벤트-분류" class="headerlink" title="5.2 이벤트 분류"></a>5.2 이벤트 분류</h2><ul><li>마운팅 : React가 이벤트를 한번만 실행</li><li>갱신: React가 이벤트를 여러번 실행</li><li>언마운팅: React가 이벤트를 한번만 실행</li></ul><p>아래 순서로 라이플 사이클이 실행된다</p><ol><li>constructor() : 엘리먼트를 생성하여 기본속성과 상태를 설정할때 실행</li><li>마운팅<ul><li>componentWillMount(): DOM에 삽입전에 실행</li><li>componentDidMount(): DOM에 삽입 후에 실행</li></ul></li><li>갱신<ul><li>componentWillRecetiveProps(nextProps) : 컴포넌트가 속성을 받기 직전에 실행</li><li>shouldComponentUpdate(nextProps, nextState) : 컴포넌트가 갱신되는 조건을 정의해서 재렌더링을 초적화함. boolean값을 반환</li><li>componentWillUpdate(nextProps, nextState) : 컴포넌트가 갱신되기 직전에 실행</li><li>componentDidUpdate(prevProps, prevState) : 컴포넌트가 갱신된 후에 실행</li></ul></li><li>언마운팅<ul><li>componentWillUnmount() : 컴포넌트를 DOM에서 제거하기 전에 실행, 구독한 이벤트를 제거하거나 다른 정리 작업 수행 가능</li></ul></li></ol><ul><li>라이플사이클 이벤트와 속성 및 상태의 상관관계</li></ul><table><thead><tr><th>마운팅</th><th>컴포넌트 속성 갱신</th><th>컴포넌트 상태 갱신</th></tr></thead><tbody><tr><td>constructor()</td><td></td><td></td></tr><tr><td>componentWillMount()</td><td>componentWillRecetiveProps()</td><td></td></tr><tr><td></td><td>shouldComponentUpdate()</td><td>shouldComponentUpdate()</td></tr><tr><td></td><td>componentWillUpdate()</td><td>componentWillUpdate()</td></tr><tr><td>render()</td><td>render()</td><td>render()</td></tr><tr><td></td><td>componentDidUpdate()</td><td>componentDidUpdate()</td></tr><tr><td>componentDidMount()</td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>forceUpdate()를 이용한 갱신</th><th>언마운팅</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td>componentWillUpdate()</td><td></td></tr><tr><td>render()</td><td></td></tr><tr><td>componentDidUpdate()</td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td>componentWillUnmount()</td></tr></tbody></table><h2 id="5-3-이벤트-구현"><a href="#5-3-이벤트-구현" class="headerlink" title="5.3 이벤트 구현"></a>5.3 이벤트 구현</h2><p>라이프사이클 이벤트를 구현하려면 클래스에 메서드를 정의해야함.<br>ex) componentDidMouht()를 정의하면 컴포넌트 클래스의 엘리먼트가 DOM에 추가되었을때 이 메서드 호출하고 마운팅으로 분류 되어있으므로 컴포넌트 클래스의 인스턴스마다 한번만 호출됨.  </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Content</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">    componentWillMount()&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(ReactDOM.findDOMNode(<span class="hljs-keyword">this</span>)) <span class="hljs-comment">// DOM 노드가 null</span></span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.dir(ReactDOM.findDOMNode(<span class="hljs-keyword">this</span>)) <span class="hljs-comment">// DOM 노드가 &lt;div&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DOM은 늘 대문자로 쓴다.</li></ul><h2 id="5-4-모든-이벤트-실행하기"><a href="#5-4-모든-이벤트-실행하기" class="headerlink" title="5.4 모든 이벤트 실행하기"></a>5.4 모든 이벤트 실행하기</h2><ul><li>Logger컴포넌트의 렌더링과 세번의 갱신 실행 코드<figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Content</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props)</span><br><span class="line">    <span class="hljs-keyword">this</span>.launchClock()</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;</span><br><span class="line">      counter: <span class="hljs-number">0</span>,</span><br><span class="line">      currentTime: (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()).toLocaleString()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  launchClock() &#123;</span><br><span class="line">    setInterval(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.setState(&#123;</span><br><span class="line">        counter: ++<span class="hljs-keyword">this</span>.state.counter,</span><br><span class="line">        currentTime: (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()).toLocaleString()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="hljs-number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.state.counter &gt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> &lt;div/&gt;</span><br><span class="line">    <span class="hljs-keyword">return</span> &lt;Logger time=&#123;this.state.currentTime&#125;&gt;&lt;/Logger&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'constructor'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'componentWillMount is triggered'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount(e) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'componentDidMount is triggered'</span>)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'DOM node: '</span>, ReactDOM.findDOMNode(<span class="hljs-keyword">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillReceiveProps(newProps) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'componentWillReceiveProps is triggered'</span>)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'new props: '</span>, newProps)</span><br><span class="line">  &#125;</span><br><span class="line">  shouldComponentUpdate(newProps, newState) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'shouldComponentUpdate is triggered'</span>)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'new props: '</span>, newProps)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'new state: '</span>, newState)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUpdate(newProps, newState) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'componentWillUpdate is triggered'</span>)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'new props: '</span>, newProps)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'new state: '</span>, newState)</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidUpdate(oldProps, oldState) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'componentDidUpdate is triggered'</span>)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'old props: '</span>, oldProps)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'old state: '</span>, oldState)</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'componentWillUnmount'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'rendering... Display'</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div&gt;&#123;<span class="hljs-keyword">this</span>.props.time&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5-5-마운팅-이벤트"><a href="#5-5-마운팅-이벤트" class="headerlink" title="5.5 마운팅 이벤트"></a>5.5 마운팅 이벤트</h2><p>마운팅 이벤트 유형은 실제 DOM에 컴포넌트를 추가하는 것에 대한 이벤트다.</p><ul><li>componentWillMount(): React엘리먼트가 실제 DOM에 곧 추가 될 것을 알림</li><li>componentDidMount(): React엘리먼트를 실제 DOM에 추가한 시전으로, 이 시점의 React엘리먼트는 DOM노드임.<br>*constructor()는 componentWillMount()보다 먼저 실행됨.  </li></ul><h3 id="5-5-1-componentWillMount"><a href="#5-5-1-componentWillMount" class="headerlink" title="5.5.1 componentWillMount()"></a>5.5.1 componentWillMount()</h3><p>초기 렌더링 직전에 실행됨. 브라우저와 프론트엔드에서 이루어짐.<br>서버 렌더링 과정에서도 componentWillMount()는 실행됨.  </p><h3 id="5-5-2-componentDidMount"><a href="#5-5-2-componentDidMount" class="headerlink" title="5.5.2 componentDidMount()"></a>5.5.2 componentDidMount()</h3><p>초기렌더링 마친 후 실행됨. 브라우저에서 한번 실행되고 서버렌더링에서는 실행 안 됨.<br>자식엘리먼트를 참조로 접근할 수 있음. 자식 컴포넌트의 componentDidMount()는 부모 컴포넌트의 componentDidMount()보다 먼저 호출됨  </p><p>componentDidMount() 이벤트는 다른 라이브러리를 통합하기 가장 적절한 위치임.  </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Users</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props)</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;</span><br><span class="line">      users: [] <span class="hljs-comment">// 이렇게 초기화 해놔야 render()에서 해당 상태가 존재하는지 안 하는지 신경 안쓸 수 있음</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    fetch(<span class="hljs-keyword">this</span>.props[<span class="hljs-string">'data-url'</span>])</span><br><span class="line">      .then(<span class="hljs-function">(<span class="hljs-params">response</span>)=&gt;</span>response.json())</span><br><span class="line">      .then(<span class="hljs-function">(<span class="hljs-params">users</span>)=&gt;</span><span class="hljs-keyword">this</span>.setState(&#123;<span class="hljs-attr">users</span>: users&#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> &lt;div className="container"&gt;</span><br><span class="line">      &lt;h1&gt;List of Users&lt;/h1&gt;</span><br><span class="line">      &lt;table className="table-striped table-condensed table table-bordered table-hover"&gt;</span><br><span class="line">        &lt;tbody&gt;&#123;this.state.users.map((user)=&gt;</span><br><span class="line">          &lt;tr key=&#123;user.id&#125;&gt;</span><br><span class="line">            &lt;td&gt;&#123;user.first_name&#125; &#123;user.last_name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt; &#123;user.email&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt; &#123;user.ip_address&#125;&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;)&#125;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XHR 요청을 위한 코드를 componentDidMount()에 사용하는 것이 좋음</p><h2 id="5-6-갱신-이벤트"><a href="#5-6-갱신-이벤트" class="headerlink" title="5.6 갱신 이벤트"></a>5.6 갱신 이벤트</h2><p>마운팅 이벤트는 React를 다른 프레임워크나 라이브러리 데이터 저장소와 연결하는데 사용하곤 함.<br>갱신 이벤트는 컴포넌트를 갱신하는것과 관련됨.  </p><ol><li>componentWillRecivierProps(newProps)</li><li>shouldComponentUpdate()</li><li>componentWillIpdate()</li><li>componentDidUpdate()</li></ol><h2 id="5-7-언마운팅-이벤트"><a href="#5-7-언마운팅-이벤트" class="headerlink" title="5.7 언마운팅 이벤트"></a>5.7 언마운팅 이벤트</h2><p>DOM에서 요소를 분리하거나 제거하는것</p><h3 id="5-7-1-componentWillUnmount"><a href="#5-7-1-componentWillUnmount" class="headerlink" title="5.7.1 componentWillUnmount()"></a>5.7.1 componentWillUnmount()</h3><p>DOM에서 컴포넌트가 제거되기 직전 호출.<br>ex)타이머 제거하거나 DOM요소 정리하거나, componentDidMount()에서 연결한 이벤트 제거 등.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;리엑트 교과서를 정리한 내용입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;5-1-React컴포넌트-라이프사이클-이벤트-한눈에-살펴보기&quot;&gt;&lt;a href=&quot;#5-1-React컴포넌트-라이프사이클-이벤트-한눈에-살펴보기
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/categories/tec/react/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/tags/react/"/>
    
      <category term="프레임워크" scheme="https://eunii.github.io/tags/%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/"/>
    
      <category term="리엑트" scheme="https://eunii.github.io/tags/%EB%A6%AC%EC%97%91%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>[React 교과서] 4장 React 컴포넌트의 객체 상태</title>
    <link href="https://eunii.github.io/2019/08/28/tec/react/react5/"/>
    <id>https://eunii.github.io/2019/08/28/tec/react/react5/</id>
    <published>2019-08-28T08:26:25.000Z</published>
    <updated>2019-08-29T02:01:15.084Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>리엑트 교과서를 정리한 내용입니다.</p></blockquote><p>리엑트에서 가장 중요한 부분이다.</p><h2 id="4-1-React컴포넌트의-상태란"><a href="#4-1-React컴포넌트의-상태란" class="headerlink" title="4.1 React컴포넌트의 상태란?"></a>4.1 React컴포넌트의 상태란?</h2><p>React의 상태는 컴포넌트의 변경 가능한 데이터 저장소이다.<br>컴포넌트를 속성과 상태가 있는 함수라고 생각하면 함수의 결과가 UI표현(뷰)이다.<br>속성과 상태는 모두 뷰를 갱신하기 위해 사용하지만 목적이 다름.  </p><ul><li>상태:<br>상태는 이름을 활용하여 접근함. this.state 객체속성 ex) this.state.inputFileValue<br>뷰의 랜더링이 갱신될 때 동적 정보를 출력하기 위해 사용됨.<br>관련된 부분만 갱신됨.</li></ul><p>아래 안티 패턴 예시<br>상태 외의 다른 값을 변경해도 뷰를 갱신할 수 없다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> inputValue =<span class="hljs-string">'Texas'</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Autocomplete</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">    updateValues()&#123; <span class="hljs-comment">//--사용자 입력에 의해 실행됨</span></span><br><span class="line">        <span class="hljs-keyword">this</span>.props.inputValue = <span class="hljs-string">'California'</span></span><br><span class="line">        inputValue =<span class="hljs-string">'California'</span></span><br><span class="line">        <span class="hljs-keyword">this</span>.inputValue=<span class="hljs-string">'California'</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            &#123;<span class="hljs-keyword">this</span>.props.inputValue&#125;</span><br><span class="line">            &#123;inputValue&#125;</span><br><span class="line">            &#123;<span class="hljs-keyword">this</span>.inputValue&#125;</span><br><span class="line">            &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        )</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>속성은 부모 컴포넌트에서 새로운 값을 전달하면 뷰를 갱신하여 현재 다루는 자식 컴포넌트의 새로운 인스턴스를 생성함.<br>해당 자식 컴포넌트의 컨텍스트내에서 this.props.inputValue=’California’로 변경해도 소용이 없음!</p><h2 id="4-2-상태-객체-다루기"><a href="#4-2-상태-객체-다루기" class="headerlink" title="4.2 상태 객체 다루기"></a>4.2 상태 객체 다루기</h2><h3 id="4-2-1-상태-객체에-접근하기"><a href="#4-2-1-상태-객체에-접근하기" class="headerlink" title="4.2.1 상태 객체에 접근하기"></a>4.2.1 상태 객체에 접근하기</h3><p>맴버변수로 this 를 통해 접근 가능. this.state.name와 같은 방식으로 접근.<br>render()에서 this.state를 랜더링 할 수 있음. ex) {this.state.inputFieldValue}</p><ul><li>현재 시간 출력하는 시계 구현하기<ul><li>폴더 구조<br> /clock  <pre><code>index  </code></pre>  /jsx  <pre><code>script.jsx  clock.jsx  </code></pre>  /js  <pre><code>script.js  clock.js  react.js  react-dom.js  </code></pre></li></ul></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clock</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;this.state.currentTime&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Clock/&gt;</span><br><span class="line">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'content'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>위와 같이 하면 ‘currentTime’ 값이 null이라는 오류가 발생한다.<br>속성과 달리 상태는 부모 객체에서 설정하는것이 아니고 render()안에서 setState를 실행 할 수도 없다.</p><h3 id="4-2-2-초기-상태-설정하기"><a href="#4-2-2-초기-상태-설정하기" class="headerlink" title="4.2.2 초기 상태 설정하기"></a>4.2.2 초기 상태 설정하기</h3><p>초기 상태를 설정하려면 React.Component를 사용하는 ES6클래스의 생성자에서 this.state를 선언함. 반드시 super()에 속성을 전달하여 실행한다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFancyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(props)</span><br><span class="line">        <span class="hljs-keyword">this</span>.state = &#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>초기 상태를 설정하면서 다른 로직도 추가 가능.<br>ex) new Date()를 사용하여 currentTime 값을 설정함. toLocaleString()을 사용하면 상용자 위치에 맞는 적절한 날짜시간 형식을 보여줄 수 있음.  </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clock</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(props)</span><br><span class="line">        <span class="hljs-keyword">this</span>.state=&#123;<span class="hljs-attr">currentTime</span>: (<span class="hljs-keyword">new</span> DAte()).toLocaleString(<span class="hljs-string">'en'</span>)&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>초기 상태 주의사항</p><ul><li>this.state는 반드시 객체여야함.  </li><li>생성자 메서드의 이름은 반드시 constructor로 함.   </li><li>부며 클래스가 있는 클래스에서 construtcor()매서드를 생성하면 항상 super()를 호출함.</li><li>상속으로 클래스를 구현하면 constructor()매서드를 따로 작성하지 않으면 super()를 호출한것으로 가정함.</li><li>constructor()메서드 내에서 한번만 this.state로 직접 상태를 선언하고 그 외 부분에서는 this.stat=…로 직접 상태 선언하지 않는다.  </li></ul><h3 id="4-2-3-상태-갱신하기"><a href="#4-2-3-상태-갱신하기" class="headerlink" title="4.2.3 상태 갱신하기"></a>4.2.3 상태 갱신하기</h3><p>클래스 매서드인 this.setState(data, callback)를 사용하면 상태 변경 가능.<br>data를 현재 상태에 병합하고 render()을 호출, 이후 callback함수 실행됨.<br>setState()가 비동기로 작동함.  </p><p>시계를 시작하려면 setInterval()을 한번 호출해야함.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clock</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="line">    counstructor(props)&#123;</span><br><span class="line">        <span class="hljs-keyword">super</span>(props)</span><br><span class="line">        <span class="hljs-keyword">this</span>.lauchClock()</span><br><span class="line">        <span class="hljs-keyword">this</span>.state =&#123;</span><br><span class="line">            currentTime: (<span class="hljs-keyword">new</span> DAte()).toLocaleString(<span class="hljs-string">'en'</span>)</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    launchClock()&#123;</span><br><span class="line">        setInterval(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Updating time...'</span>)</span><br><span class="line">            <span class="hljs-keyword">this</span>.setState(&#123;</span><br><span class="line">            currentTime: (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()).toLocaleString(<span class="hljs-string">'en'</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="hljs-number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Rendering Clock...'</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;this.state.currentTime&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>setState()로 상태를 교체할때 상태 항목이 여러개 있으면 명시해준것만 바뀌고 나머진 값이 그대로임.<br>setState()가 render()를 실행시킴.  </p><h2 id="4-3-상태-객체와-속성"><a href="#4-3-상태-객체와-속성" class="headerlink" title="4.3 상태 객체와 속성"></a>4.3 상태 객체와 속성</h2><p>상태 객체와 속성은 모두 클래스의 맴버이며 각각 this.state와 this.props를 말함.  </p><ul><li>상태 객체 vs 속성 객체<ul><li>상태 객체는 변경가능, 속성 객체는 변경 불가능.  </li><li>상태는 해당 컴포넌트 자체에서 정의, 속성은 부모 컴포넌트에서 전달(부모컴포넌트에서만 값을 변경 가능함).</li><li>상태는 컴포넌트에서 설정되고 갱신, 속성은 뷰 생성시에 정해지고 변경안됨.</li></ul></li></ul><h2 id="4-4-상태비저장-컴포넌트"><a href="#4-4-상태비저장-컴포넌트" class="headerlink" title="4.4 상태비저장 컴포넌트"></a>4.4 상태비저장 컴포넌트</h2><ul><li>상태비저장 컴포넌트는 상태 객체가 없고 이벤트 또는 메서드를 갖지 않음.  </li><li>상태비저장 컴포넌트의 목적은 뷰를 랜더링 하는것 뿐임.  </li><li>속성을 전달받아 처리.  </li><li>예측하기 편해서 이해, 유지보수, 디버깅이 편함.<br>=&gt; 상태비저장컴포넌트 많이 사용하고 상태저장컴포넌트는 적게 사용하는게 바람직함.  </li></ul><p>아래는 상태비저장 컴포넌트 예제<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1&#123;...this.props&#125;</span>&gt;</span> Hello&#123; this.props.frameworkName&#125; world!!!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>상태가 필요하지 않으면 함수로 선언하면됨.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">functipn Link(props)&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> =<span class="hljs-string">&#123;props.href&#125;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"btn btn-primary"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    &#123;props.text&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Link text =<span class="hljs-string">'Buy React Quickly'</span></span><br><span class="line">    href =<span class="hljs-string">'https://www.manning.com/books/react-quickly'</span> /&gt;,</span><br><span class="line">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'content'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> Link = <span class="hljs-function">(<span class="hljs-params">props</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;href=&#123;props.href&#125;</span><br><span class="line">        target =<span class="hljs-string">"_blank"</span></span><br><span class="line">        className=<span class="hljs-string">"btn btn-primary"</span> &gt;</span><br><span class="line">            &#123;props.text&#125;</span><br><span class="line">        &lt;<span class="hljs-regexp">/a&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>상태비저장 컴포넌트는 상태를 가질 수 없지만 propTypes와 defaultProps를 프로퍼티로 가질 수 있다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Link</span> (<span class="hljs-params">props</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&#123;props.href&#125;</span></span></span></span><br><span class="line"><span class="hljs-xml">    target="_blank"</span></span><br><span class="line"><span class="hljs-xml">    className="btn btn-primary"&gt;</span></span><br><span class="line"><span class="hljs-xml">        &#123;props.text&#125;</span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Link.propTypes=&#123;...&#125;</span><br><span class="line">Link.defaultProps=&#123;...&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-5-상태비저장-컴포넌트와-상태저장-컴포넌트의-비교"><a href="#4-5-상태비저장-컴포넌트와-상태저장-컴포넌트의-비교" class="headerlink" title="4.5 상태비저장 컴포넌트와 상태저장 컴포넌트의 비교"></a>4.5 상태비저장 컴포넌트와 상태저장 컴포넌트의 비교</h2><p>HTML 렌더링을 처리하는것으로 충분한 경우 상태비저장 컴포포넌트가 더 선언적이고 작동이 잘됨.</p><ul><li><p>상태를 사용해야 하는 경우</p><ul><li>UI 상태, 상호작용, 서버에서 데이터 불러오는것 등 을 관리하려면 상태저장 컴포넌트를 활용한다.</li></ul></li><li><p>아날로그와 디지털 방식으로 노출하는 시계</p><ul><li>프로젝트 구조<br>/clock-analog-digital<br>  /jsx  <pre><code>analog-display.jsx  clock.jsx  digital-display.jsx  script.jsx  </code></pre>  /js  <pre><code>analog-display.js  clock.js  digital-display.js  script.js  react.js  react-dom.js  </code></pre>/<br>  index.html</li></ul></li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">render() &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Rendering...'</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &lt;AnalogDisplay time=&#123;this.state.currentTime&#125;/&gt;</span><br><span class="line">    &lt;DigitalDisplay time=&#123;this.state.currentTime&#125;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> DigitalDisplay = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">props</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;props.time&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> AnalogDisplay = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">props</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(props.time);</span><br><span class="line">  <span class="hljs-keyword">let</span> dialStyle = &#123;</span><br><span class="line">    position: <span class="hljs-string">'relative'</span>,</span><br><span class="line">    top: <span class="hljs-number">0</span>,</span><br><span class="line">    left: <span class="hljs-number">0</span>,</span><br><span class="line">    width: <span class="hljs-number">200</span>,</span><br><span class="line">    height: <span class="hljs-number">200</span>,</span><br><span class="line">    borderRadius: <span class="hljs-number">20000</span>,</span><br><span class="line">    borderStyle: <span class="hljs-string">'solid'</span>,</span><br><span class="line">    borderColor: <span class="hljs-string">'black'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">let</span> secondHandStyle = &#123;</span><br><span class="line">    position: <span class="hljs-string">'relative'</span>,</span><br><span class="line">    top: <span class="hljs-number">100</span>,</span><br><span class="line">    left: <span class="hljs-number">100</span>,</span><br><span class="line">    border: <span class="hljs-string">'1px solid red'</span>,</span><br><span class="line">    width: <span class="hljs-string">'40%'</span>,</span><br><span class="line">    height: <span class="hljs-number">1</span>,</span><br><span class="line">    transform: <span class="hljs-string">'rotate('</span> + (date.getSeconds() / <span class="hljs-number">60</span> * <span class="hljs-number">360</span> - <span class="hljs-number">90</span>).toString() + <span class="hljs-string">'deg)'</span>,</span><br><span class="line">    transformOrigin: <span class="hljs-string">'0% 0%'</span>,</span><br><span class="line">    backgroundColor: <span class="hljs-string">'red'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">let</span> minuteHandStyle = &#123;</span><br><span class="line">    position: <span class="hljs-string">'relative'</span>,</span><br><span class="line">    top: <span class="hljs-number">100</span>,</span><br><span class="line">    left: <span class="hljs-number">100</span>,</span><br><span class="line">    border: <span class="hljs-string">'1px solid grey'</span>,</span><br><span class="line">    width: <span class="hljs-string">'40%'</span>,</span><br><span class="line">    height: <span class="hljs-number">3</span>,</span><br><span class="line">    transform: <span class="hljs-string">'rotate('</span> + (date.getMinutes() / <span class="hljs-number">60</span> * <span class="hljs-number">360</span> - <span class="hljs-number">90</span>).toString() + <span class="hljs-string">'deg)'</span>,</span><br><span class="line">    transformOrigin: <span class="hljs-string">'0% 0%'</span>,</span><br><span class="line">    backgroundColor: <span class="hljs-string">'grey'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">let</span> hourHandStyle = &#123;</span><br><span class="line">    position: <span class="hljs-string">'relative'</span>,</span><br><span class="line">    top: <span class="hljs-number">92</span>,</span><br><span class="line">    left: <span class="hljs-number">106</span>,</span><br><span class="line">    border: <span class="hljs-string">'1px solid grey'</span>,</span><br><span class="line">    width: <span class="hljs-string">'20%'</span>,</span><br><span class="line">    height: <span class="hljs-number">7</span>,</span><br><span class="line">    transform: <span class="hljs-string">'rotate('</span> + (date.getHours() / <span class="hljs-number">12</span> * <span class="hljs-number">360</span> - <span class="hljs-number">90</span>).toString() + <span class="hljs-string">'deg)'</span>,</span><br><span class="line">    transformOrigin: <span class="hljs-string">'0% 0%'</span>,</span><br><span class="line">    backgroundColor: <span class="hljs-string">'grey'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">return</span> React.createElement(</span><br><span class="line">    <span class="hljs-string">'div'</span>,</span><br><span class="line">    <span class="hljs-literal">null</span>,</span><br><span class="line">    React.createElement(</span><br><span class="line">      <span class="hljs-string">'div'</span>,</span><br><span class="line">      &#123; <span class="hljs-attr">style</span>: dialStyle &#125;,</span><br><span class="line">      React.createElement(<span class="hljs-string">'div'</span>, &#123; <span class="hljs-attr">style</span>: secondHandStyle &#125;),</span><br><span class="line">      React.createElement(<span class="hljs-string">'div'</span>, &#123; <span class="hljs-attr">style</span>: minuteHandStyle &#125;),</span><br><span class="line">      React.createElement(<span class="hljs-string">'div'</span>, &#123; <span class="hljs-attr">style</span>: hourHandStyle &#125;)</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;리엑트 교과서를 정리한 내용입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;리엑트에서 가장 중요한 부분이다.&lt;/p&gt;
&lt;h2 id=&quot;4-1-React컴포넌트의-상태란&quot;&gt;&lt;a href=&quot;#4-1-React컴포넌트의-상태란&quot; cl
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/categories/tec/react/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/tags/react/"/>
    
      <category term="프레임워크" scheme="https://eunii.github.io/tags/%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/"/>
    
      <category term="리엑트" scheme="https://eunii.github.io/tags/%EB%A6%AC%EC%97%91%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>[React 교과서] 3장 JSX</title>
    <link href="https://eunii.github.io/2019/08/14/tec/react/react4/"/>
    <id>https://eunii.github.io/2019/08/14/tec/react/react4/</id>
    <published>2019-08-14T08:26:25.000Z</published>
    <updated>2019-08-29T01:58:40.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>리엑트 교과서를 정리한 내용입니다.</p></blockquote><h2 id="3-1-JSX의-정의와-장점"><a href="#3-1-JSX의-정의와-장점" class="headerlink" title="3.1 JSX의 정의와 장점"></a>3.1 JSX의 정의와 장점</h2><p>함수 호출과 객체 생성을 위한 문법적 편의를 제공하는 자바스크립트의 확장. JSX가 React에 필수적이지는 않지만 같이 사용할것이 권장됨</p><ul><li>개발자 경험 개선: 코드를 읽기 쉽다</li><li>팀의 생산성 향상: HTML과 비슷하여 친숙함</li><li><p>문법 오류와 코드량 감소</p></li><li><p>JSX코드 예제</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;HelloWorld/&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;a href = <span class="hljs-string">"https://eunii.github.io"</span>&gt; eunii blog&lt;<span class="hljs-regexp">/a&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></li><li><p>위의 코드 자바스크립트로 변경한 예제</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">    <span class="hljs-string">"div"</span>,</span><br><span class="line">    <span class="hljs-literal">null</span>,</span><br><span class="line">    React.createElement(HellowWorld, <span class="hljs-literal">null</span>),</span><br><span class="line">    React.createElement(<span class="hljs-string">"br"</span>, <span class="hljs-literal">null</span>),</span><br><span class="line">    React.createElement(</span><br><span class="line">        <span class="hljs-string">"a"</span>,</span><br><span class="line">        &#123;<span class="hljs-attr">href</span> : <span class="hljs-string">"https://eunii.github.io"</span>&#125;,</span><br><span class="line">        <span class="hljs-string">"eunii blog"</span></span><br><span class="line">        ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p>자바스크립트 코드 사이에 &lt;&gt;가 있으면 처음에는 어색하지만. React.createBlement(NAME, …) 대신 을 사용하는것이 훨씬 직관적이고 편리하다.<br>JSX를 사용하려면 브라우저에서 실행하기 전에 컴파일 또는 트랜스파일 과정을 거쳐 일반적 자바스크립트 파일로 변환해야한다.</p><h2 id="3-2-JSX의-이해"><a href="#3-2-JSX의-이해" class="headerlink" title="3.2 JSX의 이해"></a>3.2 JSX의 이해</h2><h3 id="3-2-1-JSX로-React-엘리먼트-생성하기"><a href="#3-2-1-JSX로-React-엘리먼트-생성하기" class="headerlink" title="3.2.1 JSX로 React 엘리먼트 생성하기"></a>3.2.1 JSX로 React 엘리먼트 생성하기</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">    name,</span><br><span class="line">    &#123;<span class="hljs-attr">key1</span>: value1, <span class="hljs-attr">key2</span>: vlaue2, ...&#125;,</span><br><span class="line">    child1, child2, ..., childN</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>위의 코드를 JSX로 바꾸면 아래와 같다<br><figure class="highlight jsx hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;name key1=value1 key2 value2 ...&gt;</span><br><span class="line">    &lt;child1/&gt;</span><br><span class="line">    &lt;child2/&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;childN/&gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/name&gt;</span></span><br></pre></td></tr></table></figure></p><p>계속 공부해 왔던 HelloWorld예제를 자바스크립트로 작성하면<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">        React.createElement(<span class="hljs-string">'h1'</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'Hello world!'</span>),</span><br><span class="line">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'content'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>위의 코드를 JSX로 작성하면<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">        &lt;h1&gt;Hello world!<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'content'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>JSX문법으로 작성한 객체도 변수에 저장 가능하다.<br><figure class="highlight jsx hljs"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> helloWorldReactElement = <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    helloWorldReactElement,</span><br><span class="line">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'content'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="3-2-2-React-컴포넌트에-JSX-사용하기"><a href="#3-2-2-React-컴포넌트에-JSX-사용하기" class="headerlink" title="3.2.2 React 컴포넌트에 JSX 사용하기"></a>3.2.2 React 컴포넌트에 JSX 사용하기</h3><figure class="highlight plain hljs"><figcaption><span>JSX 태그는 표준 HTML 태그 이름이기도 하다. 컴포넌트를 다룰 때에도 같은 문법을 사용하고 컴포넌트 클래스 이름이 대문자로 시작한다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- JSX를 이용해서 생성한 HelloWorld클래스</span><br><span class="line">```js</span><br><span class="line">class HelloWorld extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt; 1. Hello world!&lt;/h1&gt;</span><br><span class="line">                &lt;h2&gt; 2. Hello world!&lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;HelloWorld/&gt;</span><br><span class="line">    document.getElementById(&apos;content&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3-2-3-JSX에서-변수-출력하기"><a href="#3-2-3-JSX에서-변수-출력하기" class="headerlink" title="3.2.3 JSX에서 변수 출력하기"></a>3.2.3 JSX에서 변수 출력하기</h3><p>컴포넌트를 작송할때, 약간의 코드로 자체적으로 뷰를 변경할 수 있는 코드를 만들기. ex) 현재 시간/날짜를 사용하기<br>JSX없이 React만 사용하면 +를 이용해 연결하거느 ‘와 ${varName}로 표시한 문자열 탬플릿을 사용할 수 있다. (템플릿 리터럴)</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateTimeNow</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> dateTimeNow = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleDateString()</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span> Hello &#123;this.props.userName&#125;, current date and time is &#123;dateTimeNow&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> helloWorldReactElement = <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">      &#123;helloWorldReactElement&#125;</span></span><br><span class="line"><span class="hljs-xml">      &#123;helloWorldReactElement&#125;</span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;HelloWorld/&gt;,</span><br><span class="line">  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'content'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3-2-4-JSX에서-속성-사용하기"><a href="#3-2-4-JSX에서-속성-사용하기" class="headerlink" title="3.2.4 JSX에서 속성 사용하기"></a>3.2.4 JSX에서 속성 사용하기</h3><p>사용자 계정에 연결할 컴포넌트를 만들때, href와 title의 값은 사용자에 따라 달라져야 하므로 하드 코딩할 수 없다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProfileLint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> (</span><br><span class="line">            &lt;a href =&#123;<span class="hljs-keyword">this</span>.props.url&#125;</span><br><span class="line">                title =&#123;<span class="hljs-keyword">this</span>.props.lable&#125;</span><br><span class="line">                target=<span class="hljs-string">"_blank"</span>&gt;</span><br><span class="line">                Profile</span><br><span class="line">            &lt;<span class="hljs-regexp">/a&gt;</span></span><br><span class="line"><span class="hljs-regexp">          </span></span><br><span class="line"><span class="hljs-regexp">        )</span></span><br><span class="line"><span class="hljs-regexp">    &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>위의 코드에서 속성값은 ProfileLink 생성시에 정의된다. ProfileLink를 생성하는 부모 컴포넌트에서 이 값을 전달함.<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProfileLink url=&apos;/user/azat&apos; label=&apos;Profile for azat&apos; /&gt;</span><br></pre></td></tr></table></figure></p><p>가끔 사용자 지정 데이터를 속성으로 추가할 때가 있다. DOM요소에 속성으로 넣는것은 흔히 사용하지만 HTML 비표준 속성에 데이터를 저장하는 것은 안티패턴으로 여겨진다.<br>DOM에서 데이터를 가져오는것은 메모리 상의 가상 저장소에서 데이터를 가져오는것보다 느리다.</p><p>데이터를 반드시 HTML요소의 속성으로 저장해야 하는 경우는 data-*속성을 사용한다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li data-react-is-awesom=&#123;<span class="hljs-keyword">this</span>.reactIsAwesome&#125;&gt; React is awesome!<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>위의 경우reactIsAwesome 값이 true라면 아래와 같이 HTML이 렌더링 된다<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li data-react-is-awesom=<span class="hljs-string">"true"</span>&#125;&gt; React is awesome!<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>하지만 아래와 같이 비표준 HTML속성을 전달하면 HTML속성이 렌더링 되지 않는다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;li react-is-awesom=&#123;<span class="hljs-keyword">this</span>.reactIsAwesome&#125;&gt; React is awesome!<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">&lt;li reactIsAwesom=&#123;<span class="hljs-keyword">this</span>.reactIsAwesome&#125;&gt; React is awesome!<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>위의 결과는 아래와 같다<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt; React is awesome!<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line">&lt;li&gt; React is awesome!<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>아것대신 this.props를 통해서 입력한데이터는 모든 속성에 접근할 수 있다. 모든 속성을 전달해야 한다면 …를 사용할 수 있다.({…this.props)</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> &#123;<span class="hljs-attr">...this.props</span>&#125;&gt;</span>Hello &#123;this.props.frameworkName&#125; world!!!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;HelloWorld</span><br><span class="line">      id=<span class="hljs-string">'ember'</span></span><br><span class="line">      frameworkName=<span class="hljs-string">'Ember.js'</span></span><br><span class="line">      title=<span class="hljs-string">'A framework for creating ambitious web applications.'</span>/&gt;</span><br><span class="line">    &lt;HelloWorld</span><br><span class="line">      id=<span class="hljs-string">'backbone'</span></span><br><span class="line">      frameworkName=<span class="hljs-string">'Backbone.js'</span></span><br><span class="line">      title=<span class="hljs-string">'Backbone.js gives structure to web applications...'</span>/&gt;</span><br><span class="line">    &lt;HelloWorld</span><br><span class="line">      id=<span class="hljs-string">'angular'</span></span><br><span class="line">      frameworkName=<span class="hljs-string">'Angular.js'</span></span><br><span class="line">      title=<span class="hljs-string">'Superheroic JavaScript MVW Framework'</span>/&gt;</span><br><span class="line">  &lt;<span class="hljs-regexp">/div&gt;,</span></span><br><span class="line"><span class="hljs-regexp">  document.getElementById('content')</span></span><br><span class="line"><span class="hljs-regexp">)</span></span><br></pre></td></tr></table></figure><h3 id="3-2-5-React-컴포넌트-메서드-생성하기"><a href="#3-2-5-React-컴포넌트-메서드-생성하기" class="headerlink" title="3.2.5 React 컴포넌트 메서드 생성하기"></a>3.2.5 React 컴포넌트 메서드 생성하기</h3><p>React 컴포넌트에 애플리케이션을 위한 메서드를 자유롭게 추가할 수 있다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Content</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">    getUrl()&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">'http://webapplog.com'</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render()&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>{}안에 클래스 메서드를 호출 하는 방식으로 사용한다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Content</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  getUrl() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'http://webapplog.com'</span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;Your REST API URL is: <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#123;this.getUrl()&#125;</span>&gt;</span>&#123;this.getUrl()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-2-6-JSX의-if-else처리"><a href="#3-2-6-JSX의-if-else처리" class="headerlink" title="3.2.6 JSX의 if/else처리"></a>3.2.6 JSX의 if/else처리</h3><ul><li>유저 세션에 따른 렌더링 처리 예시(자바스크립트)<figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(user.session)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/logout"</span>&gt;</span> Logout<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/login"</span>&gt;</span> Login<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>JSX로 3가지 방법 표현법<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//방법1 변수</span></span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> link</span><br><span class="line">    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.props.user.session)&#123;</span><br><span class="line">        link = <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/logout"</span>&gt;</span> Logout<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        link =  <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/login"</span>&gt;</span> Login<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;link&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 방법 2 표현식</span></span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> link = <span class="hljs-function">(<span class="hljs-params">sessionFlag</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="hljs-keyword">if</span>(sessionFlag)&#123; </span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/logout"</span>&gt;</span> Logout<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line">       <span class="hljs-keyword">else</span> </span><br><span class="line">           <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/login"</span>&gt;</span> Login<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;link(this.props.user.session&#125;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//방법 3 삼항연산자</span></span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span>(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;(<span class="hljs-keyword">this</span>.props.uwer.session)</span><br><span class="line">            ? <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/logout"</span>&gt;</span> Logout<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line">            : <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/login"</span>&gt;</span> Login<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )   </span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><ul><li>return 문 이전에 JSX 외부에 변수를 선언한 후 JSX 내부에서 {}를 사용하여 출력한다</li><li>return 문 이전에 JSX외부에서 값을 반환하는 함수 표현식을 선언한 후 JSX내부의 {}에서 실행한다</li><li>삼항연산자를 사용한다</li><li>JSX 내부에서 즉시 실행함수를 사용한다. </li></ul><h3 id="3-2-7-JSX의-주석-작성-방법"><a href="#3-2-7-JSX의-주석-작성-방법" class="headerlink" title="3.2.7 JSX의 주석 작성 방법"></a>3.2.7 JSX의 주석 작성 방법</h3><p>일반 자바스크립트 주석과 비슷하다. {}로 감싸서 작성한다.</p><h2 id="3-3-Babel을-이용한-JSX-트랜스-파일러-설정하기"><a href="#3-3-Babel을-이용한-JSX-트랜스-파일러-설정하기" class="headerlink" title="3.3 Babel을 이용한 JSX 트랜스 파일러 설정하기"></a>3.3 Babel을 이용한 JSX 트랜스 파일러 설정하기</h2><p>JSX파일을 자바스크립트코드로 변환하는 과정을 트랜스파일레이션이라고 한다.</p><ul><li>Babel 명령줄 인터페이스 도구</li><li>Node.js 또는 브라우저 자바스크립트로 작성한 스크립트(API방식): babel-core 패키지를 이용해서 스크립트를 직성해 변환하는 방식</li><li>빌드 도구: Grunt, Gulp, Webpack도구에서 Babel을 플러그인으로 사용할 수 있다.</li></ul><h4 id="1-Node-js-npm-설치"><a href="#1-Node-js-npm-설치" class="headerlink" title="1. Node.js npm 설치"></a>1. Node.js npm 설치</h4><h2 id="3-4-React와-JSX의-까다로운-부분"><a href="#3-4-React와-JSX의-까다로운-부분" class="headerlink" title="3.4 React와 JSX의 까다로운 부분"></a>3.4 React와 JSX의 까다로운 부분</h2><p>태그를 닫을 때 반드시 /를 넣어야 한다. </p><h3 id="3-4-1-특수문자"><a href="#3-4-1-특수문자" class="headerlink" title="3.4.1 특수문자"></a>3.4.1 특수문자</h3><p>HTML엔터티코드를 사용하여 저작권 표시나 말바꿈표 따옴표 등을 사용할 수 있다.</p><ul><li><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- ```mdash;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```js</span><br><span class="line">&lt;span&gt;&amp;copy;&amp;mdash;&amp;ldquo;&lt;/span&gt;</span><br><span class="line">&lt;input value =&quot;&amp;copy;&amp;mdash;&amp;ldquo;&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ul><p>아래 코드는 작동하지 않는 오류 코드<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> specialChars = <span class="hljs-string">"&amp;copy;&amp;mdash;&amp;ldquo;"</span></span><br><span class="line">&lt;span&gt;&#123;specialChars&#125;&lt;<span class="hljs-regexp">/span&gt;</span></span><br><span class="line"><span class="hljs-regexp">&lt;input value=&#123;specialChars&#125;/</span>&gt;</span><br></pre></td></tr></table></figure></p><p>위험한 HTML구문에 대해서 자동으로 이스케이프를 적용함. 특수문자를 노출하려면 다음 방법중 하나를 선택한다.</p><ul><li>배열로 출력해 여러개의 분자열로 분리</li><li>소스코드에 특수문자를 직접 복사해서 넣는다</li><li>특스문자를 \u로 시작하는 이스케이프 시퀸스로 바꾼 후에 유니코드번호를 찾아 사용한다.</li><li>String.fromCharCode(charCodeNumber)를 이용해서 유니코드 번호에서 문자로 변경한다</li><li>React 엘리먼트의 _html에 dangerouslySetInnerHTML을 이용하는 방법이 있으나 추천하지 않는다</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;리엑트 교과서를 정리한 내용입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;3-1-JSX의-정의와-장점&quot;&gt;&lt;a href=&quot;#3-1-JSX의-정의와-장점&quot; class=&quot;headerlink&quot; title=&quot;3.1 JSX의
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/categories/tec/react/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/tags/react/"/>
    
      <category term="프레임워크" scheme="https://eunii.github.io/tags/%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/"/>
    
      <category term="리엑트" scheme="https://eunii.github.io/tags/%EB%A6%AC%EC%97%91%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>[React 교과서] 2장 React 첫걸음</title>
    <link href="https://eunii.github.io/2019/08/13/tec/react/react3/"/>
    <id>https://eunii.github.io/2019/08/13/tec/react/react3/</id>
    <published>2019-08-13T08:26:25.000Z</published>
    <updated>2019-08-28T05:27:19.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>리엑트 교과서를 정리한 내용입니다.</p></blockquote><p>엘리먼트는 컴포넌트의 인스턴스이며 컴포넌트 클래스라고 한다.</p><h2 id="2-1-엘리먼트-중첩"><a href="#2-1-엘리먼트-중첩" class="headerlink" title="2.1 엘리먼트 중첩"></a>2.1 엘리먼트 중첩</h2><p>여러개 엘리먼트가 중첩되는 경우가 많다.<br>ReactDOM.render()에는 하나의 React엘리먼트만 인자로 전달할 수 있다.<br>동일한 DOM객체에 두개의 h1태그를  렌더링해야 하는 경우 두 요소를 <figure class="highlight plain hljs"><figcaption><span>```<span>```으로 감싸 사용</span></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```js</span><br><span class="line"> var h1 = React.createElement(&apos;h1&apos;, null, &apos;Hello world!&apos;) //-h1요소를 생성하여 변수에 담음</span><br><span class="line"> var div = React.createElement(&apos;div&apos;, null, h1,h1) //-세번째 이후 매개변수가 문자열이 아니면 새로 생성하는 엘리먼트의 자식 엘리먼트다.</span><br><span class="line">      ReactDOM.render( //h1요소를 ID가 content인 실제 DOM에 랜더링함</span><br><span class="line">        div,</span><br><span class="line">        document.getElementById(&apos;content&apos;)</span><br><span class="line">      )</span><br></pre></td></tr></table></figure></p><p>createElement 의 첫번째 매개변수에는 아래 두가지 자료형을 입력할 수 있다.</p><ul><li>문자열로 작성한 일반적 HTML태그. 소문자로 작성 ex) ‘h1’, ‘div’</li><li>React 컴포넌트 객체, HelloWorld를 예로 들 수 있음. React 컴포넌트 객체이름은 대문자로 시작한다. </li></ul><h2 id="2-2-React컴포넌트-클래스-생성"><a href="#2-2-React컴포넌트-클래스-생성" class="headerlink" title="2.2 React컴포넌트 클래스 생성"></a>2.2 React컴포넌트 클래스 생성</h2><p>컴포넌트 클래스(component class)를 사용하면 기능을 느슨하게 결합된 부분으로 분리하여 코드를 재사용할 수 있다.<br>‘Hello world!’를 별도의 클래스로 분리하는 방법.</p><p>class HelloWorld extends React.Component로 상속받아 사용<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> h1 = React.createElement(<span class="hljs-string">'h1'</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'Hello world!'</span>)</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'div'</span>, <span class="hljs-literal">null</span>, h1, h1)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  React.createElement(HelloWorld, <span class="hljs-literal">null</span>),</span><br><span class="line">  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'content'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>여기서 render()는 엘리먼트 하나만 반환함</p><p>Hello world!를 여러번 노출해야하면 아래와 같이 클래스 재사용 가능<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  React.createElement(div, </span><br><span class="line">                      <span class="hljs-literal">null</span>, </span><br><span class="line">                      React.createElement(HelloWorld), </span><br><span class="line">                      React.createElement(HelloWorld), </span><br><span class="line">                      React.createElement(HelloWorld)</span><br><span class="line">                      ),</span><br><span class="line">  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'content'</span> )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="2-3-React-속성-props-사용하기"><a href="#2-3-React-속성-props-사용하기" class="headerlink" title="2.3 React 속성(props) 사용하기"></a>2.3 React 속성(props) 사용하기</h2><p>컴포넌트의 속성(properties)은 React선언형 스타일의 기초다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React.createElememt(<span class="hljs-string">'a'</span>, &#123;<span class="hljs-attr">href</span>: <span class="hljs-string">'https://eunii.github.io'</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>속성은 컴포넌트 내부에서는 변경할 수 없는 값이다.<br>부모 컴포넌트가 자식 생성 시점에 속성을 할당한다.</p><p>속성은 아래와 같은 용도로 사용가능</p><ul><li>일반적 HTML 요소의 속성: href, title, style, class</li><li>React 컴포넌트 클래스의 자바스크립트코드에서 this.props의 값. 예를 들어 this.props.PROPERTY_NAME<br>render()메서드에서 입력하여 렌더링하거나 코드에서 활용 할 수 있다.</li></ul><p>HelloWorld컴포넌트에 아래 세가지 속성을 추가한다.</p><ul><li>id</li><li>frameworkHame</li><li>title<br>id와 title은 h1의 표준속성과 일치에서 랜더링하고 frameworkName은 랜더링 하지 않는다.</li></ul><p>h1을 구현하기 전에 helloWorld클래스의 속성을 전달해야함.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  React.createElement(</span><br><span class="line">    <span class="hljs-string">'div'</span>,</span><br><span class="line">    <span class="hljs-literal">null</span>,</span><br><span class="line">    React.createElement(HelloWorld, &#123;</span><br><span class="line">      id: <span class="hljs-string">'ember'</span>,</span><br><span class="line">      frameworkName: <span class="hljs-string">'Ember.js'</span>,</span><br><span class="line">      title: <span class="hljs-string">'A framework for creating ambitious web applications.'</span>&#125;),</span><br><span class="line">    React.createElement(HelloWorld, &#123;</span><br><span class="line">      id: <span class="hljs-string">'backbone'</span>,</span><br><span class="line">      frameworkName: <span class="hljs-string">'Backbone.js'</span>,</span><br><span class="line">      title: <span class="hljs-string">'Backbone.js gives structure to web applications...'</span>&#125;),</span><br><span class="line">    React.createElement(HelloWorld, &#123;</span><br><span class="line">      id: <span class="hljs-string">'angular'</span>,</span><br><span class="line">      frameworkName: <span class="hljs-string">'Angular.js'</span>,</span><br><span class="line">      title: <span class="hljs-string">'Superheroic JavaScript MVW Framework'</span>&#125;)</span><br><span class="line">  ),</span><br><span class="line">  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'content'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>render()에서 frameworkName속성 사용하기<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> React.createElement(</span><br><span class="line">      <span class="hljs-string">'h1'</span>,</span><br><span class="line">      <span class="hljs-keyword">this</span>.props, <span class="hljs-comment">//모든 속성을 자식 엘리먼트에 전달한다.</span></span><br><span class="line">      <span class="hljs-string">'Hello '</span> + <span class="hljs-keyword">this</span>.props.frameworkName + <span class="hljs-string">' world!'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;리엑트 교과서를 정리한 내용입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;엘리먼트는 컴포넌트의 인스턴스이며 컴포넌트 클래스라고 한다.&lt;/p&gt;
&lt;h2 id=&quot;2-1-엘리먼트-중첩&quot;&gt;&lt;a href=&quot;#2-1-엘리먼트-중첩&quot; c
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/categories/tec/react/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/tags/react/"/>
    
      <category term="프레임워크" scheme="https://eunii.github.io/tags/%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/"/>
    
      <category term="리엑트" scheme="https://eunii.github.io/tags/%EB%A6%AC%EC%97%91%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>[React 교과서] 1장 React 살펴보기</title>
    <link href="https://eunii.github.io/2019/08/12/tec/react/react2/"/>
    <id>https://eunii.github.io/2019/08/12/tec/react/react2/</id>
    <published>2019-08-12T02:26:25.000Z</published>
    <updated>2019-08-12T08:48:46.740Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>리엑트 교과서를 정리한 내용입니다.</p></blockquote><h2 id="1-1-React란-무엇인가"><a href="#1-1-React란-무엇인가" class="headerlink" title="1.1 React란 무엇인가?"></a>1.1 React란 무엇인가?</h2><ul><li>페이스북에서 만든 자바스크립트 기반의 UI 컴포넌트 라이브러리.</li></ul><h2 id="1-2-React가-해결할-수-있는-문제"><a href="#1-2-React가-해결할-수-있는-문제" class="headerlink" title="1.2 React가 해결할 수 있는 문제"></a>1.2 React가 해결할 수 있는 문제</h2><ul><li>DOM을 매번 새로 생성하기 위해 UI를 함수로 만들었다.</li></ul><h2 id="1-3-React의-장점"><a href="#1-3-React의-장점" class="headerlink" title="1.3 React의 장점"></a>1.3 React의 장점</h2><ul><li>단순한 앱 개발</li><li>빠른 UI</li><li>코드량 감소</li></ul><h3 id="1-3-1-간결성"><a href="#1-3-1-간결성" class="headerlink" title="1.3.1 간결성"></a>1.3.1 간결성</h3><ul><li>선언형 스타일 채택</li><li>순수한 자바스크립트를 이용한 컴포넌트 기반 아키텍쳐</li><li>강력한 추상화</li></ul><h4 id="선언형-스타일-채택"><a href="#선언형-스타일-채택" class="headerlink" title="선언형 스타일 채택"></a>선언형 스타일 채택</h4><p>선언형 스타일의 장점은 간단하고 가독성이 좋다. 결과값에 더 집중했다.<br>뷰에 변경이 발생하는경우 react가 알아서 갱신.</p><ul><li>명령형 코드 예시<figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],</span><br><span class="line">arr2 = []</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">    arr2[i] = arr[i]*<span class="hljs-number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'a'</span>,arr2)</span><br></pre></td></tr></table></figure></li></ul><p>결과창<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a [2,4,6,8,10]</span><br></pre></td></tr></table></figure></p><ul><li>선언형 코드 예시<figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]</span><br><span class="line">arr2 = arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v,i</span>)</span>&#123; <span class="hljs-keyword">return</span> v*<span class="hljs-number">2</span> &#125;)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'b'</span>, arr2)</span><br></pre></td></tr></table></figure></li></ul><p>결과창<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b [2,4,6,8,10]</span><br></pre></td></tr></table></figure></p><h4 id="자바스크립트를-이용한-컴포넌트-기반-아키텍처"><a href="#자바스크립트를-이용한-컴포넌트-기반-아키텍처" class="headerlink" title="자바스크립트를 이용한 컴포넌트 기반 아키텍처"></a>자바스크립트를 이용한 컴포넌트 기반 아키텍처</h4><p>코드 재사용이 쉬워 코드를 줄일 수 있다. </p><ul><li>코드 예시<figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (user.session) <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'a'</span>,&#123;<span class="hljs-attr">hret</span>: <span class="hljs-string">'/logout'</span>&#125;, <span class="hljs-string">'Logout'</span>)</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> React.createElement(<span class="hljs-string">'a'</span>, &#123;<span class="hljs-attr">href</span>:<span class="hljs-string">'/login'</span>&#125;, <span class="hljs-string">'Login'</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="강력한-추상화"><a href="#강력한-추상화" class="headerlink" title="강력한 추상화"></a>강력한 추상화</h4><p>내부 인터페이스를 숨기고 정규화 과정을 거친 합성 메서드와 속성을 제공한다.</p><h3 id="1-3-2-속도와-테스트-용이성"><a href="#1-3-2-속도와-테스트-용이성" class="headerlink" title="1.3.2 속도와 테스트 용이성"></a>1.3.2 속도와 테스트 용이성</h3><p>가상 DOM은 자바스크립트 메모리에만 존자한다. 데이터 변경시 가상 DOM을 머저 비교하고 랜더링이 필요한 경우애만 실제 DDM에 랜더링 한다.<br>필요한 부분반 갱신함.</p><h3 id="1-3-3-React의-폭넓은-개발-커뮤니티와-생태계"><a href="#1-3-3-React의-폭넓은-개발-커뮤니티와-생태계" class="headerlink" title="1.3.3 React의 폭넓은 개발 커뮤니티와 생태계"></a>1.3.3 React의 폭넓은 개발 커뮤니티와 생태계</h3><ul><li>React 컴포넌트 목록: <a href="https://github.com/brillout/awsome-reactcomponents" rel="external nofollow noopener noreferrer" target="_blank">1</a><pre><code>[2](http://devarchy.com/react-components)  </code></pre></li></ul><p>등등..</p><h2 id="1-4-React의-단점"><a href="#1-4-React의-단점" class="headerlink" title="1.4 React의 단점"></a>1.4 React의 단점</h2><ul><li>AngularJS나 Ember같은 기능을 사용하려면 라이브러리를 함꼐 사용해야함</li><li>다른 프레임워크만큼 성숙하지 않음.-&gt; 핵심 API가 조금씩 바뀜</li><li>관련 자료가 부족</li><li>단방향 데이터 바인딩만 제공</li><li>리액티브 프로그래밍은 아니다.</li></ul><h2 id="1-5-웹-애플리케이션에-React적용하기"><a href="#1-5-웹-애플리케이션에-React적용하기" class="headerlink" title="1.5 웹 애플리케이션에 React적용하기"></a>1.5 웹 애플리케이션에 React적용하기</h2><ul><li>UI 라이브러리로 React와 관련된 Reduz나 React Router를 활용한 단일 페이지 애플리케이션 스택의 구성</li><li>MVC의 V를 대체하는 UI라이브러리로 기존 IVX프레임워크와 결합</li><li>jQuery 를 기반으로 서버 측 렌더링을 거친 애플리케이션에서 자동완성 등 일부 기능을 위한 UI컴포넌트로 활용</li><li>대부분의 로직을 직접처리하는 백엔드에서 서버측 렌더링 탬플릿 라이브러리로 활용</li><li>백엔드와 프론트엔드서 모두 자바스크립트를 사용하는 경우</li><li>React Native를 UI 라이브러리로 사용한 모바일 앱</li><li>여러가지 렌더링 대상에 적용할 목적으로 사용하는 UI라이브러리</li></ul><h3 id="1-5-1-React-라이브러리와-렌더링-대상"><a href="#1-5-1-React-라이브러리와-렌더링-대상" class="headerlink" title="1.5.1 React 라이브러리와 렌더링 대상"></a>1.5.1 React 라이브러리와 렌더링 대상</h3><ul><li>UI개발이 필요한 환경에 어디든지 사용할 수 있게 만드는중. ReactDOM.rander()를 사용함(여러 환경에서 사용가능)</li></ul><h3 id="1-5-2-단일-페이지-애플리케이션과-React"><a href="#1-5-2-단일-페이지-애플리케이션과-React" class="headerlink" title="1.5.2 단일 페이지 애플리케이션과 React"></a>1.5.2 단일 페이지 애플리케이션과 React</h3><p>서버보다는 클라이언트(브라우저)에 로직이 더 많은 팻 클라이언트다. SPA는 HTML렌더링, 입력값 겁증, UI변경 등의 기능을 브라우저에서 해결한다.<br>SPA 방식으로는 MVC아키텍처를 많이 사용하지만 다른 방식도 있음.</p><h3 id="1-5-3-React-개발-스택"><a href="#1-5-3-React-개발-스택" class="headerlink" title="1.5.3 React 개발 스택"></a>1.5.3 React 개발 스택</h3><p>모델링,스타일라우팅 등에 정해진 방법이 없어 다른 라이브러리를 결합해 사용한다.</p><p>(책 56쪽)</p><ul><li>데이터 모젤링과 백엔드</li><li>라우팅</li><li>React용 Bootstrap컴포넌트</li><li>날짜 입력 컴포넌트</li><li>WAI-ARIA정의를 따르는 자동완성컴포넌트</li></ul><h2 id="1-6-첫번째-React앱-만들기-Hello-World"><a href="#1-6-첫번째-React앱-만들기-Hello-World" class="headerlink" title="1.6 첫번째 React앱 만들기:Hello World"></a>1.6 첫번째 React앱 만들기:Hello World</h2><p>파일구조<br>/hello-world<br>    /js<br>        react.js<br>        react-dom.js<br>    index.html</p><p>예시 코드는 <a href="https://github.com/azat-co/react-quickly/tree/master/ch01/hello-world" rel="external nofollow noopener noreferrer" target="_blank">여기</a> 에서 다운받을 수 있다.</p><p>index.html파일 내용<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/react.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/react-dom.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"content"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>React 엘리먼트를 생성하려면 React.createElement(clementName, data, child)를 호출한다</p><ul><li>elementName : HTML 태그명’h1’처럼 문자열로 작성하거나 직접 만든 컴포넌트 를래스 객체를 넘겨줄 수 있음</li><li>data: 속성이나 상위컴포넌트에 받는 값으로 null이나{name: Azat} 같은 형태의 데이너</li><li>child: 자식 엘리먼트나 태그 내부에 작성하는 텍스트</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> h1 = React.createElement(<span class="hljs-string">'h1'</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'Hello world!'</span>) <span class="hljs-comment">//-h1요소를 생성하여 변수에 담음</span></span><br><span class="line">     ReactDOM.render( <span class="hljs-comment">//h1요소를 ID가 content인 실제 DOM에 랜더링함</span></span><br><span class="line">       h1,</span><br><span class="line">       <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'content'</span>)</span><br><span class="line">     )</span><br></pre></td></tr></table></figure><p>아래처럼 변수에 담지 않고 직접 넣어줄수도 있다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ReactDOM.render( <span class="hljs-comment">//h1요소를 ID가 content인 실제 DOM에 랜더링함</span></span><br><span class="line">  React.createElement(<span class="hljs-string">'h1'</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'Hello world!'</span>)</span><br><span class="line">  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'content'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>웹 브라우져에서 </p><p><div id="content"><br>    <h1 data-reactroot>Hello world!</h1><br></div><br>객체가 만들어진것을 볼 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;리엑트 교과서를 정리한 내용입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-1-React란-무엇인가&quot;&gt;&lt;a href=&quot;#1-1-React란-무엇인가&quot; class=&quot;headerlink&quot; title=&quot;1.1 Reac
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/categories/tec/react/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/tags/react/"/>
    
      <category term="프레임워크" scheme="https://eunii.github.io/tags/%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/"/>
    
      <category term="리엑트" scheme="https://eunii.github.io/tags/%EB%A6%AC%EC%97%91%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>[React] React 시작하기</title>
    <link href="https://eunii.github.io/2019/08/06/tec/react/react1/"/>
    <id>https://eunii.github.io/2019/08/06/tec/react/react1/</id>
    <published>2019-08-06T02:26:25.000Z</published>
    <updated>2019-08-09T02:04:05.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Nodejs-설치-및-최신-버전-확인-6버전-이상"><a href="#1-Nodejs-설치-및-최신-버전-확인-6버전-이상" class="headerlink" title="1. Nodejs 설치 및 최신 버전 확인(6버전 이상)"></a>1. Nodejs 설치 및 최신 버전 확인(6버전 이상)</h2><ul><li><a href="https://nodejs.org/ko/" rel="external nofollow noopener noreferrer" target="_blank">https://nodejs.org/ko/</a> 여기서 최신 nodejs를 설치한다.</li><li>콘솔 창(window + R -&gt; cmd 검색) 에서 아래와 같이 명령어를 입력하면 내 pc에 깔린 nodejs버전이 나온다.<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-프로젝트를-생성할-폴더-위치로-이동하여-다음과-같이-프로젝트를-시작한다"><a href="#2-프로젝트를-생성할-폴더-위치로-이동하여-다음과-같이-프로젝트를-시작한다" class="headerlink" title="2. 프로젝트를 생성할 폴더 위치로 이동하여 다음과 같이 프로젝트를 시작한다."></a>2. 프로젝트를 생성할 폴더 위치로 이동하여 다음과 같이 프로젝트를 시작한다.</h2><p>아래 명령어로 폴더에 이동후<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd d:\dev\react\tutorial</span><br></pre></td></tr></table></figure></p><p>아래 명령어로 프로젝트를 시작한다.<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g create-react-app   </span><br><span class="line">$ create-react-app my-app</span><br></pre></td></tr></table></figure></p><h2 id="3-my-app-src-하위의-파일들을-삭제한다"><a href="#3-my-app-src-하위의-파일들을-삭제한다" class="headerlink" title="3. my-app/src 하위의 파일들을 삭제한다."></a>3. my-app/src 하위의 파일들을 삭제한다.</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd my-app</span><br><span class="line">$ rm -f src/*</span><br></pre></td></tr></table></figure><h2 id="4-my-app-src-index-css-파일을-만들어-아래-내용을-복사한다"><a href="#4-my-app-src-index-css-파일을-만들어-아래-내용을-복사한다" class="headerlink" title="4. my-app/src/index.css 파일을 만들어 아래 내용을 복사한다."></a>4. my-app/src/index.css 파일을 만들어 아래 내용을 복사한다.</h2><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">body</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">font</span>: <span class="hljs-number">14px</span> <span class="hljs-string">"Century Gothic"</span>, Futura, sans-serif;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">ol</span>, <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.board-row</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">clear</span>: both;</span><br><span class="line">  <span class="hljs-attribute">content</span>: <span class="hljs-string">""</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.status</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.square</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;</span><br><span class="line">  <span class="hljs-attribute">float</span>: left;</span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;</span><br><span class="line">  <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">34px</span>;</span><br><span class="line">  <span class="hljs-attribute">height</span>: <span class="hljs-number">34px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">1px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">1px</span>;</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">34px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.square</span><span class="hljs-selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.kbd-navigation</span> <span class="hljs-selector-class">.square</span><span class="hljs-selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">background</span>: <span class="hljs-number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.game</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">  <span class="hljs-attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.game-info</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-my-app-src-index-js-파일을-아래-내용을-복사하여-만든다"><a href="#5-my-app-src-index-js-파일을-아래-내용을-복사하여-만든다" class="headerlink" title="5. my-app/src/index.js 파일을 아래 내용을 복사하여 만든다."></a>5. my-app/src/index.js 파일을 아래 내용을 복사하여 만든다.</h2><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">'./index.css'</span>;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;button className=<span class="hljs-string">"square"</span>&gt;</span><br><span class="line">        &#123;<span class="hljs-comment">/* TODO */</span>&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">class Board extends React.Component &#123;</span></span><br><span class="line"><span class="hljs-regexp">  renderSquare(i) &#123;</span></span><br><span class="line"><span class="hljs-regexp">    return &lt;Square /</span>&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> status = <span class="hljs-string">'Next player: X'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=<span class="hljs-string">"status"</span>&gt;&#123;status&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=<span class="hljs-string">"board-row"</span>&gt;</span><br><span class="line">          &#123;<span class="hljs-keyword">this</span>.renderSquare(<span class="hljs-number">3</span>)&#125;</span><br><span class="line">          &#123;<span class="hljs-keyword">this</span>.renderSquare(<span class="hljs-number">4</span>)&#125;</span><br><span class="line">          &#123;<span class="hljs-keyword">this</span>.renderSquare(<span class="hljs-number">5</span>)&#125;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">class Game extends React.Component &#123;</span></span><br><span class="line"><span class="hljs-regexp">  render() &#123;</span></span><br><span class="line"><span class="hljs-regexp">    return (</span></span><br><span class="line"><span class="hljs-regexp">      &lt;div className="game"&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div className="game-board"&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &lt;Board /</span>&gt;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div className="game-info"&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &lt;div&gt;&#123;/</span>* status *<span class="hljs-regexp">/&#125;&lt;/</span>div&gt;</span><br><span class="line">          &lt;ol&gt;&#123;<span class="hljs-comment">/* TODO */</span>&#125;&lt;<span class="hljs-regexp">/ol&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">/</span><span class="hljs-regexp">/ ========================================</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">ReactDOM.render(</span></span><br><span class="line"><span class="hljs-regexp">  &lt;Game /</span>&gt;,</span><br><span class="line">  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="6-아래-명령어로-시작한다"><a href="#6-아래-명령어로-시작한다" class="headerlink" title="6. 아래 명령어로 시작한다."></a>6. 아래 명령어로 시작한다.</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm start</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## 7. localhost:3000 으로 아래와 같은 화면이 뜬다.</span><br><span class="line"></span><br><span class="line">## 8. my-app/src/index.js파일을 열어보면 아래 세가지 컴포넌트로 구성되어 있다.</span><br><span class="line"></span><br><span class="line">- Square : 하나의 &lt;button&gt;을 렌더링함</span><br><span class="line">- Board : 9개의 사각형을 랜더링함</span><br><span class="line">- Game : 공백있는 하나의 보드를 랜더링함</span><br><span class="line"></span><br><span class="line">## 9. Board 컴포넌트에서 Square 컴포넌트로 데이터(숫자 0~9) 전달하기</span><br><span class="line"></span><br><span class="line">### 9.1 index.js파일의 Board클래스 부분을 아래와 같이 변경한다.</span><br><span class="line">```js</span><br><span class="line">class Board extends React.Component &#123;</span><br><span class="line">  renderSquare(i) &#123;</span><br><span class="line">    return &lt;Square value=&#123;i&#125; /&gt;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-Square클래스-render-메서드를-아래와-같이-변경한다"><a href="#9-2-Square클래스-render-메서드를-아래와-같이-변경한다" class="headerlink" title="9.2 Square클래스 render 메서드를 아래와 같이 변경한다."></a>9.2 Square클래스 render 메서드를 아래와 같이 변경한다.</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;button className=<span class="hljs-string">"square"</span>&gt;</span><br><span class="line">        &#123;<span class="hljs-keyword">this</span>.props.value&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>이렇게 변경해서 저장 후 npm start로 실행해보면 비어있던 9개 사각형 칸에 0~8까지 숫자가 입력되서 나온다.</li></ul><h2 id="10-대화형-컴포넌트-빈-사각형을-클릭하면-X표시가-되게-변경하기"><a href="#10-대화형-컴포넌트-빈-사각형을-클릭하면-X표시가-되게-변경하기" class="headerlink" title="10. 대화형 컴포넌트 : 빈 사각형을 클릭하면 X표시가 되게 변경하기"></a>10. 대화형 컴포넌트 : 빈 사각형을 클릭하면 X표시가 되게 변경하기</h2><h3 id="10-1-Sqare의-render-함수를-아래와-같이-변경한다"><a href="#10-1-Sqare의-render-함수를-아래와-같이-변경한다" class="headerlink" title="10.1 Sqare의 render()함수를 아래와 같이 변경한다."></a>10.1 Sqare의 render()함수를 아래와 같이 변경한다.</h3><p>Square클래스의 생성자에서 this.state을 설정하여 상태(초기값 null)를 가질 수 있게 한다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;</span><br><span class="line">      value: <span class="hljs-literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>아래와 같이 render()함수를 변경하면 사각형을 클릭하면 클릭한 빈 사각형안의 값이 X로 바뀐다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;</span><br><span class="line">      value: <span class="hljs-literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;button className=<span class="hljs-string">"square"</span> onClick=&#123;() =&gt; <span class="hljs-keyword">this</span>.setState(&#123;<span class="hljs-attr">value</span>: <span class="hljs-string">'X'</span>&#125;)&#125;&gt;</span><br><span class="line">        &#123;<span class="hljs-keyword">this</span>.state.value&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="11-State에-저장하기"><a href="#11-State에-저장하기" class="headerlink" title="11 State에 저장하기"></a>11 State에 저장하기</h2><p>클릭 할때마다 o,x 번갈아 나오게 하고, 승자를 가리기 위해 9개 블럭의 상태를 동시에 확인해야함.<br>여러 하위 컴포넌트로 부터 데이터를 모으거나, 하위 컴포넌트들이 서로 통신하기 원하면 상위컴포넌트로 state를 이동시킴.<br>상위 컴포컨트는 props를 통해 하위 컴포넌트로 state를 전달해 줄 수 있다. </p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Board</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;</span><br><span class="line">      squares: <span class="hljs-built_in">Array</span>(<span class="hljs-number">9</span>).fill(<span class="hljs-literal">null</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderSquare(i) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Square</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;i&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="hljs-xml">  &#125;</span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml">  render() &#123;</span></span><br><span class="line"><span class="hljs-xml">    const status = 'Next player: X';</span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml">    return (</span></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className="status"&gt;&#123;status&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div className="board-row"&gt;</span><br><span class="line">          &#123;this.renderSquare(0)&#125;</span><br><span class="line">          &#123;this.renderSquare(1)&#125;</span><br><span class="line">          &#123;this.renderSquare(2)&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div className="board-row"&gt;</span><br><span class="line">          &#123;this.renderSquare(3)&#125;</span><br><span class="line">          &#123;this.renderSquare(4)&#125;</span><br><span class="line">          &#123;this.renderSquare(5)&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div className="board-row"&gt;</span><br><span class="line">          &#123;this.renderSquare(6)&#125;</span><br><span class="line">          &#123;this.renderSquare(7)&#125;</span><br><span class="line">          &#123;this.renderSquare(8)&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"><span class="hljs-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    );</span></span><br><span class="line"><span class="hljs-xml">  &#125;</span></span><br><span class="line"><span class="hljs-xml">&#125;</span></span><br></pre></td></tr></table></figure><p>지금 board의 renderSquare매서드는 아래와 같다.<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">renderSquare(i) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Square</span> <span class="hljs-attr">value</span> =<span class="hljs-string">&#123;i&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml">&#125;</span></span><br></pre></td></tr></table></figure></p><p>Square에 value prop를 전달하도록 수정한다<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">renderSquare(i) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Square</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.squares[i]&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="hljs-xml">  &#125;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">renderSquare(i) &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;Square</span><br><span class="line">      value=&#123;<span class="hljs-keyword">this</span>.state.squares[i]&#125;</span><br><span class="line">      onClick=&#123;() =&gt; <span class="hljs-keyword">this</span>.handleClick(i)&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;button className=<span class="hljs-string">"square"</span> onClick=&#123;() =&gt; <span class="hljs-keyword">this</span>.props.onClick()&#125;&gt;</span><br><span class="line">        &#123;<span class="hljs-keyword">this</span>.props.value&#125;</span><br><span class="line">      &lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Board</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;</span><br><span class="line">      squares: <span class="hljs-built_in">Array</span>(<span class="hljs-number">9</span>).fill(<span class="hljs-literal">null</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick(i) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> squares = <span class="hljs-keyword">this</span>.state.squares.slice();</span><br><span class="line">    squares[i] = <span class="hljs-string">'X'</span>;</span><br><span class="line">    <span class="hljs-keyword">this</span>.setState(&#123;<span class="hljs-attr">squares</span>: squares&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderSquare(i) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;Square</span><br><span class="line">        value=&#123;<span class="hljs-keyword">this</span>.state.squares[i]&#125;</span><br><span class="line">        onClick=&#123;() =&gt; <span class="hljs-keyword">this</span>.handleClick(i)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> status = <span class="hljs-string">'Next player: X'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=<span class="hljs-string">"status"</span>&gt;&#123;status&#125;&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=<span class="hljs-string">"board-row"</span>&gt;</span><br><span class="line">          &#123;<span class="hljs-keyword">this</span>.renderSquare(<span class="hljs-number">3</span>)&#125;</span><br><span class="line">          &#123;<span class="hljs-keyword">this</span>.renderSquare(<span class="hljs-number">4</span>)&#125;</span><br><span class="line">          &#123;<span class="hljs-keyword">this</span>.renderSquare(<span class="hljs-number">5</span>)&#125;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Square</span>(<span class="hljs-params">props</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;button className=<span class="hljs-string">"square"</span> onClick=&#123;props.onClick&#125;&gt;</span><br><span class="line">      &#123;props.value&#125;</span><br><span class="line">    &lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">  );</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">class Board extends React.Component &#123;</span></span><br><span class="line"><span class="hljs-regexp">  renderSquare(i) &#123;</span></span><br><span class="line"><span class="hljs-regexp">    return (</span></span><br><span class="line"><span class="hljs-regexp">      &lt;Square</span></span><br><span class="line"><span class="hljs-regexp">        value=&#123;this.props.squares[i]&#125;</span></span><br><span class="line"><span class="hljs-regexp">        onClick=&#123;() =&gt; this.props.onClick(i)&#125;</span></span><br><span class="line"><span class="hljs-regexp">      /</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=<span class="hljs-string">"board-row"</span>&gt;</span><br><span class="line">          &#123;<span class="hljs-keyword">this</span>.renderSquare(<span class="hljs-number">0</span>)&#125;</span><br><span class="line">          &#123;<span class="hljs-keyword">this</span>.renderSquare(<span class="hljs-number">1</span>)&#125;</span><br><span class="line">          &#123;<span class="hljs-keyword">this</span>.renderSquare(<span class="hljs-number">2</span>)&#125;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(3)&#125;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(4)&#125;</span></span><br><span class="line"><span class="hljs-regexp">          &#123;this.renderSquare(5)&#125;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=<span class="hljs-string">"board-row"</span>&gt;</span><br><span class="line">          &#123;<span class="hljs-keyword">this</span>.renderSquare(<span class="hljs-number">6</span>)&#125;</span><br><span class="line">          &#123;<span class="hljs-keyword">this</span>.renderSquare(<span class="hljs-number">7</span>)&#125;</span><br><span class="line">          &#123;<span class="hljs-keyword">this</span>.renderSquare(<span class="hljs-number">8</span>)&#125;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Game</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;</span><br><span class="line">      history: [</span><br><span class="line">        &#123;</span><br><span class="line">          squares: <span class="hljs-built_in">Array</span>(<span class="hljs-number">9</span>).fill(<span class="hljs-literal">null</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      stepNumber: <span class="hljs-number">0</span>,</span><br><span class="line">      xIsNext: <span class="hljs-literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick(i) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> history = <span class="hljs-keyword">this</span>.state.history.slice(<span class="hljs-number">0</span>, <span class="hljs-keyword">this</span>.state.stepNumber + <span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">const</span> current = history[history.length - <span class="hljs-number">1</span>];</span><br><span class="line">    <span class="hljs-keyword">const</span> squares = current.squares.slice();</span><br><span class="line">    <span class="hljs-keyword">if</span> (calculateWinner(squares) || squares[i]) &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    squares[i] = <span class="hljs-keyword">this</span>.state.xIsNext ? <span class="hljs-string">"X"</span> : <span class="hljs-string">"O"</span>;</span><br><span class="line">    <span class="hljs-keyword">this</span>.setState(&#123;</span><br><span class="line">      history: history.concat([</span><br><span class="line">        &#123;</span><br><span class="line">          squares: squares</span><br><span class="line">        &#125;</span><br><span class="line">      ]),</span><br><span class="line">      stepNumber: history.length,</span><br><span class="line">      xIsNext: !<span class="hljs-keyword">this</span>.state.xIsNext</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  jumpTo(step) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.setState(&#123;</span><br><span class="line">      stepNumber: step,</span><br><span class="line">      xIsNext: (step % <span class="hljs-number">2</span>) === <span class="hljs-number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> history = <span class="hljs-keyword">this</span>.state.history;</span><br><span class="line">    <span class="hljs-keyword">const</span> current = history[<span class="hljs-keyword">this</span>.state.stepNumber];</span><br><span class="line">    <span class="hljs-keyword">const</span> winner = calculateWinner(current.squares);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> moves = history.map(<span class="hljs-function">(<span class="hljs-params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> desc = move ?</span><br><span class="line">        <span class="hljs-string">'Go to move #'</span> + move :</span><br><span class="line">        <span class="hljs-string">'Go to game start'</span>;</span><br><span class="line">      <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;li key=&#123;move&#125;&gt;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; <span class="hljs-keyword">this</span>.jumpTo(move)&#125;&gt;&#123;desc&#125;&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>li&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">let</span> status;</span><br><span class="line">    <span class="hljs-keyword">if</span> (winner) &#123;</span><br><span class="line">      status = <span class="hljs-string">"Winner: "</span> + winner;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      status = <span class="hljs-string">"Next player: "</span> + (<span class="hljs-keyword">this</span>.state.xIsNext ? <span class="hljs-string">"X"</span> : <span class="hljs-string">"O"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="hljs-string">"game"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="hljs-string">"game-board"</span>&gt;</span><br><span class="line">          &lt;Board</span><br><span class="line">            squares=&#123;current.squares&#125;</span><br><span class="line">            onClick=&#123;i =&gt; <span class="hljs-keyword">this</span>.handleClick(i)&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div className="game-info"&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &lt;div&gt;&#123;status&#125;&lt;/</span>div&gt;</span><br><span class="line">          &lt;ol&gt;&#123;moves&#125;&lt;<span class="hljs-regexp">/ol&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">/</span><span class="hljs-regexp">/ ========================================</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">ReactDOM.render(&lt;Game /</span>&gt;, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"root"</span>));</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateWinner</span>(<span class="hljs-params">squares</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> lines = [</span><br><span class="line">    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>],</span><br><span class="line">    [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],</span><br><span class="line">    [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>],</span><br><span class="line">    [<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>],</span><br><span class="line">    [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>],</span><br><span class="line">    [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>],</span><br><span class="line">    [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>],</span><br><span class="line">    [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]</span><br><span class="line">  ];</span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> [a, b, c] = lines[i];</span><br><span class="line">    <span class="hljs-keyword">if</span> (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> squares[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Nodejs-설치-및-최신-버전-확인-6버전-이상&quot;&gt;&lt;a href=&quot;#1-Nodejs-설치-및-최신-버전-확인-6버전-이상&quot; class=&quot;headerlink&quot; title=&quot;1. Nodejs 설치 및 최신 버전 확인(6버전 이상)&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/categories/tec/react/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="react" scheme="https://eunii.github.io/tags/react/"/>
    
      <category term="프레임워크" scheme="https://eunii.github.io/tags/%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/"/>
    
      <category term="리엑트" scheme="https://eunii.github.io/tags/%EB%A6%AC%EC%97%91%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>[Markdown] Markdown 문법 정리</title>
    <link href="https://eunii.github.io/2019/08/05/tec/blog/blog11/"/>
    <id>https://eunii.github.io/2019/08/05/tec/blog/blog11/</id>
    <published>2019-08-05T11:40:25.000Z</published>
    <updated>2019-08-06T08:44:57.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Header"><a href="#1-Header" class="headerlink" title="1. Header"></a>1. Header</h2><p>글머리 1 ~ 6<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># This is a H1</span><br><span class="line">## This is a H2</span><br><span class="line">### This is a H3</span><br><span class="line">#### This is a H4</span><br><span class="line">##### This is a H5</span><br><span class="line">###### This is a H6</span><br></pre></td></tr></table></figure></p><blockquote><h1 id="This-is-a-H1"><a href="#This-is-a-H1" class="headerlink" title="This is a H1"></a>This is a H1</h1><h2 id="This-is-a-H2"><a href="#This-is-a-H2" class="headerlink" title="This is a H2"></a>This is a H2</h2><h3 id="This-is-a-H3"><a href="#This-is-a-H3" class="headerlink" title="This is a H3"></a>This is a H3</h3><h4 id="This-is-a-H4"><a href="#This-is-a-H4" class="headerlink" title="This is a H4"></a>This is a H4</h4><h5 id="This-is-a-H5"><a href="#This-is-a-H5" class="headerlink" title="This is a H5"></a>This is a H5</h5><h6 id="This-is-a-H6"><a href="#This-is-a-H6" class="headerlink" title="This is a H6"></a>This is a H6</h6></blockquote><h2 id="2-굵게-기울임꼴-텍스트"><a href="#2-굵게-기울임꼴-텍스트" class="headerlink" title="2. 굵게 기울임꼴 텍스트"></a>2. 굵게 기울임꼴 텍스트</h2><h3 id="2-1-굵게-지정하려면-두개의-별표로-묶습니다"><a href="#2-1-굵게-지정하려면-두개의-별표로-묶습니다" class="headerlink" title="2.1 굵게 지정하려면 두개의 별표로 묶습니다."></a>2.1 굵게 지정하려면 두개의 별표로 묶습니다.</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This text is **bold**.</span><br></pre></td></tr></table></figure><p>This text is <strong>bold</strong>.<br><br></p><h3 id="2-2-기울임꼴로-지정하려면-한개의-별표로-묶습니다"><a href="#2-2-기울임꼴로-지정하려면-한개의-별표로-묶습니다" class="headerlink" title="2.2 기울임꼴로 지정하려면 한개의 별표로 묶습니다."></a>2.2 기울임꼴로 지정하려면 한개의 별표로 묶습니다.</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This text is *italic*.</span><br></pre></td></tr></table></figure><p>This text is <em>italic</em>.<br><br></p><h3 id="2-3-굵게-기울임꼴로-지정하려면-세개의-별표로-묶습니다"><a href="#2-3-굵게-기울임꼴로-지정하려면-세개의-별표로-묶습니다" class="headerlink" title="2.3 굵게 기울임꼴로 지정하려면 세개의 별표로 묶습니다."></a>2.3 굵게 기울임꼴로 지정하려면 세개의 별표로 묶습니다.</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This text is ***bold and italic***.</span><br></pre></td></tr></table></figure><p>This text is <strong><em>bold and italic</em></strong>.<br><br></p><h2 id="3-BlockQuote"><a href="#3-BlockQuote" class="headerlink" title="3. BlockQuote"></a>3. BlockQuote</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a BlockQuote</span><br></pre></td></tr></table></figure><blockquote><p>This is a BlockQuote</p><blockquote><p>This is a BlockQuote</p><blockquote><p>This is a BlockQuote</p></blockquote></blockquote></blockquote><p>이 안에서도 마크다운 요소를 사용할 수 있습니다.</p><pre>> - List> <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; BlockQuote</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></pre><blockquote><ul><li>List<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; BlcokQuote</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="4-List"><a href="#4-List" class="headerlink" title="4. List"></a>4. List</h2><h3 id="4-1-순서-있는-목록"><a href="#4-1-순서-있는-목록" class="headerlink" title="4.1 순서 있는 목록"></a>4.1 순서 있는 목록</h3><p>어떤 번호를 넣더라도 내림차순으로 숫자가 지정됩니다.<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 첫번쨰</span><br><span class="line">3. 두번째</span><br><span class="line">2. 세번째</span><br></pre></td></tr></table></figure></p><ol><li>첫번째</li><li>두번째</li><li>세번째</li></ol><p><br><br>다른 목록 안에 목록을 중첩하려면 항목을 들여씁니다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 첫번쨰</span><br><span class="line">    1. 두번째</span><br><span class="line">    1. 세번째</span><br><span class="line">1. 네번째</span><br></pre></td></tr></table></figure><ol><li>첫번째<ol><li>두번째</li><li>세번째</li></ol></li><li>네번쨰</li></ol><h3 id="4-2-순서-없는-목록"><a href="#4-2-순서-없는-목록" class="headerlink" title="4.2 순서 없는 목록"></a>4.2 순서 없는 목록</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 빨강</span><br><span class="line">  * 녹색</span><br><span class="line">    * 파랑</span><br><span class="line"></span><br><span class="line">+ 빨강</span><br><span class="line">  + 녹색</span><br><span class="line">    + 파랑</span><br><span class="line"></span><br><span class="line">- 빨강</span><br><span class="line">  - 녹색</span><br><span class="line">    - 파랑</span><br></pre></td></tr></table></figure><ul><li>빨강<ul><li>녹색<ul><li>파랑</li></ul></li></ul></li></ul><ul><li>빨강<ul><li>녹색<ul><li>파랑</li></ul></li></ul></li></ul><ul><li>빨강<ul><li>녹색<ul><li>파랑</li></ul></li></ul></li></ul><h2 id="5-Table"><a href="#5-Table" class="headerlink" title="5. Table"></a>5. Table</h2><p>파이프(|) 및 하이픈(-)을 이용하여 테이블을 만들 수 있습니다.<br>하이픈으로는 헤더를 만들며 파이프로는 각 열을 만듭니다.<br>하이픈으로 헤더 구분시 좌측에 콜론(:)을 삽입 할 경우 좌측정렬 우측에 삽입 할 경우 우측정렬이 되며 양쪽에 둘 경우 가운데 정렬이 됩니다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| Fun                  | With                 | Tables          |</span><br><span class="line">| :------------------- | -------------------: |:---------------:|</span><br><span class="line">| left-aligned column  | right-aligned column | centered column |</span><br><span class="line">| $100                 | $100                 | $100            |</span><br><span class="line">| $10                  | $10                  | $10             |</span><br><span class="line">| $1                   | $1                   | $1              |</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">Fun</th><th style="text-align:right">With</th><th style="text-align:center">Tables</th></tr></thead><tbody><tr><td style="text-align:left">left-aligned column</td><td style="text-align:right">right-aligned column</td><td style="text-align:center">centered column</td></tr><tr><td style="text-align:left">$100</td><td style="text-align:right">$100</td><td style="text-align:center">$100</td></tr><tr><td style="text-align:left">$10</td><td style="text-align:right">$10</td><td style="text-align:center">$10</td></tr><tr><td style="text-align:left">$1</td><td style="text-align:right">$1</td><td style="text-align:center">$1</td></tr></tbody></table><h2 id="6-링크"><a href="#6-링크" class="headerlink" title="6. 링크"></a>6. 링크</h2><h3 id="6-1-참조-링크"><a href="#6-1-참조-링크" class="headerlink" title="6.1. 참조 링크"></a>6.1. 참조 링크</h3><p>syntax:</p><blockquote><p>[id]: Link<br>[title][id]</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hscodev]: hsco.dev</span><br><span class="line">[github]: https://github.com/hscodev</span><br><span class="line"></span><br><span class="line">[블로그][hscodev]</span><br><span class="line"></span><br><span class="line">[깃허브][github]</span><br></pre></td></tr></table></figure><p><a href="https://hsco.dev" rel="external nofollow noopener noreferrer" target="_blank">블로그</a></p><p><a href="https://github.com/hscodev" rel="external nofollow noopener noreferrer" target="_blank">깃허브</a></p><h3 id="6-2-인라인-링크"><a href="#6-2-인라인-링크" class="headerlink" title="6.2. 인라인 링크"></a>6.2. 인라인 링크</h3><p>syntax: </p><blockquote><p>[Label](Link)</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[블로그](https://hsco.dev)</span><br></pre></td></tr></table></figure><p><a href="https://hsco.dev" rel="external nofollow noopener noreferrer" target="_blank">블로그</a></p><h3 id="6-3-자동연결"><a href="#6-3-자동연결" class="headerlink" title="6.3. 자동연결"></a>6.3. 자동연결</h3><p>syntax: </p><blockquote><p>\<link></p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://hsco.dev&gt;</span><br></pre></td></tr></table></figure><p><a href="https://hsco.dev" rel="external nofollow noopener noreferrer" target="_blank">https://hsco.dev</a></p><h3 id="7-코드"><a href="#7-코드" class="headerlink" title="7. 코드"></a>7. 코드</h3><p>개발 코드를 코드블록으로 배치 할 수 있습니다.<br>alias 별칭을 이용하여 구문 강조가 가능합니다.</p><table><thead><tr><th>이름</th><th>Alias</th></tr></thead><tbody><tr><td>java</td><td>java</td></tr><tr><td>json</td><td>json</td></tr><tr><td>javascript</td><td>javascript</td></tr><tr><td>html</td><td>html</td></tr><tr><td>markdown</td><td>md</td></tr><tr><td>SQL</td><td>sql</td></tr><tr><td>등</td></tr></tbody></table><pre><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your code goes in here</span><br></pre></td></tr></table></figure></pre><h3 id="8-이미지"><a href="#8-이미지" class="headerlink" title="8. 이미지"></a>8. 이미지</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](/assets/images/duck.jpg)</span><br><span class="line">![Alt text](/assets/images/duck.jpg &quot;별그림&quot;)</span><br></pre></td></tr></table></figure><p><img src="/assets/images/별그림.png" alt="Alt text"><br><img src="/assets/images/별그림.png" alt="Alt text" title="별그림"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Header&quot;&gt;&lt;a href=&quot;#1-Header&quot; class=&quot;headerlink&quot; title=&quot;1. Header&quot;&gt;&lt;/a&gt;1. Header&lt;/h2&gt;&lt;p&gt;글머리 1 ~ 6&lt;br&gt;&lt;figure class=&quot;highlight plain 
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/categories/tec/blog/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/tags/blog/"/>
    
      <category term="github" scheme="https://eunii.github.io/tags/github/"/>
    
      <category term="hexo" scheme="https://eunii.github.io/tags/hexo/"/>
    
      <category term="Markdown" scheme="https://eunii.github.io/tags/Markdown/"/>
    
      <category term="마크다운" scheme="https://eunii.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"/>
    
  </entry>
  
  <entry>
    <title>[소켓통신/websocket] Spring boot로 소켓통신 채팅 웹 페이지 만들기</title>
    <link href="https://eunii.github.io/2019/06/22/tec/spring/socket1/"/>
    <id>https://eunii.github.io/2019/06/22/tec/spring/socket1/</id>
    <published>2019-06-22T01:59:25.000Z</published>
    <updated>2019-06-22T04:23:29.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring-boot로-웹-소켓통신-채팅-페이지-만들기"><a href="#1-Spring-boot로-웹-소켓통신-채팅-페이지-만들기" class="headerlink" title="1.Spring boot로 웹 소켓통신 채팅 페이지 만들기"></a>1.Spring boot로 웹 소켓통신 채팅 페이지 만들기</h2><h2 id="2-STS에서-Spirng-project-만들기"><a href="#2-STS에서-Spirng-project-만들기" class="headerlink" title="2. STS에서 Spirng project 만들기"></a>2. STS에서 Spirng project 만들기</h2><h3 id="2-1-files-new-Spring-Start-Project-클릭"><a href="#2-1-files-new-Spring-Start-Project-클릭" class="headerlink" title="2.1 files - new - Spring Start Project 클릭"></a>2.1 files - new - Spring Start Project 클릭</h3><img src="/assets/images/tec/socket/1.JPG"> <h3 id="2-2-아래와-같이-입력-프로젝트-이름-등-next클릭"><a href="#2-2-아래와-같이-입력-프로젝트-이름-등-next클릭" class="headerlink" title="2.2 아래와 같이 입력(프로젝트 이름 등) - next클릭"></a>2.2 아래와 같이 입력(프로젝트 이름 등) - next클릭</h3><img src="/assets/images/tec/socket/2.JPG"> <h3 id="2-3-Available에web-검색-후-WebSocket-Spring-web-start-체크-후-Finish-클릭"><a href="#2-3-Available에web-검색-후-WebSocket-Spring-web-start-체크-후-Finish-클릭" class="headerlink" title="2.3 Available에web 검색 후 WebSocket, Spring web start 체크 후 Finish 클릭"></a>2.3 Available에web 검색 후 WebSocket, Spring web start 체크 후 Finish 클릭</h3><img src="/assets/images/tec/socket/3.JPG"> <h3 id="2-4-pom-xml에-다음과-같은-디펜던시-추가-됐는지-확인한다"><a href="#2-4-pom-xml에-다음과-같은-디펜던시-추가-됐는지-확인한다" class="headerlink" title="2.4 pom.xml에 다음과 같은 디펜던시 추가 됐는지 확인한다."></a>2.4 pom.xml에 다음과 같은 디펜던시 추가 됐는지 확인한다.</h3><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web-services<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>아래 디펜던시를 추가한다.<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><img src="/assets/images/tec/socket/4.JPG"> <h3 id="2-5-src-main-webapp-WEB-INF-jsp-폴더를-만든다"><a href="#2-5-src-main-webapp-WEB-INF-jsp-폴더를-만든다" class="headerlink" title="2.5 src/main/webapp/WEB-INF/jsp 폴더를 만든다"></a>2.5 src/main/webapp/WEB-INF/jsp 폴더를 만든다</h3><img src="/assets/images/tec/socket/5.JPG"> <h3 id="2-6-src-main-resources-application-properites에-아래-내용을-추가한다"><a href="#2-6-src-main-resources-application-properites에-아래-내용을-추가한다" class="headerlink" title="2.6 src/main/resources/application.properites에 아래 내용을 추가한다."></a>2.6 src/main/resources/application.properites에 아래 내용을 추가한다.</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure><img src="/assets/images/tec/socket/5.JPG"> <h3 id="2-7-src-main-io-github-eunii-chatting-ChattingApplication-java에-config-어노테이션을-추가한다"><a href="#2-7-src-main-io-github-eunii-chatting-ChattingApplication-java에-config-어노테이션을-추가한다" class="headerlink" title="2.7 src/main/ io.github.eunii.chatting/ChattingApplication.java에 @config 어노테이션을 추가한다."></a>2.7 src/main/ io.github.eunii.chatting/ChattingApplication.java에 @config 어노테이션을 추가한다.</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">package</span> io.github.eunii.chatting;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@SpringBootApplication</span></span><br><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChattingApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ChattingApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-src-main-java-아래-io-github-eunii-chatting-config-패키지를-만들고-아래-내용의-WebScoketConfig-java-파일을-만든다"><a href="#3-src-main-java-아래-io-github-eunii-chatting-config-패키지를-만들고-아래-내용의-WebScoketConfig-java-파일을-만든다" class="headerlink" title="3. src/main/java 아래 io.github.eunii.chatting.config 패키지를 만들고 아래 내용의 WebScoketConfig.java 파일을 만든다."></a>3. src/main/java 아래 io.github.eunii.chatting.config 패키지를 만들고 아래 내용의 WebScoketConfig.java 파일을 만든다.</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> io.github.eunii.chatting.config;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"><span class="hljs-keyword">import</span> io.github.eunii.chatting.handler.SocketTextHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Configuration</span></span><br><span class="line"><span class="hljs-meta">@EnableWebSocket</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSocketConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Autowired</span></span><br><span class="line">SocketTextHandler socketTextHandler;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerWebSocketHandlers</span><span class="hljs-params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">registry.addHandler(socketTextHandler, <span class="hljs-string">"/chat"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/chat 으로 호출이 오면 SocketTestHandler를 실행한다는 뜻이다.</p><img src="/assets/images/tec/socket/6.JPG"> <h2 id="4-src-main-java-아래-io-github-eunii-chatting-handler-패키지를-만들고-아래-내용의-SocketTextHandler-java-파일을-만든다"><a href="#4-src-main-java-아래-io-github-eunii-chatting-handler-패키지를-만들고-아래-내용의-SocketTextHandler-java-파일을-만든다" class="headerlink" title="4 src/main/java 아래 io.github.eunii.chatting.handler 패키지를 만들고 아래 내용의 SocketTextHandler.java 파일을 만든다."></a>4 src/main/java 아래 io.github.eunii.chatting.handler 패키지를 만들고 아래 내용의 SocketTextHandler.java 파일을 만든다.</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> io.github.eunii.chatting.handler;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.web.socket.CloseStatus;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.web.socket.TextMessage;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.web.socket.WebSocketSession;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Component</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SocketTextHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//ArrayList&lt;WebSocketSession&gt; sessions = new ArrayList&lt;&gt;();</span></span><br><span class="line">HashMap&lt;String, WebSocketSession&gt; sessions = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// client에서 메시지가 서버로 전송댈때 실행되는 함수.</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleTextMessage</span><span class="hljs-params">(WebSocketSession session, TextMessage message)</span> </span>&#123;</span><br><span class="line">String payload = message.getPayload();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 접속된 모든 세션에 메시지 전송</span></span><br><span class="line"><span class="hljs-keyword">for</span> (String key : sessions.keySet()) &#123;</span><br><span class="line">WebSocketSession ss = sessions.get(key);</span><br><span class="line">ss.sendMessage(<span class="hljs-keyword">new</span> TextMessage(payload));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="hljs-comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 세션이 생성될때 시작되는 함수</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterConnectionEstablished</span><span class="hljs-params">(WebSocketSession session)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="hljs-keyword">super</span>.afterConnectionEstablished(session);</span><br><span class="line">sessions.put(session.getId(), session);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 세션이 끝날때 실행되는 함수</span></span><br><span class="line"><span class="hljs-meta">@Override</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterConnectionClosed</span><span class="hljs-params">(WebSocketSession session, CloseStatus status)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">sessions.remove(session.getId());</span><br><span class="line"><span class="hljs-keyword">super</span>.afterConnectionClosed(session, status);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>handleTextMessage(WebSocketSession session, TextMessage message) 함수는 클라이언트에서 ws.send(data)가 호출되면 실행된다.</li><li>afterConnectionEstablished()는 세션이 시작될때 실행되는 함수이다. 여기선 sessions에 생성된 세션 정보를 저장한다.</li><li>afterConnectionClosed()는 세션이 끊길때 실행되는 함수. 여기선 sessions에 저장된 세션 정보를 지운다.</li></ul><img src="/assets/images/tec/socket/7.JPG"> <h2 id="4-Client-jps-페이지-만들기-src-main-webapp-WEB-INF-jsp에-chat-jsp파일을-만든다"><a href="#4-Client-jps-페이지-만들기-src-main-webapp-WEB-INF-jsp에-chat-jsp파일을-만든다" class="headerlink" title="4. Client jps 페이지 만들기 src/main/webapp/WEB-INF/jsp에 chat.jsp파일을 만든다."></a>4. Client jps 페이지 만들기 src/main/webapp/WEB-INF/jsp에 chat.jsp파일을 만든다.</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">var ws;</span><br><span class="line">function connectWs() &#123;</span><br><span class="line">ws = new WebSocket(&apos;ws://&apos; + location.host + &apos;/chat&apos;);</span><br><span class="line">ws.onmessage = function(data) &#123;</span><br><span class="line">console.log(data.data);</span><br><span class="line">$(&quot;&lt;p&gt;&quot;+data.data+&quot;&lt;/p&gt;&quot;).prependTo(&apos;#chat&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(&apos;#startBtn&apos;).hide();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function send() &#123;</span><br><span class="line">ws.send($(&quot;#chatting&quot;).val());</span><br><span class="line">$(&apos;#chatting&apos;).val(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;채팅 방 입니다&lt;/h1&gt;</span><br><span class="line">&lt;button onclick=&quot;connectWs()&quot; id=&quot;startBtn&quot;&gt; 채팅 시작하기&lt;/button&gt;</span><br><span class="line">&lt;input id=&quot;chatting&quot;&gt;&lt;/input&gt;&lt;button onclick=&quot;send()&quot;&gt; 보내기 &lt;/button&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p id=&quot;chat&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li><p>jquery를 추가한다.</p>  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script></li><li><p>채팅 시작하기 버튼을 만들어 connectWs() 함수로 소켓을 연다.</p></li><li><p>ws.onmessage = function(data) {} 함수는 서버에서 handleTextMessage()가 실행되어 전송해준 data를 받는다.</p></li><li><p>ws.send(“STRING”) 함수는 send()함수가 실행될때마다  handleTextMessage(WebSocketSession session, TextMessage message)에 message정보를 보낸다.</p></li></ul><h2 id="5-src-main-java-아래-io-github-eunii-chatting-controller-패키지를-만들고-아래-내용의-MainController-java-파일을-만든다"><a href="#5-src-main-java-아래-io-github-eunii-chatting-controller-패키지를-만들고-아래-내용의-MainController-java-파일을-만든다" class="headerlink" title="5 src/main/java 아래 io.github.eunii.chatting.controller 패키지를 만들고 아래 내용의 MainController.java 파일을 만든다."></a>5 src/main/java 아래 io.github.eunii.chatting.controller 패키지를 만들고 아래 내용의 MainController.java 파일을 만든다.</h2><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> io.github.eunii.chatting.controller;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Controller</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/"</span>)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">home</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">"chat"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-start-as-Spring-boot-app으로-서버를-실행한다"><a href="#6-start-as-Spring-boot-app으로-서버를-실행한다" class="headerlink" title="6. start as Spring boot app으로 서버를 실행한다."></a>6. start as Spring boot app으로 서버를 실행한다.</h2><img src="/assets/images/tec/socket/8.JPG"> <h2 id="7-두개의-브라우저에서-http-localhost-8080-창을-띄운다"><a href="#7-두개의-브라우저에서-http-localhost-8080-창을-띄운다" class="headerlink" title="7. 두개의 브라우저에서 http://localhost:8080/ 창을 띄운다."></a>7. 두개의 브라우저에서 <a href="http://localhost:8080/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/</a> 창을 띄운다.</h2><img src="/assets/images/tec/socket/9.JPG"> <h2 id="8-채팅-시작하기를-누른다"><a href="#8-채팅-시작하기를-누른다" class="headerlink" title="8. 채팅 시작하기를 누른다."></a>8. 채팅 시작하기를 누른다.</h2><img src="/assets/images/tec/socket/10.JPG"> <h2 id="9-메시지를-전송해-본다"><a href="#9-메시지를-전송해-본다" class="headerlink" title="9. 메시지를 전송해 본다."></a>9. 메시지를 전송해 본다.</h2><img src="/assets/images/tec/socket/11.JPG"> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Spring-boot로-웹-소켓통신-채팅-페이지-만들기&quot;&gt;&lt;a href=&quot;#1-Spring-boot로-웹-소켓통신-채팅-페이지-만들기&quot; class=&quot;headerlink&quot; title=&quot;1.Spring boot로 웹 소켓통신 채팅 페이지
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="spring" scheme="https://eunii.github.io/categories/tec/spring/"/>
    
    
      <category term="websocket" scheme="https://eunii.github.io/tags/websocket/"/>
    
      <category term="소켓통신" scheme="https://eunii.github.io/tags/%EC%86%8C%EC%BC%93%ED%86%B5%EC%8B%A0/"/>
    
      <category term="spirng boot" scheme="https://eunii.github.io/tags/spirng-boot/"/>
    
  </entry>
  
  <entry>
    <title>[공유기 도메인 설정] LG U+ 공유기로 무료 도메인 설정하기</title>
    <link href="https://eunii.github.io/2019/06/17/tec/network/network1/"/>
    <id>https://eunii.github.io/2019/06/17/tec/network/network1/</id>
    <published>2019-06-17T02:26:25.000Z</published>
    <updated>2019-06-22T04:17:34.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-LG-U-라우터-접속"><a href="#1-LG-U-라우터-접속" class="headerlink" title="1. LG U+ 라우터 접속"></a>1. LG U+ 라우터 접속</h2><ul><li><a href="http://192.168.219.1" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.219.1</a> 에 접속한다.<br>(윈도우+cmd창에서 ipconfig 하면 기본 게이트 웨이 주소)</li></ul><img src="/assets/images/network/공유기1.JPG"><h2 id="2-공유기에-적힌-‘웹admin암호’로-로그인한다"><a href="#2-공유기에-적힌-‘웹admin암호’로-로그인한다" class="headerlink" title="2.공유기에 적힌 ‘웹admin암호’로 로그인한다."></a>2.공유기에 적힌 ‘웹admin암호’로 로그인한다.</h2><img src="/assets/images/network/공유기2.JPG"><h2 id="3-DDNS-설정부분의-톱니바퀴-모양을-누른다"><a href="#3-DDNS-설정부분의-톱니바퀴-모양을-누른다" class="headerlink" title="3. DDNS 설정부분의 톱니바퀴 모양을 누른다."></a>3. DDNS 설정부분의 톱니바퀴 모양을 누른다.</h2><img src="/assets/images/network/공유기3.JPG"><h2 id="4-네트워크-설정-세부설정-DDNS-버튼을-눌러도-됨"><a href="#4-네트워크-설정-세부설정-DDNS-버튼을-눌러도-됨" class="headerlink" title="4. 네트워크 설정 - 세부설정 - DDNS 버튼을 눌러도 됨."></a>4. 네트워크 설정 - 세부설정 - DDNS 버튼을 눌러도 됨.</h2><p>DDNS 설정을 사용함으로 바꾼다.<br>DDNS 서버를 noip.com 을 선택하고 DDNS사용자 등록을 누른다.</p><img src="/assets/images/network/공유기4.JPG"><h2 id="5-noip-com-에-가서-sign-up-버튼을-눌러-회원가입을-한다"><a href="#5-noip-com-에-가서-sign-up-버튼을-눌러-회원가입을-한다" class="headerlink" title="5. noip.com 에 가서 sign up 버튼을 눌러 회원가입을 한다."></a>5. noip.com 에 가서 sign up 버튼을 눌러 회원가입을 한다.</h2><p><a href="https://www.noip.com" rel="external nofollow noopener noreferrer" target="_blank">noip 홈페이지</a>  </p><img src="/assets/images/network/공유기5.JPG"><h2 id="6-email-비밀번호-호스트네임을-넣고-원하는-도메인주소를-선택한다"><a href="#6-email-비밀번호-호스트네임을-넣고-원하는-도메인주소를-선택한다" class="headerlink" title="6. email, 비밀번호, 호스트네임을 넣고 원하는 도메인주소를 선택한다."></a>6. email, 비밀번호, 호스트네임을 넣고 원하는 도메인주소를 선택한다.</h2><p>free sign up 버튼을 누른다.<br><img src="/assets/images/network/공유기6.JPG"></p><h2 id="7-여기에서-프로그램을-다운받아-실행한다"><a href="#7-여기에서-프로그램을-다운받아-실행한다" class="headerlink" title="7. 여기에서 프로그램을 다운받아 실행한다."></a>7. <a href="https://www.noip.com/download?page=win" rel="external nofollow noopener noreferrer" target="_blank">여기</a>에서 프로그램을 다운받아 실행한다.</h2><img src="/assets/images/network/공유기7.JPG"><h2 id="8-다운로드-받은-프로그램을-실행해서-로그인-한다"><a href="#8-다운로드-받은-프로그램을-실행해서-로그인-한다" class="headerlink" title="8. 다운로드 받은 프로그램을 실행해서 로그인 한다."></a>8. 다운로드 받은 프로그램을 실행해서 로그인 한다.</h2><img src="/assets/images/network/공유기8.JPG"><h2 id="9-만든-도메인을-클릭하고-save버튼을-누른다"><a href="#9-만든-도메인을-클릭하고-save버튼을-누른다" class="headerlink" title="9. 만든 도메인을 클릭하고 save버튼을 누른다."></a>9. 만든 도메인을 클릭하고 save버튼을 누른다.</h2><img src="/assets/images/network/공유기9.JPG"><h2 id="10-공유기-라우터-화면으로-돌아와서-사용자-비밀번호-호스트-도메인-이름을-넣고-설정-적용-버튼을-누른다"><a href="#10-공유기-라우터-화면으로-돌아와서-사용자-비밀번호-호스트-도메인-이름을-넣고-설정-적용-버튼을-누른다" class="headerlink" title="10. 공유기 라우터 화면으로 돌아와서 사용자, 비밀번호, 호스트 도메인 이름을 넣고 설정 적용 버튼을 누른다."></a>10. 공유기 라우터 화면으로 돌아와서 사용자, 비밀번호, 호스트 도메인 이름을 넣고 설정 적용 버튼을 누른다.</h2><img src="/assets/images/network/공유기10.JPG"><h2 id="11-host도메인에-접속하여-잘-접속되는지-확인한다"><a href="#11-host도메인에-접속하여-잘-접속되는지-확인한다" class="headerlink" title="11. host도메인에 접속하여 잘 접속되는지 확인한다."></a>11. host도메인에 접속하여 잘 접속되는지 확인한다.</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-LG-U-라우터-접속&quot;&gt;&lt;a href=&quot;#1-LG-U-라우터-접속&quot; class=&quot;headerlink&quot; title=&quot;1. LG U+ 라우터 접속&quot;&gt;&lt;/a&gt;1. LG U+ 라우터 접속&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="network" scheme="https://eunii.github.io/categories/tec/network/"/>
    
    
      <category term="network" scheme="https://eunii.github.io/tags/network/"/>
    
      <category term="공유기" scheme="https://eunii.github.io/tags/%EA%B3%B5%EC%9C%A0%EA%B8%B0/"/>
    
      <category term="도메인" scheme="https://eunii.github.io/tags/%EB%8F%84%EB%A9%94%EC%9D%B8/"/>
    
      <category term="noip" scheme="https://eunii.github.io/tags/noip/"/>
    
  </entry>
  
  <entry>
    <title>[자료구조] MeargeSort(병합 정렬) - Java</title>
    <link href="https://eunii.github.io/2019/05/16/tec/algorithm/al1/"/>
    <id>https://eunii.github.io/2019/05/16/tec/algorithm/al1/</id>
    <published>2019-05-15T15:00:00.000Z</published>
    <updated>2019-05-16T08:25:46.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-병합정렬-MeargeSort"><a href="#1-병합정렬-MeargeSort" class="headerlink" title="1. 병합정렬(MeargeSort)"></a>1. 병합정렬(MeargeSort)</h2><h3 id="1-1-병합-정렬이란"><a href="#1-1-병합-정렬이란" class="headerlink" title="1.1 병합 정렬이란?"></a>1.1 병합 정렬이란?</h3><ol><li>정렬할때 가장 작은 단위로 나눠서 정렬후(sort) 병합(mearge)하는 것을 말한다. </li></ol><h3 id="문제-2751-백준-수-정렬하기-2"><a href="#문제-2751-백준-수-정렬하기-2" class="headerlink" title="문제.2751 [백준] 수 정렬하기 2"></a>문제.2751 [백준] <a href="https://www.acmicpc.net/problem/2751" rel="external nofollow noopener noreferrer" target="_blank">수 정렬하기 2</a></h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">mergeSort(arr,  <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];</span><br><span class="line"><span class="hljs-keyword">if</span> (start &lt; end) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> mid = (start + end) / <span class="hljs-number">2</span>;</span><br><span class="line">mergeSort(arr, start, mid);</span><br><span class="line">mergeSort(arr,  mid + <span class="hljs-number">1</span>, end);</span><br><span class="line">mearge(arr, start, mid, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mearge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">tmp[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> part1 = start;</span><br><span class="line"><span class="hljs-keyword">int</span> part2 = mid + <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> index = start;</span><br><span class="line"><span class="hljs-keyword">while</span> (part1 &lt;= mid &amp;&amp; part2 &lt;= end) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (tmp[part1] &lt;= tmp[part2]) &#123;</span><br><span class="line">arr[index] = tmp[part1];</span><br><span class="line">part1++;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">arr[index] = tmp[part2];</span><br><span class="line">part2++;</span><br><span class="line">&#125;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= mid - part1; i++) &#123;</span><br><span class="line">arr[index + i] = tmp[part1 + i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : arr) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NumberFormatException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="hljs-keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line"><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">arr[i] = Integer.parseInt(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line">mergeSort(arr);</span><br><span class="line">printArray(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4,3,2,1 배열을 정렬할때 아래 순으로 졍렬된다.  </li></ul><table><thead><tr><th style="text-align:center">4</th><th style="text-align:center">3</th><th style="text-align:center">2</th><th style="text-align:center">1</th></tr></thead><tbody><tr><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-병합정렬-MeargeSort&quot;&gt;&lt;a href=&quot;#1-병합정렬-MeargeSort&quot; class=&quot;headerlink&quot; title=&quot;1. 병합정렬(MeargeSort)&quot;&gt;&lt;/a&gt;1. 병합정렬(MeargeSort)&lt;/h2&gt;&lt;h3 id=&quot;1
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/categories/tec/alogrithm/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/tags/alogrithm/"/>
    
      <category term="정렬" scheme="https://eunii.github.io/tags/%EC%A0%95%EB%A0%AC/"/>
    
  </entry>
  
  <entry>
    <title>[자료구조] QuickSort(퀵정렬) - Java</title>
    <link href="https://eunii.github.io/2019/05/16/tec/algorithm/al2/"/>
    <id>https://eunii.github.io/2019/05/16/tec/algorithm/al2/</id>
    <published>2019-05-15T15:00:00.000Z</published>
    <updated>2019-05-16T08:25:46.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-QuickSort-퀵정렬"><a href="#1-QuickSort-퀵정렬" class="headerlink" title="1. QuickSort(퀵정렬)"></a>1. QuickSort(퀵정렬)</h2><h3 id="1-1-퀵정렬-이란"><a href="#1-1-퀵정렬-이란" class="headerlink" title="1.1 퀵정렬 이란?"></a>1.1 퀵정렬 이란?</h3><ol><li>배열중에 임의의 한 값을 선택해 그 기준값을 기준으로 작은건 왼쪽, 큰건 오른쪽에 정렬.</li></ol><h3 id="문제-2751-백준-수-정렬하기-2"><a href="#문제-2751-백준-수-정렬하기-2" class="headerlink" title="문제.2751 [백준] 수 정렬하기 2"></a>문제.2751 [백준] <a href="https://www.acmicpc.net/problem/2751" rel="external nofollow noopener noreferrer" target="_blank">수 정렬하기 2</a></h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NumberFormatException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="hljs-keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line"><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">arr[i] = Integer.parseInt(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line">quickSort(arr);</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : arr) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">sort(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (start &gt;= end)</span><br><span class="line"><span class="hljs-keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> mid = partition(arr, start, end);</span><br><span class="line">sort(arr, start, mid - <span class="hljs-number">1</span>);</span><br><span class="line">sort(arr, mid, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> pivot = arr[(start + end) / <span class="hljs-number">2</span>];</span><br><span class="line"><span class="hljs-keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line"><span class="hljs-keyword">while</span> (arr[start] &lt; pivot)</span><br><span class="line">start++;</span><br><span class="line"><span class="hljs-keyword">while</span> (arr[end] &gt; pivot)</span><br><span class="line">end--;</span><br><span class="line"><span class="hljs-keyword">if</span> (start &lt;= end) &#123;</span><br><span class="line">swap(arr, start, end);</span><br><span class="line">start++;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> tmp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4,3,2,1,0 배열을 정렬할때 아래 순으로 졍렬된다.  </li></ul><table><thead><tr><th style="text-align:center">4</th><th style="text-align:center">3</th><th style="text-align:center">2</th><th style="text-align:center">1</th><th style="text-align:center">0</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-QuickSort-퀵정렬&quot;&gt;&lt;a href=&quot;#1-QuickSort-퀵정렬&quot; class=&quot;headerlink&quot; title=&quot;1. QuickSort(퀵정렬)&quot;&gt;&lt;/a&gt;1. QuickSort(퀵정렬)&lt;/h2&gt;&lt;h3 id=&quot;1-1-퀵정렬-이
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/categories/tec/alogrithm/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="alogrithm" scheme="https://eunii.github.io/tags/alogrithm/"/>
    
      <category term="정렬" scheme="https://eunii.github.io/tags/%EC%A0%95%EB%A0%AC/"/>
    
  </entry>
  
  <entry>
    <title>[SPRING] 6. DI(Dependency injection)</title>
    <link href="https://eunii.github.io/2019/05/15/tec/spring/spring2/"/>
    <id>https://eunii.github.io/2019/05/15/tec/spring/spring2/</id>
    <published>2019-05-14T15:00:00.000Z</published>
    <updated>2019-05-15T08:43:08.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>인프런의 <em>자바 스프링 프레임워크(ver.2018) - 신입 프로그래머를 위한 강좌</em>를 보고 정리한 내용입니다. </p></blockquote><h2 id="6-DI-Dependency-injection"><a href="#6-DI-Dependency-injection" class="headerlink" title="6. DI(Dependency injection)"></a>6. DI(Dependency injection)</h2><h3 id="6-1-DI-Dependency-Injection-란"><a href="#6-1-DI-Dependency-Injection-란" class="headerlink" title="6.1 DI(Dependency Injection)란?"></a>6.1 DI(Dependency Injection)란?</h3><ul><li>배터리 일체형<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectronicCarToy</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> Battery battery;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ElectroniCarToy</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        battery = <span class="hljs-keyword">new</span> NormalBattery();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>배터리가 떨어지면 장난감 새로 구입해야함</p><ul><li>배터리 분리형 1<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectronicCarToy</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> Battery battery;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ElectroniCarToy</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBattery</span><span class="hljs-params">(Battery battery)</span></span>&#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.battery = battery;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>setBattery()를통해 배터리를 교체 할 수 있다. (처음에 배터리 없는 상태로 출시)</p><ul><li>배터리 분리형 2<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectronicCarToy</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> Battery battery;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ElectroniCarToy</span><span class="hljs-params">(Battery battery)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.battery = battery;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBattery</span><span class="hljs-params">(Battery battery)</span></span>&#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.battery = battery;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>setBattery()를통해 배터리를 교체 할 수 있다. (처음에 배터리 있는 상태로 출시)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;인프런의 &lt;em&gt;자바 스프링 프레임워크(ver.2018) - 신입 프로그래머를 위한 강좌&lt;/em&gt;를 보고 정리한 내용입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;6-DI-Dependency-injection&quot;&gt;
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="spring" scheme="https://eunii.github.io/categories/tec/spring/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="spring" scheme="https://eunii.github.io/tags/spring/"/>
    
      <category term="framework" scheme="https://eunii.github.io/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>[SPRING] 1. 스프링 개요</title>
    <link href="https://eunii.github.io/2019/05/15/tec/spring/spring1/"/>
    <id>https://eunii.github.io/2019/05/15/tec/spring/spring1/</id>
    <published>2019-05-14T15:00:00.000Z</published>
    <updated>2019-05-15T08:36:15.170Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>인프런의 <em>자바 스프링 프레임워크(ver.2018) - 신입 프로그래머를 위한 강좌</em>를 보고 정리한 내용입니다. </p></blockquote><h2 id="1-스프링개요"><a href="#1-스프링개요" class="headerlink" title="1. 스프링개요"></a>1. 스프링개요</h2><h3 id="1-1-스프링프레임워크"><a href="#1-1-스프링프레임워크" class="headerlink" title="1.1 스프링프레임워크"></a>1.1 스프링프레임워크</h3><p>스프링프레임워크는 주요기능으로 DI. AOP, MVC, JDBC등을 제공한다.</p><h3 id="1-2-스프링-프레임워크-모듈"><a href="#1-2-스프링-프레임워크-모듈" class="headerlink" title="1.2 스프링 프레임워크 모듈"></a>1.2 스프링 프레임워크 모듈</h3><table><thead><tr><th>스프링모듈</th><th>기능</th></tr></thead><tbody><tr><td>spring-core</td><td>스프링의 핵심인 DI(Depenency Injection)과 IoC(Inversion of Control)을 제공</td></tr><tr><td>spring-aop</td><td>AOP 구현 기능 제공</td></tr><tr><td>spring-jdbc</td><td>데이터베이스를 쉽게 다룰 수 있는 기능 제공</td></tr><tr><td>spring-tx</td><td>스프링에서 제공하는 트랜젝션 관련 기능</td></tr><tr><td>spring-webmvc</td><td>스프링에서 제공하는 컨트롤러(Controller)와 뷰(View)를 이용한 MVC구현 기능 제공</td></tr></tbody></table><h3 id="1-3-스프링-컨테이너-IoC"><a href="#1-3-스프링-컨테이너-IoC" class="headerlink" title="1.3 스프링 컨테이너(IoC)"></a>1.3 스프링 컨테이너(IoC)</h3><p>스프링에서 객체를 생성하고 조립하는 컨테이너(contatiner)로, 컨테이너를 통해 생성된 객체를 빈(Bean)이라고 부른다.  </p><ol><li>객체생성 및 속성 데이터 작성(xml문서)</li><li>스프링컨테이너에서 객체 생성 및 조립</li><li>애플리케이션 구현(개발 문서)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;인프런의 &lt;em&gt;자바 스프링 프레임워크(ver.2018) - 신입 프로그래머를 위한 강좌&lt;/em&gt;를 보고 정리한 내용입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-스프링개요&quot;&gt;&lt;a href=&quot;#1-스프링개요&quot;
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="spring" scheme="https://eunii.github.io/categories/tec/spring/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="spring" scheme="https://eunii.github.io/tags/spring/"/>
    
      <category term="framework" scheme="https://eunii.github.io/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>[CH11. 컬렉션프레임웍과 유용한 클래스] 컬렉션 프레임워크</title>
    <link href="https://eunii.github.io/2019/05/11/tec/java/java14/"/>
    <id>https://eunii.github.io/2019/05/11/tec/java/java14/</id>
    <published>2019-05-11T11:46:25.000Z</published>
    <updated>2019-05-13T07:25:17.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-컬렉션-프레임웍-Collection-Framework"><a href="#1-컬렉션-프레임웍-Collection-Framework" class="headerlink" title="1. 컬렉션 프레임웍(Collection Framework)"></a>1. 컬렉션 프레임웍(Collection Framework)</h2><h3 id="1-6-Enumeration-Iterator-ListIterator"><a href="#1-6-Enumeration-Iterator-ListIterator" class="headerlink" title="1.6 Enumeration, Iterator, ListIterator"></a>1.6 Enumeration, Iterator, ListIterator</h3><h4 id="1-6-1-Iterator"><a href="#1-6-1-Iterator" class="headerlink" title="1.6.1 Iterator"></a>1.6.1 Iterator</h4><p>컬렉션에 저장된 각 요소에 접근하는 기능을 가진 Iterator인터페이스를 정의해 Collection인터페이스에 Iterator를 반환하는 iterator()를 정의하고있다.  </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Iterator</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span></span>;</span><br><span class="line">    ObjectNext();</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Iterator</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iterator()은 Collection 인터페이스에 구현되어있기 때문에 자손 클래스인 List와 Set에도 포함되어 있음.    </p><table><thead><tr><th>메서드</th><th>설명</th></tr></thead><tbody><tr><td>boolean hasNext()</td><td>읽어올 요소가 남아있는지 확인. 있으면 true, 없으면 false를 반환한다.</td></tr><tr><td>Object next()</td><td>다음 요소를 읽어온다. next()를 호출하기 전에 hasNext()를 호출해 확인하는것이 안전하다.</td></tr><tr><td>void remove()</td><td>next()로 읽어 온 요소를 삭제. next()호출 한 다음에 remove()를 호출해야 한다.</td></tr></tbody></table><h4 id="1-6-2-Enumeration과-ListIterator"><a href="#1-6-2-Enumeration과-ListIterator" class="headerlink" title="1.6.2 Enumeration과 ListIterator"></a>1.6.2 Enumeration과 ListIterator</h4><ul><li>Enumeration은 컬렉션 프레임웍이 만들어지기 전에 사용하는것 Iterator의 구버전.  Iterator를 사용하자.  </li><li>ListIterator는  Iterator를 상속받아 기능을 추가한 것. 양방향으로 이동이 가능함.<br>ArrayList나 LinkedList와 같이 List인터페이스를 구현한 컬렉션에서만 사용가능  </li></ul><h3 id="1-7-HashSet"><a href="#1-7-HashSet" class="headerlink" title="1.7 HashSet"></a>1.7 HashSet</h3><p>HashSet은 Set인터페이스를 구현한 가장 대표적 컬렉션.<br>중복된 요소를 저장하지 않음. 저장순서를 유지하지 않음.<br>저장순서 유지하려면 LinkedHashSet을 사용하면 됨.  </p><table><thead><tr><th>생성자 또는 메서드</th><th>설명</th></tr></thead><tbody><tr><td>HashSet()</td><td>HashSet객체를 생성한다.</td></tr><tr><td>HashSet(Collection c)</td><td>주어진 컬렉션을 포함하는 HashSet객체를 생성한다.</td></tr><tr><td>HashSet(int initialCapactiy)</td><td>주어진 값을 초기용량으로 하는 HashSet객체를 생성한다.</td></tr><tr><td>HashSet(int initialCapactiy, float loadFactor)</td><td>초기용량과 load factor를 지정하는 생성자</td></tr><tr><td>boolean add(Object o)</td><td>새로운 객체를 저장한다</td></tr><tr><td>boolean addAll(Collection c)</td><td>주어진 컬렉션에 모든 객체를 추가한다.</td></tr><tr><td>void clear()</td><td>저장된 모든 객체를 삭제한다.</td></tr><tr><td>Object clone()</td><td>HashSEt을 복제하여 반환한다.</td></tr><tr><td>boolean contains(Object o)</td><td>지정된 객체를 포함하고 있는지 알려준다.</td></tr><tr><td>boolean containsAll(Collection  c)</td><td>주어진 컬렉션에 저장된 모든 객체들을 포함하고 있는지 알려준다.</td></tr><tr><td>boolean isEmpty()</td><td>HashSet이 비어있는지 알려준다.</td></tr><tr><td>boolean iterator()</td><td>Iterator 를 반환한다.</td></tr><tr><td>boolean remove(Object o)</td><td>지정된 객체를 HashSet에서 삭제한다.</td></tr><tr><td>boolean removeAll(Collection c)</td><td>주어진컬렉션에 저장된 모든 객체와 동일한 것을 HashSet에서 모두 삭제한다(차집합)</td></tr><tr><td>boolean retainAll(Collection c)</td><td>주어진 컬렉션에 저장된 객체와 동일한 것만 남기고 삭제한다.(교집합)</td></tr><tr><td>int size()</td><td>저장된 객체의 개수를 반환한다.</td></tr><tr><td>Object[] toArray()</td><td>저장된 객체들을 객체배열의 형태로 변환한다.</td></tr><tr><td>Object[] toArray(Object[] a)</td><td>저장된 객체들을 주어진 객체배열 a에 담는다.</td></tr></tbody></table><h3 id="1-8-ThreeSet"><a href="#1-8-ThreeSet" class="headerlink" title="1.8 ThreeSet"></a>1.8 ThreeSet</h3><p>ThreeSet은 이진검색트리라는 자료구조의 형태로 데이터를 저장하는 컬렉션 클래스.<br>정렬, 검색, 범위검색에 뛰어난 성능을 보인다.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-컬렉션-프레임웍-Collection-Framework&quot;&gt;&lt;a href=&quot;#1-컬렉션-프레임웍-Collection-Framework&quot; class=&quot;headerlink&quot; title=&quot;1. 컬렉션 프레임웍(Collection Framewo
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[CH11. 컬렉션프레임웍과 유용한 클래스] List, Set, Map</title>
    <link href="https://eunii.github.io/2019/05/11/tec/java/java13/"/>
    <id>https://eunii.github.io/2019/05/11/tec/java/java13/</id>
    <published>2019-05-11T11:45:25.000Z</published>
    <updated>2019-05-13T07:25:39.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-컬렉션-프레임웍-Collection-Framework"><a href="#1-컬렉션-프레임웍-Collection-Framework" class="headerlink" title="1. 컬렉션 프레임웍(Collection Framework)"></a>1. 컬렉션 프레임웍(Collection Framework)</h2><p>데이터군을 저장하는 클래스들을 표준화 한 설계.  </p><h3 id="1-1-컬렉션프레임웍의-핵심-인터페이스-List-Set-Map"><a href="#1-1-컬렉션프레임웍의-핵심-인터페이스-List-Set-Map" class="headerlink" title="1.1 컬렉션프레임웍의 핵심 인터페이스 - List, Set, Map"></a>1.1 컬렉션프레임웍의 핵심 인터페이스 - List, Set, Map</h3><table><thead><tr><th>인터페이스</th><th>특징</th></tr></thead><tbody><tr><td>List</td><td>순서가 있는 데이터의 집합. 데이터의 중복을 허용한다.<br> 예) 대기자 명단 <br> 구현클래스: ArrayList, LinkedList, Stack, Vector 등</td></tr><tr><td>Set</td><td>순서를 유지하지 않는 데이터의 집합. 데이터의 중복을 허용하지 않는다. <br>예) 양의 정수집합, 소수의 집합 <br> 구현클래스 : HashSet, ThreeSet 등</td></tr><tr><td>Map</td><td>키(key)와 값(value)의 쌍(pair)으로 이루어진 데이터의 집합 <br> 순서는 유지되지 않으며, 키는 중복을 허용하지 않고 값은 중복을 허용한다.<br>예) 우편번호, 지역번호(전화번호)<br>구현클래스: HashMap, ThreeMap, Hashtable, Properties 등</td></tr></tbody></table><h4 id="1-1-1-Collection-인터페이스"><a href="#1-1-1-Collection-인터페이스" class="headerlink" title="1.1.1 Collection 인터페이스"></a>1.1.1 Collection 인터페이스</h4><table><thead><tr><th>메서드</th><th>설명</th></tr></thead><tbody><tr><td>boolean add(Object o)<br>boolean addAll(Collection o)</td><td>지정된 객체 또는 컬렉션이 객체들을 Collection 에 추가한다.</td></tr><tr><td>void clear()</td><td>Collection 의 객체를 모두 삭제한다.</td></tr><tr><td>boolean contains(Object o)<br>boolean containsAll(Collection c)</td><td>지정된 객체 또는 Collection의 객체들이 Collection에 포함되어 있는지 확인한다.</td></tr><tr><td>boolean equals(Object o)</td><td>동일한 Collection인지 비교한다.</td></tr><tr><td>int hashCode()</td><td>Collection의 hash code를 반환한다.</td></tr><tr><td>boolean isEmpty()</td><td>Collection이 비어있는지 확인한다.</td></tr><tr><td>Iterator iterator()</td><td>Collection의 Iterator를 얻어서 반환한다</td></tr><tr><td>boolean remove(Object o)</td><td>지정된 객체를 삭제한다</td></tr><tr><td>boolean removeAll(Collection c)</td><td>지정된 Collection에 포함된 객체들을 삭제한다.</td></tr><tr><td>boolean retainAll(Collection c)</td><td>지정된 Collection에 포함된 객체만을 남기고 다른 객체들은 Collection에서 삭제한다. 이 작업으로 인해 Collection에 변화가 있으면 true없으면  false를 반환한다.</td></tr><tr><td>int size()</td><td>Collection에 저장된 객체의 개수를 반환한다.</td></tr><tr><td>Object[] toArray()</td><td>Collection에 저장된 객체를 객체배열(Object[])로 반환한다.</td></tr><tr><td>Object[] toArray(Object[] a)</td><td>지정된 배열에 Collectiom의 객체를 저장해서 반환한다.</td></tr></tbody></table><h4 id="1-1-2-List인터페이스"><a href="#1-1-2-List인터페이스" class="headerlink" title="1.1.2 List인터페이스"></a>1.1.2 List인터페이스</h4><p>| 메서드 | 설명 |<br>| void add(int index, Object element)<br> addAll(int index, Collection c) | 지정된 위치에 객체를 컬렉션에 포함된 객체들을 추가한다. |<br>| Object get(int index) | 지정된 위치에 있는 객체를 반환한다. |<br>| int indexOf(Object o) | 지정된 객체의 위치를 반환한다.<br>(List의 첫번째 요소부터 순방향으로 찾는다.) |<br>| int lastIndexOf(Object o) | 지정된 객체의 위치를 반환한다. <br>(List의 마지막 요소부터 역방향으로 찾는다.) |<br>| ListIterator listIterator() <br> ListIterator listIterator(int index) | List의 객체에 접근할 수 있는 ListIterator를 반환한다. |<br>| Object remove(int index) | 지정된 위치에 있는 객체를 삭제하고 삭제된 객체를 반환한다. |<br>| Object set(int index, Object element) | 지졷왼 위치에 객체를 저장한다. |<br>| List subList(int fromIndex, int toIndex) |  지정된 범위에 있는 객체를 반환한다. |  </p><h4 id="1-1-3-Set인터페이스"><a href="#1-1-3-Set인터페이스" class="headerlink" title="1.1.3 Set인터페이스"></a>1.1.3 Set인터페이스</h4><p>중복을 허용하지 않고 저장순서가 유지되지 않는 컬렉션 클래스를 구현하는데 사용됨. HashSet, ThreeSet등이 있음.   </p><h4 id="1-1-4-Map인터페이스"><a href="#1-1-4-Map인터페이스" class="headerlink" title="1.1.4 Map인터페이스"></a>1.1.4 Map인터페이스</h4><table><thead><tr><th>메서드</th><th>설명</th></tr></thead><tbody><tr><td>void clear()</td><td>Map의모든 객체를 삭제한다</td></tr><tr><td>boolean containsKey(Object Key)</td><td>지정된 key 객체와 일치하는 Map의 key 객체가 있는지 확인한다.</td></tr><tr><td>boolean containsValue()</td><td>지정된 value객체와 일치하는 Map의 value객체가 있는지 확인한다.</td></tr><tr><td>set entrySet()</td><td>Map에 저장되어있는 key-value쌍을 Map.Entry타입의 객체로 저장한 Set으로 반환한다.</td></tr><tr><td>boolean equals(Object o)</td><td>동일한 Map인지 비교한다</td></tr><tr><td>Object get(Object key)</td><td>지정한 key 객체에 대응하는 value 객체를 찾아서 반환한다.</td></tr><tr><td>int hashCode()</td><td>해시코드를 반환한다.</td></tr><tr><td>boolean isEmpty()</td><td>Map이 비어있는지 확인한다.</td></tr><tr><td>Set keySet()</td><td>Map에 저장된 모든 key 객체를 반환한다.</td></tr><tr><td>Object put(Object key, Object value</td><td>Map에 value객체를 key객체에 연결하여 저장한다.</td></tr><tr><td>void putAll(Map t)</td><td>지정한 Map의 모든 key-value쌍을 추가한다.</td></tr><tr><td>Object remove(Object key)</td><td>지정한 key객체와 일치하는 key-value 객체를 삭제한다</td></tr><tr><td>int size()</td><td>Map에 저장된 key-value쌍의 개수를 반환한다.</td></tr><tr><td>Collection values()</td><td>Map에 저장된 모든 value객체를 반환한다.</td></tr></tbody></table><h4 id="1-1-5-Map-Entry-인터페이스"><a href="#1-1-5-Map-Entry-인터페이스" class="headerlink" title="1.1.5 Map.Entry 인터페이스"></a>1.1.5 Map.Entry 인터페이스</h4><h3 id="1-2-동기화-Synchronization"><a href="#1-2-동기화-Synchronization" class="headerlink" title="1.2 동기화(Synchronization)"></a>1.2 동기화(Synchronization)</h3><p>Collections클래스에 아래와 같은 동기화 메서드 제공함. 필요할때 사용가능.  </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> Collection <span class="hljs-title">synchronizedCollection</span><span class="hljs-params">(Collection c)</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> List <span class="hljs-title">synchronizedList</span><span class="hljs-params">(List list)</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> Map <span class="hljs-title">synchronizedMap</span> <span class="hljs-params">(Map m)</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> Set <span class="hljs-title">synchronizedSet</span><span class="hljs-params">(Set s)</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> SortedMap <span class="hljs-title">synchronizedSortedMap</span><span class="hljs-params">(SortedMap m)</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> SortedSet <span class="hljs-title">synchronizedSortedSet</span><span class="hljs-params">(SortedSet s)</span></span></span><br></pre></td></tr></table></figure><p>위 메서드를 아래와 같이 사용가능함.  </p> <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = Collections.synchronizedList(<span class="hljs-function">New <span class="hljs-title">ArrayList</span><span class="hljs-params">(...)</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="1-3-Vector와-ArrayList"><a href="#1-3-Vector와-ArrayList" class="headerlink" title="1.3 Vector와 ArrayList"></a>1.3 Vector와 ArrayList</h3><table><thead><tr><th>공통점</th><th>차이점</th></tr></thead><tbody><tr><td>- List인터페이스를 구현한다.<br>저장순서가 유지되고 중복을 허용한다.<br>- 데이터의 저장공간으로 배열을 사용한다.</td><td>- Vector는 멀티쓰레드에 대한 동기화가 되어있으나 ArrayList는 그렇지 않다.</td></tr></tbody></table><blockquote><p>Deep Copy vs Shallow Copy  </p><blockquote><p>Shallow : 단순히 참조만 복사하는것, 원본 객체에 영향을 받는다.<br>Deep : 원본과 같은 데이터를 저장하고 있는 새로운 객체나 배열을 생성하는것. 원본 객체에 영향을 받지 않음  </p></blockquote></blockquote><h3 id="1-4-LinkedList"><a href="#1-4-LinkedList" class="headerlink" title="1.4 LinkedList"></a>1.4 LinkedList</h3><p>배열의 단점</p><ol><li>크기를 변경할 수 없다.</li><li>비순차적인 데이터의 추가 또는 삭제에 시간이 많이 걸린다.  </li></ol><p>LinkedList는 불연속적으로 존재하는 데이터를 서로 연결한것.<br>링크드리스트의 각 요소(node)들은 자신과 연결된 다음 요소에 대한 참조(주소값)과 데이터로 구성됨.  </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;</span><br><span class="line">    Node next; <span class="hljs-comment">// 다음요소의 주소를 저장</span></span><br><span class="line">    Object obj; <span class="hljs-comment">// 데이터를 저장</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이동방향이 단방향이어서 다음 요소에 대한 접근은 쉽지만 이전요소에 대한 접근은 어렵다.<br>이 단점을 보완한것이 더블링크드리스트(이중 연렬리스트)<br>링크드리스트에 참조변수를 하나 추가해서 이전 요소에 대한 참조가 가능하게 한것.  </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;</span><br><span class="line">    Node next; <span class="hljs-comment">//다음 요소의 주소를 저장</span></span><br><span class="line">    Node previous;  <span class="hljs-comment">//이전 요소의 주소를 저장</span></span><br><span class="line">    Object obj;  <span class="hljs-comment">// 데이터를 저장</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>더블써큘러링크드 리스트두 있음.  </p><ol><li>순차적으로 추가/삭제하는 경우에는 ArrayList가 LinkedList보다 빠르다.</li><li>중간데이터를 추가/삭제하는 경우에는 LinkedList 가 ArrayList보다 빠르다.  </li></ol><p>데이터의 개수가 변하지 않는 경우는 ArrayList, 데이터 개수의 변경이 잦다면 LinkedList를 사용하는것이 낫다.  </p><p>두가지 혼합 방법 : 처음작업전 데이터는 ArrayList에 저장, 작업할때는 LinkenList로 옮겨서 사용  </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ArrayList al = <span class="hljs-keyword">new</span> ArrayList(<span class="hljs-number">1000000</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++) &#123;</span><br><span class="line">    al.add(i+<span class="hljs-string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkedList ll = <span class="hljs-keyword">new</span> LinkedList(al);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;</span><br><span class="line">    al.add(<span class="hljs-number">500</span>, <span class="hljs-string">"X"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-Stack과-Queue"><a href="#1-5-Stack과-Queue" class="headerlink" title="1.5 Stack과 Queue"></a>1.5 Stack과 Queue</h3><ul><li>Stack은 마지막에 저장된 데이터를 가장 먼저 꺼냄 LIFO</li><li>Queue는 처음에 저장한 데이터를 가장 먼저 꺼냄 FIFO  </li></ul><p>Queue는 ArrayList보다 LinkedList로 구현하는것이 더 적합  </p><p><strong>Stack</strong>    </p><table><thead><tr><th>메서드</th><th>설명</th></tr></thead><tbody><tr><td>boolean empty()</td><td>Stack이 비어있는지 알려준다</td></tr><tr><td>Object peek()</td><td>Stack의 맨 위에 저장된 객체를 반환한다. 꺼내지는 않는다. 비어있으면 null을 반환한다.</td></tr><tr><td>Object pop()</td><td>Stack의 맨 위에 저장된 객체를 꺼낸다.</td></tr><tr><td>Object push(Object item)</td><td>Stack에 객체를 저장한다.</td></tr><tr><td>int search(Object o)</td><td>Stack에서 주어진 객체를 찾아서 그 위치를 반환한다.1부터 시작함</td></tr></tbody></table><p><strong>Queue</strong>    </p><table><thead><tr><th>메서드</th><th>설명</th></tr></thead><tbody><tr><td>Object element()</td><td>삭제없이 저장된 요소를 읽어온다. peek와 다른점은 queue가 비었을때 Exception을 발생시킴</td></tr><tr><td>boolean offer(Object o)</td><td>Queue에 객체를 저장한다. 성공하면 true, 실패하면 false를 반환한다.</td></tr><tr><td>Object peek()</td><td>삭제없이 읽어온다. Queue가 비었을때는 null을 반환한다.</td></tr><tr><td>Object pool()</td><td>Queue에서 꺼내온다. 비어있을때는 null을 반환한다.</td></tr><tr><td>Object remove()</td><td>Queue에서 꺼내온다. 비어있으면 에외를 발생시킨다.</td></tr></tbody></table><ul><li>스택의 활용 예 : 수식계산. 수식괄호검사, 워드프로세서의 undo/redo, 웹브라우저 앞으로 뒤로  </li><li>큐의 활용 예 : 최근사용문서, 인쇄작업대기목록, 버퍼</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-컬렉션-프레임웍-Collection-Framework&quot;&gt;&lt;a href=&quot;#1-컬렉션-프레임웍-Collection-Framework&quot; class=&quot;headerlink&quot; title=&quot;1. 컬렉션 프레임웍(Collection Framewo
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java" scheme="https://eunii.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>[CH15. 네트워킹(Networking)] 네트워킹</title>
    <link href="https://eunii.github.io/2019/05/10/tec/java/java12/"/>
    <id>https://eunii.github.io/2019/05/10/tec/java/java12/</id>
    <published>2019-05-10T11:40:25.000Z</published>
    <updated>2019-05-13T07:21:37.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-네트워킹"><a href="#1-네트워킹" class="headerlink" title="1.네트워킹"></a>1.네트워킹</h2><p>두대 이상의 컴퓨터를 케이블로 연결하여 네트워크를 구성하는것.  </p><h3 id="1-1-클라이언트-서버-client-server"><a href="#1-1-클라이언트-서버-client-server" class="headerlink" title="1.1 클라이언트/서버(client/server)"></a>1.1 클라이언트/서버(client/server)</h3><p>서버(server)는 서비스를 제공하는 컴퓨터, 클라이언트(client)는 서비스를 사용하는 컴퓨터.<br>ex) 파일서버(file server), 메일서버(mail server), 어플래케이션 서버(application server)</p><table><thead><tr><th>서버기반 모델(server-based-model)</th><th>P2P모델(peer-to-peer model)</th></tr></thead><tbody><tr><td>- 안정적인서비스 제공이 가능하다.<br>- 공유데이터의 관리와 보안이 용이하다.<br>- 서버구축비용과 관리비용이 든다.</td><td>- 서버구축 및 운용비용을 절감할 수 있다. <br> - 자원의 활용을 극대화 할 수 있다. <br>- 자원의 관리가 어렵다. <br>- 보안이 취약하다.</td></tr></tbody></table><h3 id="1-2-IP주소-IP-address"><a href="#1-2-IP주소-IP-address" class="headerlink" title="1.2 IP주소(IP address)"></a>1.2 IP주소(IP address)</h3><p>IP주소는 컴퓨터(호스트, host)를 구별하는데 사용하는 고유한 값.<br>4 byte(32bit)의 정수로 구성되어있음. <em>a.b.c.d</em>와 같은 형식으로 표현됨.<br>abcd는 0~255사이의 정수이다.<br>윈도우 콘솔에서 ifconfig를 확인하면 ip주소를 확인 할 수 있음.<br>ex)  </p><ul><li>ip주소<br>192.168.10 .100<br>(네트워크주소).(호스트주소)  </li><li>서브넷마스크<br>255.255.255.0  </li></ul><h3 id="1-3-InetAddress"><a href="#1-3-InetAddress" class="headerlink" title="1.3 InetAddress"></a>1.3 InetAddress</h3><p>자바에서 IP주소를 다루기 위한 클래스로 InetAddress 제공함  </p><h3 id="1-4-URL-Uniform-Resource-Location"><a href="#1-4-URL-Uniform-Resource-Location" class="headerlink" title="1.4 URL(Uniform Resource Location)"></a>1.4 URL(Uniform Resource Location)</h3><p>URL은 인터넷에 존재하는 여러 서버들이 제공하는 자원에 접근할 수 있는 주소를 표현하기 위한것.<br>“프로토콜://호스트명:포트번호/경로명/파이명?쿼리스트링#참조”의 형태로 이루워져있음.  </p><ul><li>프로토콜 : 자원에 접근하기 위해 서버와 통신하는데 사용되는 통신규약(http)</li><li>호스트명: 자원을 제공하는 서버의 이름(<a href="http://www.javahome.com" rel="external nofollow noopener noreferrer" target="_blank">www.javahome.com</a>)</li><li>포트번호 : 통신에 사용되는 서버의 포트번호(80)</li><li>경로명 : 접근하려는 자원이 저장된 서버상의 위치(/sample/)</li><li>파일명 : 접근하려는 자원의 이름(hello.html)</li><li>쿼리 : url에서 ?이후부분</li><li>참조 : url에서 # 이후부분   </li></ul><p>java에서 URL 클래스를 제공함  </p><h3 id="1-5-URL-Connection"><a href="#1-5-URL-Connection" class="headerlink" title="1.5 URL Connection"></a>1.5 URL Connection</h3><p>어플리케이션과 URL간의 통신연결을 나타내는 클래스의 최상위 추상클래스.   </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.net.*;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkEx3</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span><br><span class="line">      URL url = <span class="hljs-keyword">null</span>;</span><br><span class="line">      String address = <span class="hljs-string">"http://www.javahome.com/sample/hello.html"</span>;</span><br><span class="line">      String line =<span class="hljs-string">""</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">          url = <span class="hljs-keyword">new</span> URL(address);</span><br><span class="line">          URLConnection conn = url.openConnection();</span><br><span class="line">          </span><br><span class="line">          System.out.println(<span class="hljs-string">"conn.toSTring(): "</span>+conn);</span><br><span class="line">      &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>아래코드는 해당 페이지의 내용을 읽어온다..  </li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.net.*;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkEx4</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span><br><span class="line">      URL url = <span class="hljs-keyword">null</span>;</span><br><span class="line">      BufferedReader input = <span class="hljs-keyword">null</span>;</span><br><span class="line">      String address = <span class="hljs-string">"http://www.javahome.com/sample/hello.html"</span>;</span><br><span class="line">      String line =<span class="hljs-string">""</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">          url = <span class="hljs-keyword">new</span> URL(address);</span><br><span class="line">          </span><br><span class="line">          input = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(url.openStream()));</span><br><span class="line">          </span><br><span class="line">          <span class="hljs-keyword">while</span>((line= input.readline()) != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">              System.out.println(line);</span><br><span class="line">          &#125;</span><br><span class="line">          input.close();</span><br><span class="line">      &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이진파일을 읽어 저장함.  </li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.net.*;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkEx5</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span><br><span class="line">      URL url = <span class="hljs-keyword">null</span>;</span><br><span class="line">      InputStream in = <span class="hljs-keyword">null</span>;</span><br><span class="line">      FileOutputStream out = <span class="hljs-keyword">null</span>;</span><br><span class="line">      String address = <span class="hljs-string">"http://www.javahome.com/sample/hello.zip"</span>;</span><br><span class="line">      <span class="hljs-keyword">int</span> ch = <span class="hljs-number">0</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">          url = <span class="hljs-keyword">new</span> URL(address);</span><br><span class="line">          in = url.openStream();</span><br><span class="line">          out = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"hello.zip"</span>);</span><br><span class="line">          </span><br><span class="line">          <span class="hljs-keyword">while</span>((ch= inlread()) != -<span class="hljs-number">1</span>) &#123;</span><br><span class="line">              out.writy(ch);</span><br><span class="line">          &#125;</span><br><span class="line">          in.close();</span><br><span class="line">          out.close();</span><br><span class="line">      &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-소켓-프로그래밍"><a href="#2-소켓-프로그래밍" class="headerlink" title="2. 소켓 프로그래밍"></a>2. 소켓 프로그래밍</h2><p>소켓을 이용한 통신프로그래밍.<br>java.net패키지를 통해 소켓 프로그래밍을 지원함.  </p><h3 id="2-1-TCP와-UDP"><a href="#2-1-TCP와-UDP" class="headerlink" title="2.1 TCP와 UDP"></a>2.1 TCP와 UDP</h3><p>TCP/IP 프로토콜은 이기종 시스템간의 통신을 위한 표준 프로토콜로 프로토콜의 집합이다.<br>TCP와 UDP모두 TCP/IP에 포함되어 있음, OSI 7계층의 전송계층에 해당하는 프로토콜이다.   </p><table><thead><tr><th>항목</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>연결방식</td><td>.연결기반<br>- 연결 후 통신(전화기)<br>- 1:1통신방식</td><td>.비연결기반<br>- 연결없이 통신(소포)<br>- 1:1, 1:n, n:n 통신방식</td></tr><tr><td>특징</td><td>.데이터의 경계를 구분안함<br>.신뢰성 있는 데이터를 전송<br>- 데이터의 전송순서가 보장됨<br>- 데이터의 수신여부를 확인함<br>(데이터가 손실되면 재전송)<br>- 패킷을 관리할 필요가 없음<br>.UDP보다 전송속도가 느림</td><td>.데이터의 경계를 구분함<br>.신뢰성 없는 데이터 전송<br>- 데이터의 전송순서가 바뀔 수 있음<br>- 데이터의 수신여부를 확인안 함<br>(데이터가 손실되어도 알 수 없음)<br>- 패킷을 관리해 주어야 함<br>.TCP보다 전송속도가 빠름</td></tr><tr><td>관련 클래스</td><td>.Scoket<br>.ServerSocket</td><td>.DatagramSocket<br>.DatagramPacket<br>.MulticastSocket</td></tr></tbody></table><h3 id="2-3-TCP-소켓-프로그래밍"><a href="#2-3-TCP-소켓-프로그래밍" class="headerlink" title="2.3 TCP 소켓 프로그래밍"></a>2.3 TCP 소켓 프로그래밍</h3><p><strong>서버 프로그램과 클라이언트 프로그램간의 통신과정 단계</strong></p><ol><li>서버프로그램에서는 서버소켓을 사용하여 서버의 컴퓨터의 특정 포트에서 클라이언트의 연결요청을 처리할 준비를 한다. </li><li>클라이언트 프로그램은 접속할 서버의 IP주소와 포트 정보를 가지고 소켓을 생성해서 서버에 연결을 요청한다. </li><li>서버소켓은 클라이언트의 연결요청으 ㄹ받으면 서버에서 새로운 소켓을 생성해서 클라이언트의 소켓과 연결되도록 한다.</li><li>이제 클라이언트 소켓과 새로 생성된 서버의 소켓은 서버소켓과 관계없이 일대일 통신을 한다.  </li></ol><h3 id="2-4-UDP-소켓-프로그래밍"><a href="#2-4-UDP-소켓-프로그래밍" class="headerlink" title="2.4 UDP 소켓 프로그래밍"></a>2.4 UDP 소켓 프로그래밍</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-네트워킹&quot;&gt;&lt;a href=&quot;#1-네트워킹&quot; class=&quot;headerlink&quot; title=&quot;1.네트워킹&quot;&gt;&lt;/a&gt;1.네트워킹&lt;/h2&gt;&lt;p&gt;두대 이상의 컴퓨터를 케이블로 연결하여 네트워크를 구성하는것.  &lt;/p&gt;
&lt;h3 id=&quot;1-1-클
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[CH12. 쓰레드] 프로세스와 쓰레드</title>
    <link href="https://eunii.github.io/2019/05/08/tec/java/java11/"/>
    <id>https://eunii.github.io/2019/05/08/tec/java/java11/</id>
    <published>2019-05-08T11:40:25.000Z</published>
    <updated>2019-05-13T07:16:07.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-프로세스와-쓰레드"><a href="#1-프로세스와-쓰레드" class="headerlink" title="1. 프로세스와 쓰레드"></a>1. 프로세스와 쓰레드</h2><p>프로세스(process)는 간단하게 말하면 실행중인 프로그램이다.<br><strong>프로그램 –실행–&gt; 프로세스</strong><br>프로세스는 데이터, 메모리등의 자원과 쓰레드로 구성되어있음.<br>프로세스의 자원을 이용해서 실제 작업을 수행하는 것.<br>모든 프로세스는 최소 하나 이상의 쓰레드가 존재. 둘 이상이면 멀티쓰레드 프로세스라한다.  </p><ul><li>멀티쓰레딩의 장점<ul><li>CPU의 사용률을 향상시킴.</li><li>자원을 보다 효울적으로 사용할 수 있음.</li><li>사용자에 대한 응답성이 향상됨.</li><li>작업이 분리되어 코드가 간결해짐. </li></ul></li></ul><p>동기화(synhronization), 교착상태(deadlock)등을 고려해서 신중히 프로그래밍 해야함.</p><h2 id="2-쓰레드의-구현과-실행"><a href="#2-쓰레드의-구현과-실행" class="headerlink" title="2. 쓰레드의 구현과 실행"></a>2. 쓰레드의 구현과 실행</h2><p>구현 방법</p><ol><li><p>Thread클래스 상속</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//Thread의 run()함수를 오버라이딩.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Runnable인터페이스 구현(일반적인 방법)</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//추상메서드 run()을 구현</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx1</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span><br><span class="line">      ThreadEx1_1 t1 = <span class="hljs-keyword">new</span> ThreadEx1_1();</span><br><span class="line">      </span><br><span class="line">      Runnable r = <span class="hljs-keyword">new</span> ThreadEx1_2();</span><br><span class="line">      Thread t2 = <span class="hljs-keyword">new</span> Thread(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx1_1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx1_2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>쓰레드 생성 후 start()를 호출해야 작업을 시작함.<br>한번 사용한 쓰레드는 다시 재사용할 수 없다. 하나의 쓰레드에 한번의 start()만 호출 될 수 있음.   </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ThreadEx1_1 t1 = <span class="hljs-keyword">new</span> ThreadEx_1();</span><br><span class="line">t1.start();</span><br><span class="line">t.start();<span class="hljs-comment">//이건 불가능</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">ThreadEx1_1 t1 = <span class="hljs-keyword">new</span> ThreadEx1_1();</span><br><span class="line">t1.start();</span><br><span class="line">t1 = <span class="hljs-keyword">new</span> ThreadEx1_1();</span><br><span class="line">t.start();<span class="hljs-comment">//이건 가능</span></span><br></pre></td></tr></table></figure><h2 id="3-start-와-run"><a href="#3-start-와-run" class="headerlink" title="3. start()와 run()"></a>3. start()와 run()</h2><ul><li>run()을 호출하는 것은 생성된 쓰레드를 실행하는 것이 아니라 단순히 클래스에속한 메서드를 하나 호출하는것.  </li></ul><hr><p>call stack  </p><p>run  </p><h2 id="main"><a href="#main" class="headerlink" title="main  "></a>main  </h2><ul><li>start()을 호출하는 것은 새로운 쓰레드가 작업을 실행하는데 필요한 호출스택을 생성한 후 run()을 호출해서 생성된 호출스택에 run()이 저장되게 한다.<br>모든 쓰레드는 독립적인 작업을 수행하기 위해 자신만의 호출스택을 필요로 하기 때문에 새로운 쓰레드를 생성하고 실행시킬때마다 새로운 호출스택이 생성되고 쓰레드가 종료되면 작업에 사용된 호출스택은 소멸된다.  </li></ul><ol><li>main메서드에서 쓰레드의 start메서드를 호출한다.</li><li>start메서드는 쓰레드가 작업을 수행하는데 사용될 새로운 호출 스택을 생성한다. </li><li>생성된 호출스택에 run 메서드를 호출해서 쓰레드가 작업을 수행하도록 한다. </li><li>이제는 호츨스택이 2개이기때문에 스케줄러가 정한 순서에 으해 번갈아 가면서 실행된다.   </li></ol><p>실행중인 쓰레드가 하나도 없을때 프로그램은 종료된다.</p><h2 id="4-싱글쓰레드와-멀티쓰레드"><a href="#4-싱글쓰레드와-멀티쓰레드" class="headerlink" title="4. 싱글쓰레드와 멀티쓰레드"></a>4. 싱글쓰레드와 멀티쓰레드</h2><p>두개의 작업을 하나의 쓰레드로 하면 한 작업 끝난 후 다른 작업 끝.<br>두개의 작업을 두개의 쓰레드로 하면 짧은시간동안 쓰레드 2개가 번갈아 가면서 작업을 수행해서 동시에 두 작업이 처리되는것과 같다고 느낌.<br>CPU만 사용하는 계산 작업이면 멀티쓰레드가 전환하는 시간때문에 오히려 느림.<br>CPU외 자원을 사용하는 경우 싱글쓰레드 프로세스 보다 멀티쓰레드프로세스가 더 효율적임.<br>ex)외부기기에서 입출력 받는 경우<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> javax.swing.JOptionPane;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx6</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String input = JOptionPanel.showInputDialog(<span class="hljs-string">"아무 값이나 입력하세요."</span>);</span><br><span class="line">        System.out.println(<span class="hljs-string">"입력하신 값은 "</span>+input+<span class="hljs-string">"입니다."</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>; i &gt; <span class="hljs-number">0</span> ; i--) &#123;</span><br><span class="line">          System.out.println(i);</span><br><span class="line">          <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">              Thread.sleep(<span class="hljs-number">1000</span>);</span><br><span class="line">          &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>위의 예는 입력을 받은 후 출력하기 때문에 사용자가 입력하는 동안에는 출력 작업이 일어나지 않는다.<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> javax.swing.JOptionPane;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx7</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        ThreadEx7_1 th1 = <span class="hljs-keyword">new</span> ThreadEx7_1();</span><br><span class="line">        th1.start();</span><br><span class="line">        </span><br><span class="line">        String input = JOptionPanel.showInputDialog(<span class="hljs-string">"아무 값이나 입력하세요."</span>);</span><br><span class="line">        System.out.println(<span class="hljs-string">"입력하신 값은 "</span>+input+<span class="hljs-string">"입니다."</span>);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx7_1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>; i &gt; <span class="hljs-number">0</span> ; i--) &#123;</span><br><span class="line">           System.out.println(i);</span><br><span class="line">           <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="hljs-number">1000</span>);</span><br><span class="line">           &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>위의 코드는 입력받는 동안 출력되고 입력된 값이 출력되고 또 출력이 된다.</p><h2 id="5-쓰레드의-우선순위"><a href="#5-쓰레드의-우선순위" class="headerlink" title="5. 쓰레드의 우선순위"></a>5. 쓰레드의 우선순위</h2><p>쓰레드에 우선순위(priority)의 멤버변수가 있다.<br>우선순위의 범위는 1~10이고 숫자가 높을수록 더 우선순위가 높다.<br>우선순위의 값은 상대적이다. 1,2와 8,9의 결과 값이 같다.<br>우선순위는 쓰레드생성한 쓰레드로부터 상속받는다.<br>main 메서드를 수행하는 쓰레드의 우선순위는 5.<br>파일 다운로드와 채팅기능 중 채팅에 더 우선순위를 높여야 한다.<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setPripority</span><span class="hljs-params">(<span class="hljs-keyword">int</span> new Priority)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getPriority</span><span class="hljs-params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_PRIORITY =<span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MIN_PRIORITY =<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> NORM_PRIORITY = <span class="hljs-number">5</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx9</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        ThreadEx9_1 th1 = <span class="hljs-keyword">new</span> ThreadEx9_1();</span><br><span class="line">        ThreadEx9_2 th2 = <span class="hljs-keyword">new</span> ThreadEx9_2();</span><br><span class="line">        th2.setPriority(<span class="hljs-number">7</span>);</span><br><span class="line">        System.out.println(<span class="hljs-string">"입력하신 값은 "</span>+input+<span class="hljs-string">"입니다."</span>);</span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx9_1</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span> ; i++) &#123;</span><br><span class="line">          System.out.println(<span class="hljs-string">"-"</span>);</span><br><span class="line">          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1000000</span> ; j++) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx9_2</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span> ; i++) &#123;</span><br><span class="line">          System.out.println(<span class="hljs-string">"|"</span>);</span><br><span class="line">          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1000000</span> ; j++) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 결과는 |가 먼저 끝나고, - 이 완료된다.</p><h2 id="6-쓰레드-그룹-thread-group"><a href="#6-쓰레드-그룹-thread-group" class="headerlink" title="6. 쓰레드 그룹(thread group)"></a>6. 쓰레드 그룹(thread group)</h2><p>서로 관련된 쓰레드를 그룹으로 다루기 위한것.<br>폴더를 생성해서 관련된 파일을 묶어 관리하는것처럼 쓰레드도 그룹으로 묶어서 관리.<br>쓰레드를 쓰레드 그룹에 포함시키려면 Thread생성자를 이용해야함<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread(ThreadGroup group, String name)</span><br><span class="line">Thread(ThreadGroup gorup, Runnable target)</span><br></pre></td></tr></table></figure></p><h2 id="7-데몬쓰레드-deamon-thread"><a href="#7-데몬쓰레드-deamon-thread" class="headerlink" title="7. 데몬쓰레드(deamon thread)"></a>7. 데몬쓰레드(deamon thread)</h2><p>데몬쓰레드는 일반 쓰레드의 작업을 돕는 보조역할.<br>일반쓰레드 작업이끝나면 데몬 쓰레드는 강제종료됨.<br>ex) 가비지컬렉터, 위드프로세서 자동저장, 화면자동갱신<br>무한루프와 조건문을 이용해서 실행 후 대기하고 있다가 특정 조건이 되면 작업 수행하고 다시 대기.  </p><h2 id="8-쓰레드의-실행제어"><a href="#8-쓰레드의-실행제어" class="headerlink" title="8. 쓰레드의 실행제어"></a>8. 쓰레드의 실행제어</h2><p>쓰레드 프로그램이 어렵게 느껴지는 건 동기화와 스케줄링때문임.  </p><ul><li>쓰레드 스케쥴링과 관련된 메서드  </li></ul><table><thead><tr><th>생성자/메서드</th><th>설명</th></tr></thead><tbody><tr><td>void interupt()</td><td>sleep()이나 join()에 의해 일시정지상태인 쓰레드를 실행대기상태로 만든다.<br> 해당 쓰레드에서는 interuptedExcetption이 발생함으로써 일시정지상태를 벗어나게 된다.</td></tr><tr><td>void join()<br>void join(long millis) <br> void join(long millis, int nanos)</td><td>지정된 시간동안 쓰레드가 실행되도록한다. 지정된 시간이 자나거나 작업이 종료되면 join()을 호출한 쓰레드로 다시 돌아와 실행을 계속한다.</td></tr><tr><td>void resume()</td><td>supend()에 의해 일시정지상태에 있는 쓰레드를 실행대기 상태로 만든다.</td></tr><tr><td>static void sleep(long millis)<br>static void sleep(long millis, int nanos)</td><td>지정된 시간( 천분의 일초 단위) 동안 쓰레드를 일시정지 시킨다. 지정한 시간이 지나고 나면 자동적으로 다시 실행대기가 된다.</td></tr><tr><td>void stop()</td><td>쓰레드를 즉시 종료시킨다. 교착상태(dead-lock)에 빠지기 쉽기 때문에 deprecated되었다.</td></tr><tr><td>void suspend()</td><td>쓰레드를 일시정지시킨다. resume()을 호출하면 다시 실행대기상태가 된다.</td></tr><tr><td>satic void yield()</td><td>실행중에 다른 쓰레드에게 양보하고 실행대기상태가 된다.</td></tr></tbody></table><ul><li>쓰레드의 상태  </li></ul><table><thead><tr><th>상태</th><th>설명</th></tr></thead><tbody><tr><td>NEW</td><td>쓰레드가 생성되고 아직 start()가 호출되지 않은 상태</td></tr><tr><td>RUNNABLE</td><td>실행 중 또는 실행 가능한 상태</td></tr><tr><td>BLOCKED</td><td>동기화 블럭에 의해서 일시정지된 상태(Lock이 풀릴때까지 기다리는 상태)</td></tr><tr><td>WATING, <br>TIMED_WATING</td><td>쓰레드의 작업이 종료되지는 않았지만 실행가능하지 않은 일시정지 상태. TIMED_WATEING은 일시정지시간이 지정된 경우를 의미한다.</td></tr><tr><td>TERMINATED</td><td>쓰레드의 작업이 종료된 상태</td></tr></tbody></table><ol><li>쓰레드 생성하고 start()을 호출하면 실행대기열에 저장. 순서를 기다림. Quequ와같은 구조로 먼저 실행대기열에 들어온 쓰레드가 먼저 실행됨.  </li><li>실행대기상태이다가 자기 차례가 오면 실행상태가 됨.</li><li>주어진 실행시간이 다되거나 yeild()를 만나면 다시 실행대기 상태가 되고 다음 차례의 쓰레드가 실행상태가 됨.</li><li>실행중 suspend(), sleep(), wait(), join(), I/O block에 의해 일시정지상태가 딜 수 있음.</li><li>지정된 일시정지 시간이 지나거나 notify(), reusme(), interrup()가 호출되면 일시정지 상태를 벗어나 다시 실행대기열에 들어가 순서를 기다림.</li><li>실행을 모두 마치거나 stop()이 호출되면 쓰레드는 소멸됨.  </li></ol><ul><li><p>join()을 사용한 예시</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx13</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> startTime=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        ThreadEx13_1 th1 = <span class="hljs-keyword">new</span> ThreadEx13_1();</span><br><span class="line">        ThreadEx13_2 th2 = <span class="hljs-keyword">new</span> ThreadEx13_2();</span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();      </span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">            th1.join();<span class="hljs-comment">//th1의 작업이 끝날때까지 기다린다.</span></span><br><span class="line">            th2.join();<span class="hljs-comment">//th2의 작업이 끝날때까지 기다린다.</span></span><br><span class="line">        &#125;<span class="hljs-keyword">catch</span> (InterruptedException e)&#123;&#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="hljs-string">"소요시간:"</span> + (System.currentTimeMillis()- ThreadEx13.startTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx13_1</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span> ; i++) &#123;</span><br><span class="line">          System.out.println(<span class="hljs-string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="hljs-comment">//run()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx13_2</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span> ; i++) &#123;</span><br><span class="line">          System.out.println(<span class="hljs-string">"|"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="hljs-comment">//run()</span></span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">join()을 사용하지 않으면 main 쓰레드는 바로 종료되지만, join()을 사용해서 th1과 th2의 작업이 마칠때까지 main쓰레드가 기다림  </span><br><span class="line">- 쓰레드가 순차적으로 실행되어야 할때 사용하는 예제.    </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx14</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> startTime=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        ThreadEx14_1 th1 = <span class="hljs-keyword">new</span> ThreadEx14_1();</span><br><span class="line">        ThreadEx14_2 th2 = <span class="hljs-keyword">new</span> ThreadEx14_2();</span><br><span class="line">        th1.start();</span><br><span class="line">    </span><br><span class="line">        <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">            th1.join();</span><br><span class="line">        &#125;<span class="hljs-keyword">catch</span> (InterruptedException e)&#123;&#125;</span><br><span class="line">        th2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx14_1</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span> ; i++) &#123;</span><br><span class="line">          System.out.println(<span class="hljs-string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="hljs-comment">//run()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx14_2</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span> ; i++) &#123;</span><br><span class="line">          System.out.println(<span class="hljs-string">"|"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>아래 코드는 th1, th2, Main쓰레드 순으로 종료됨  </p></li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx15</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> startTime=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        ThreadEx15_1 th1 = <span class="hljs-keyword">new</span> ThreadEx15_1();</span><br><span class="line">        ThreadEx15_2 th2 = <span class="hljs-keyword">new</span> ThreadEx15_2();</span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();</span><br><span class="line">        <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">            th1.sleep();</span><br><span class="line">        &#125;<span class="hljs-keyword">catch</span> (InterruptedException e)&#123;&#125;</span><br><span class="line">        System.out.println(<span class="hljs-string">"&lt;&lt;main종료&gt;&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx15_1</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span> ; i++) &#123;</span><br><span class="line">          System.out.println(<span class="hljs-string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="hljs-string">"&lt;&lt;TH1종료&gt;&gt;"</span>);</span><br><span class="line">    &#125;<span class="hljs-comment">//run()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx15_2</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span> ; i++) &#123;</span><br><span class="line">          System.out.println(<span class="hljs-string">"|"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="hljs-string">"&lt;&lt;TH2종료&gt;&gt;"</span>);</span><br><span class="line">    &#125; <span class="hljs-comment">//run()</span></span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">왜 th1이 sleep()으로 잠들어있어도 가장 먼저 종료될까?  </span><br><span class="line">sleep()이 항상 현재 실행중인 쓰레드에 대해 작동해서 th1.sleep()호출해도 main메서드를 실행하는 main쓰레드가 영향받는다.   </span><br><span class="line"><span class="hljs-keyword">static</span>으로 선언되어 있어서 참조변수로 sleep()을 호출하기 보다는 Thread.sleep()이렇게 호츨해야 함.</span><br><span class="line"></span><br><span class="line">## 9. 쓰레드의 동기화  </span><br><span class="line">멀티쓰레드는 여러 쓰레드가 같은 프로세스내의 자원을 공유하기 때문에 데이터가 원래 의도했더것과는 다르게 변경 될 수 있음.  </span><br><span class="line"></span><br><span class="line">### 9.1 synchorized를 이용한 동기화  </span><br><span class="line">공유 데이터에 lock을 걸어 먼저 작업중이던 쓰레드가 작업을 완전히 마칠때까지는 다른 쓰레드에게 제어권이 넘어가도 데이터가 변경되지 않도록 보호함.  </span><br><span class="line"></span><br><span class="line">- <span class="hljs-keyword">synchronized</span> 사용방법 두가지.  </span><br><span class="line">가능하면 메서드에 <span class="hljs-keyword">synchronized</span>를 사용하는 메서드 단위 동기화를 권장함.  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="hljs-comment">// 1. 특정한 객체에 lock을 걸고자 할때</span></span><br><span class="line">    sysnchronized(객체의 참조변수)&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-comment">// 2. 메서드에 lock을 걸고자 할때</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">calcSum</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>synchronized를 이용해서 객체를 동기화 하면 쓰레드가 교착상태에 빠질 수 있다.<br>교착상태란 구 쓰레드가 lock이 된 상태로 서로 lock가 풀리기를 무한정 기다리게 되는상황.  </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx21</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span><br><span class="line">      RunnbaleImpl r =  <span class="hljs-keyword">new</span> RunnableImpl();</span><br><span class="line">      Thread th1 = <span class="hljs-keyword">new</span> Thread(r);</span><br><span class="line">      Thread th2 = <span class="hljs-keyword">new</span> Thread(r);</span><br><span class="line">      th1.start();</span><br><span class="line">      th2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunnableTmpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> iv = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> lv = <span class="hljs-number">0</span>;</span><br><span class="line">        String name = Thread.currentThread().getName();</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">while</span>(lv&lt;<span class="hljs-number">3</span>)&#123;</span><br><span class="line">            System.out.println(name+<span class="hljs-string">"Local var: "</span>+ ++lv);</span><br><span class="line">            System.out.println(name+<span class="hljs-string">"Instance var: "</span>+ ++iv);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실행결과<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="hljs-number">0</span> Local <span class="hljs-keyword">var</span>: <span class="hljs-number">1</span></span><br><span class="line">Thread-<span class="hljs-number">0</span> Instance <span class="hljs-keyword">var</span>: <span class="hljs-number">1</span> </span><br><span class="line"></span><br><span class="line">Thread-<span class="hljs-number">0</span> Local <span class="hljs-keyword">var</span>: <span class="hljs-number">2</span></span><br><span class="line">Thread-<span class="hljs-number">0</span> Instance <span class="hljs-keyword">var</span>: <span class="hljs-number">2</span> </span><br><span class="line"></span><br><span class="line">Thread-<span class="hljs-number">0</span> Local <span class="hljs-keyword">var</span>: <span class="hljs-number">3</span></span><br><span class="line">Thread-<span class="hljs-number">0</span> Instance <span class="hljs-keyword">var</span>: <span class="hljs-number">3</span> </span><br><span class="line"></span><br><span class="line">Thread-<span class="hljs-number">0</span> Local <span class="hljs-keyword">var</span>: <span class="hljs-number">1</span></span><br><span class="line">Thread-<span class="hljs-number">0</span> Instance <span class="hljs-keyword">var</span>: <span class="hljs-number">4</span> </span><br><span class="line"></span><br><span class="line">Thread-<span class="hljs-number">0</span> Local <span class="hljs-keyword">var</span>: <span class="hljs-number">2</span></span><br><span class="line">Thread-<span class="hljs-number">0</span> Instance <span class="hljs-keyword">var</span>: <span class="hljs-number">5</span> </span><br><span class="line"></span><br><span class="line">Thread-<span class="hljs-number">0</span> Local <span class="hljs-keyword">var</span>: <span class="hljs-number">3</span></span><br><span class="line">Thread-<span class="hljs-number">0</span> Instance <span class="hljs-keyword">var</span>: <span class="hljs-number">6</span></span><br></pre></td></tr></table></figure></p><p> 여기서 인스턴스변수 iv는 main, th1, th2 쓰레드 모두 접근이 가능함.(쓰레드간의 변수 공유)<br> lv는 지역변수라 각 쓰레드 스택내에서 생성되어 공유되지 않는다.</p><ul><li>다음은 동기화가 잘 되지 않아 데이터 값이 변형된 예제.<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadEx24</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span><br><span class="line">      RunnbaleImpl r =  <span class="hljs-keyword">new</span> RunnableImpl();</span><br><span class="line">            Thread th1 = <span class="hljs-keyword">new</span> Thread(r);</span><br><span class="line">            Thread th2 = <span class="hljs-keyword">new</span> Thread(r);</span><br><span class="line">            th1.start();</span><br><span class="line">            th2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> balance =<span class="hljs-number">1000</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(balance&gt;=money)&#123;</span><br><span class="line">            <span class="hljs-keyword">try</span>&#123; Thread.sleep(<span class="hljs-number">1000</span>);&#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">            balance -=money;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="hljs-comment">//withdraw</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunnableEx24</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;</span><br><span class="line">    Account acc = <span class="hljs-keyword">new</span> Account();</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">while</span>(acc.balance &gt; <span class="hljs-number">0</span>)&#123;</span><br><span class="line">            <span class="hljs-comment">//100, 200, 300중의 한 값을 임의로 선택해서 출금</span></span><br><span class="line">            <span class="hljs-keyword">int</span> money = (<span class="hljs-keyword">int</span>)(Math.random()*<span class="hljs-number">3</span>+<span class="hljs-number">1</span>)*<span class="hljs-number">100</span>;</span><br><span class="line">            acc.withdraw(money);</span><br><span class="line">            System.out.println(<span class="hljs-string">"balance:"</span>+acc.balance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="hljs-comment">//run()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>실행 결과<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">balance:<span class="hljs-number">700</span></span><br><span class="line">balance:<span class="hljs-number">400</span></span><br><span class="line">balance:<span class="hljs-number">200</span></span><br><span class="line">balance:<span class="hljs-number">0</span></span><br><span class="line">balance:-<span class="hljs-number">100</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">잔고(balance)가 임의의 출금금액(money)보다 클 경우에만 출금하도록 되어있는데 잔고에 -<span class="hljs-number">100</span>이 나왔음.  </span><br><span class="line"><span class="hljs-keyword">if</span>조건문 통과하고 출금직전에 다른쓰레드가 끼어들어서 먼저 출금했기때문이다.  </span><br><span class="line"><span class="hljs-keyword">if</span>문과 출금하는 기능은 하나로 <span class="hljs-keyword">synchronized</span>되어야 한다.  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(balance&gt;=money)&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span>&#123; Thread.sleep(<span class="hljs-number">1000</span>);&#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">        balance -=money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="hljs-comment">//withdraw</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(balance&gt;=money)&#123;</span><br><span class="line">            <span class="hljs-keyword">try</span>&#123; Thread.sleep(<span class="hljs-number">1000</span>);&#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">            balance -=money;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="hljs-comment">//withdraw</span></span><br></pre></td></tr></table></figure></p><h3 id="9-2-wait-과-notify"><a href="#9-2-wait-과-notify" class="headerlink" title="9.2 wait()과 notify()"></a>9.2 wait()과 notify()</h3><p> 쓰레드를 동기화 할때 효율을 높이기 위해 사용할 수 있다.<br> 한쓰레드가 lock걸려 다른 쓰레드는 lock이 풀릴때까지 기다려야 되는 상황이 있음.<br> 쓰레드에 lock을 걸는것 대신에 wait()을 호출해서 다른 쓰레드에 제어권을 넘겨주고 대기상태로 기다리다가 다른쓰레드에 의해 notify()가 호출되면 다시 실행상태가 되도록 함<br> wait()과 notify()는  Object클래스에서 정의되서 모든 객체에서 호출이 가능함.<br> 동기화 블록 내에서만 사용가능. 쓰레드가 wait()을 호출하면 그때까지 걸어 놓은 lock을 풀고 대기실에 들어가기 됨.<br> notify()는 객체의 wating pool에 있는 쓰레드 중 하나만 깨움.</p><ul><li>wait(), notify(), notifyAll()<ul><li>Object에 정의 되어있다.</li><li>동기화 블록(synchronized)내에서만 사용할 수 있다. </li><li>보다 효율적인 동기화를 가능하게 한다.  </li></ul></li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> balance =<span class="hljs-number">1000</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(balance&gt;=money)&#123;</span><br><span class="line">            <span class="hljs-keyword">try</span>&#123; </span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">            balance -=money;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="hljs-comment">//withdraw</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">desposit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span></span>&#123;</span><br><span class="line">    balance += money;</span><br><span class="line">    notify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-프로세스와-쓰레드&quot;&gt;&lt;a href=&quot;#1-프로세스와-쓰레드&quot; class=&quot;headerlink&quot; title=&quot;1. 프로세스와 쓰레드&quot;&gt;&lt;/a&gt;1. 프로세스와 쓰레드&lt;/h2&gt;&lt;p&gt;프로세스(process)는 간단하게 말하면 실행중인 프로그
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[CH7. 객체지향프로그래밍2] 추상클래스</title>
    <link href="https://eunii.github.io/2019/05/07/tec/java/java9/"/>
    <id>https://eunii.github.io/2019/05/07/tec/java/java9/</id>
    <published>2019-05-07T11:40:25.000Z</published>
    <updated>2019-05-13T07:17:47.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="6-추상클래스"><a href="#6-추상클래스" class="headerlink" title="6. 추상클래스"></a>6. 추상클래스</h2><h3 id="6-1-추상클래스란"><a href="#6-1-추상클래스란" class="headerlink" title="6.1 추상클래스란?"></a>6.1 추상클래스란?</h3><p>미완성된 설계도. 미완성 메서드(추상메서드)를 포함하고 있는 클래스.<br>추상 클래스는 상속을 통해 자손클래스에 의해서만 완성될 수 있음.<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 클래스이름</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-2-추상메서드"><a href="#6-2-추상메서드" class="headerlink" title="6.2 추상메서드"></a>6.2 추상메서드</h3><p>메서드 선언부와 구현부 중 선언부만 작성한것.<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">abstract</span> 리턴타입 메서드이름();</span><br></pre></td></tr></table></figure></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Player</span></span>&#123;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span></span>;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AudioPlayeer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Player</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">// 기능 구현   </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//기능 구현</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractPlayer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Player</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// 기능 구현</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-추상클래스의-작성"><a href="#6-3-추상클래스의-작성" class="headerlink" title="6.3 추상클래스의 작성"></a>6.3 추상클래스의 작성</h3><ul><li>추상 : 낱낱의 구체적 표상이나 개념에서 공통된 성질을 뽑아 이를 일반적인 개념으로 파악하는 정신 작용.  </li><li>추상화 : 클래스간의 공통점을 찾아내서 공통의 조상을 만드는 작업.</li><li>구체화 : 상속을 통해 클래스를 구현, 확장하는 작업</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Player</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> pause;</span><br><span class="line">    <span class="hljs-keyword">int</span> currentPos;</span><br><span class="line">    </span><br><span class="line">    Player()&#123;</span><br><span class="line">        pause = <span class="hljs-keyword">false</span>;</span><br><span class="line">        currentPos = <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span></span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        play(currentPos);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pause</span> <span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(pause)&#123;</span><br><span class="line">            pause = <span class="hljs-keyword">false</span>;</span><br><span class="line">        &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            pause = <span class="hljs-keyword">true</span>;</span><br><span class="line">            stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 Player추상클래스를 조상으로 하는 CDPlayer<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDPlayer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">player</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(<span class="hljs-keyword">int</span> currentPos)</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//기능 구현</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//기능 구현</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">int</span> currentTrace;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">nextTrace</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        currentTrace++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preTrace</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(currentTrace&gt;<span class="hljs-number">1</span>)&#123;</span><br><span class="line">            currentTrace--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>추상메서드로 안 만들고 구현부를 빈 상태로 두어 자손 클래스에서 오버라이드해서 사용할 수 있지만<br>추상메서드로하면 필수로 구연해야 한다.  </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Marine</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x,y;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stimPack</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x,y;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">changeMode</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dropship</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x,y;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">load</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unload</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>위에서 공통부분을 뽑아내서 추상클래스 Unit을 만들어 다시 구현.<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Unit</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x,y;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Marine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stimPack</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">changeMode</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dropship</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">load</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unload</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>위와같이 구현하면 아래처럼 Unit으로 배열로 다룰 수 있음<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Unit[] grop = <span class="hljs-keyword">new</span> Unit[<span class="hljs-number">4</span>];</span><br><span class="line">group[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> Marine();</span><br><span class="line">group[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Tank();</span><br><span class="line">group[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> Marine();</span><br><span class="line">group[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> Dropship();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;6-추상클래스&quot;&gt;&lt;a href=&quot;#6-추상클래스&quot; class=&quot;headerlink&quot; title=&quot;6. 추상클래스&quot;&gt;&lt;/a&gt;6. 추상클래스&lt;/h2&gt;&lt;h3 id=&quot;6-1-추상클래스란&quot;&gt;&lt;a href=&quot;#6-1-추상클래스란&quot; class=&quot;he
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[CH7. 객체지향프로그래밍2] 인터페이스의 </title>
    <link href="https://eunii.github.io/2019/05/07/tec/java/java10/"/>
    <id>https://eunii.github.io/2019/05/07/tec/java/java10/</id>
    <published>2019-05-07T11:40:25.000Z</published>
    <updated>2019-05-13T07:17:02.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="7-인터페이스"><a href="#7-인터페이스" class="headerlink" title="7. 인터페이스"></a>7. 인터페이스</h2><h3 id="7-1-인터페이스란"><a href="#7-1-인터페이스란" class="headerlink" title="7.1 인터페이스란?"></a>7.1 인터페이스란?</h3><p>인터페이스는 일종의 추상클래스.<br>추상클래스처럼 추상메서드를 갖지만 추상클래스보다 추상화 정도가 높아서<br>추상클래스와 달리 몸통을 갖춘 일반 메서드 또는 멤버변수를 구성원으로 가질 수 없다. </p><h3 id="7-2-인터페이스의-작성"><a href="#7-2-인터페이스의-작성" class="headerlink" title="7.2 인터페이스의 작성"></a>7.2 인터페이스의 작성</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> 인터페이스이름</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> 타입 상수이름 = 값;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> 메서드이름(매개변수 목록);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>모든 멤버변수는 public static final 이어야 하며, 이를 생략할 수 있다.</li><li>모든 메서드는 public abstract 이어야하며, 이를 생략할 수 있다.  </li></ul><h3 id="7-3-인터페이스의-상속"><a href="#7-3-인터페이스의-상속" class="headerlink" title="7.3 인터페이스의 상속"></a>7.3 인터페이스의 상속</h3><p>인터페이스는 인터페이스로부터만 상속받을 수 있으며, 클래스와는 달리 다중상속이 가능하다.  </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Attactable</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(Unit u)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Fightable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Movable</span>, <span class="hljs-title">Attackable</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-인터페이스의-구현"><a href="#7-4-인터페이스의-구현" class="headerlink" title="7.4 인터페이스의 구현"></a>7.4 인터페이스의 구현</h3><p>그 자체로는 인스턴스를 생성할 수 없음. 클래스에서 implements를 사용하여 구현함.  </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> 클래스 이름 <span class="hljs-keyword">implements</span> 인터페이스이름</span>&#123;</span><br><span class="line">    <span class="hljs-comment">//인터페이스에 정의된 추상메서드 구현</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Figther</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Fightable</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//기능 구현</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attack</span><span class="hljs-params">(Unit u)</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//기능 구현</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>구현하는 인터페이스의 메서드 중 일부만 구현하면 추상메서드로 선언되어야 함.<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fighter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Figtable</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//기능 구현</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>상속과 구현을 동시에 할 수 있음<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Figther</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Unit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Figthable</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//기능 구현</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attack</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-comment">//기능 구현</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-5-인터페이스를-이용한-다중상속"><a href="#7-5-인터페이스를-이용한-다중상속" class="headerlink" title="7.5 인터페이스를 이용한 다중상속"></a>7.5 인터페이스를 이용한 다중상속</h3><p>자바에서는 다중상속을 허용하지 않아서 인터페이스로 다중상속을 할 수는 있지만 거의 하지 않는다.<br>두개의 클래스를 상속받아야 하는 상황이라면 두 클래스중 비중이 높은걸 상속받고 나머지는 클래스 내부 멤버로 포함시키는 방법.<br>필요한 부분을 뽑아 인터페이슬슬 만든 후 구현함.</p><h3 id="7-6-인터페이스를-이용한-다형성"><a href="#7-6-인터페이스를-이용한-다형성" class="headerlink" title="7.6 인터페이스를 이용한 다형성"></a>7.6 인터페이스를 이용한 다형성</h3><p>인터페이스 타입의 참조변수로 이를 구현한 클래스의 인스턴스를 참조할 수있고 형변환도 가능함.<br>인터페이스 : Fightable, 클래스 : Fighter(implements Figtable)일때<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Fightable f = (Fightable) <span class="hljs-keyword">new</span> Figther();</span><br><span class="line">Fightable f = <span class="hljs-keyword">new</span> Fighter();</span><br></pre></td></tr></table></figure></p><p>인터페이스는 매게변수 타입으로도 쓸 수 있음<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">viod <span class="hljs-title">attack</span><span class="hljs-params">(Figtable f)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>메서드 호출 시 해당 인터페이스를 구현한 클래스의 인스턴스를 매개변수로 제공해야한다.<br>여기서는 new Figther();<br>리턴타입으로 인터페이스 타입을 지정하는것도 가능함.<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">Fightable <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Fighter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-7-인터페이스의-장점"><a href="#7-7-인터페이스의-장점" class="headerlink" title="7.7 인터페이스의 장점"></a>7.7 인터페이스의 장점</h3><ul><li>개발시간을 단축시킬 수 있다. </li><li>표준화가 가능하다. </li><li>서로 관계업는 클래스들에게 관계를 맺어줄 수 있다.</li><li>독립적인 프로그래밍이 가능하다.</li></ul><h3 id="7-8-인터페이스의-이해"><a href="#7-8-인터페이스의-이해" class="headerlink" title="7.8 인터페이스의 이해"></a>7.8 인터페이스의 이해</h3><ul><li>클래스를 사용하는 쪽과 클래스를 제공하는 쪽이 있다.</li><li>메서드 사용하느 쪽에서는 사용하려는 메서드의 선언부만 알면된다. </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;7-인터페이스&quot;&gt;&lt;a href=&quot;#7-인터페이스&quot; class=&quot;headerlink&quot; title=&quot;7. 인터페이스&quot;&gt;&lt;/a&gt;7. 인터페이스&lt;/h2&gt;&lt;h3 id=&quot;7-1-인터페이스란&quot;&gt;&lt;a href=&quot;#7-1-인터페이스란&quot; class=&quot;he
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[CH7. 객체지향프로그래밍2] 다형성</title>
    <link href="https://eunii.github.io/2019/05/06/tec/java/java8/"/>
    <id>https://eunii.github.io/2019/05/06/tec/java/java8/</id>
    <published>2019-05-06T11:40:25.000Z</published>
    <updated>2019-05-13T07:18:51.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5-다형성"><a href="#5-다형성" class="headerlink" title="5. 다형성"></a>5. 다형성</h2><h3 id="5-1-다형성이란"><a href="#5-1-다형성이란" class="headerlink" title="5.1 다형성이란?"></a>5.1 다형성이란?</h3><p>여러가지 형태를 가질 수 있는 능력.<br>조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조할 수 있도록 함.<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tv</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> power;</span><br><span class="line">    <span class="hljs-keyword">int</span> channel;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">power</span><span class="hljs-params">()</span></span>&#123;power = !power;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">channelUp</span><span class="hljs-params">()</span></span>&#123;++channel;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">channelDown</span><span class="hljs-params">()</span></span>&#123;--channel;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CaptionTv</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Tv</span></span>&#123;</span><br><span class="line">    String text;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">caption</span><span class="hljs-params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tv t = <span class="hljs-keyword">new</span> Tv();</span><br><span class="line">CaptionTv c = <span class="hljs-keyword">new</span> CaptionTv();</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tv t = <span class="hljs-keyword">new</span> CaptionTv();</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CaptionTv c = <span class="hljs-keyword">new</span> CaptionTv();</span><br><span class="line">Tv t = <span class="hljs-keyword">new</span> CaptionTv();</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//이렇게는 불가능함</span></span><br><span class="line">CaptionTv c = <span class="hljs-keyword">new</span> Tv();</span><br></pre></td></tr></table></figure><p>조상 타입의 참조변수로 자손타입의 인스턴스를 참조할 수 있다.<br>반대로 자손타입의 참조변수로 조상타입의 인스턴스를 참조할 수는 없다.  </p><h3 id="5-2-참조변수의-형병환"><a href="#5-2-참조변수의-형병환" class="headerlink" title="5.2 참조변수의 형병환"></a>5.2 참조변수의 형병환</h3><p>자손타입-&gt;조상타입(up-castion) : 형변환 생략 가능<br>자손타입&lt;-조상타입(Down-castion) : 형변환 생략 불가</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span></span>&#123;</span><br><span class="line">    String color;</span><br><span class="line">    <span class="hljs-keyword">int</span> door;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">drive</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"drive, Brrr~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"stop!!"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FireEngine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Car</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">water</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"water!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ambulance</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Car</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">siren</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"siren~~!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FireEngine타입과 Ambulance타입은 서로 형변환 불가능<br>Car 타입과 FireEngine 타입 형변환 예시<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Car car = <span class="hljs-keyword">null</span>;</span><br><span class="line">FireEngine fe = <span class="hljs-keyword">new</span> FireEngine();</span><br><span class="line">FireEngine fe2 = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line">car = fe;  <span class="hljs-comment">//car = (Car) fe; 형변환이 생략된 형태</span></span><br><span class="line">fe2 = (FireEngine) car; <span class="hljs-comment">//형변환 생략 불가.</span></span><br></pre></td></tr></table></figure></p><p>아래 예제는 컴파일에러는 발생하지 않지만 실행시 에러가 발생함.<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CastingTest2</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;</span><br><span class="line">        Car car = <span class="hljs-keyword">new</span> Car();</span><br><span class="line">        Car car2 = <span class="hljs-keyword">null</span>;</span><br><span class="line">        FireEngine fe = <span class="hljs-keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        car.drive();</span><br><span class="line">        fe = (FireEngine) car; <span class="hljs-comment">//실행시 여기서 에러 발생</span></span><br><span class="line">        fe.drive();</span><br><span class="line">        car2 = fe;</span><br><span class="line">        car2.drive();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">car가 Car타입의 인스턴스여서 FireEngine을 받을 수 없음.</span><br><span class="line">- 캐스트연산자를 사용하면 서로 상속관계에 있는 클래스 타입의 참조변수간의 형변환은 양방향으로 자유롭게 수행될 수 있다.  </span><br><span class="line">그러나 참조변수가 참조하고 있는 인스턴스의 자손타입으로 형변환을 하는것은 허용되지 않는다.  </span><br><span class="line"></span><br><span class="line">### 5.3 instanceof연산자  </span><br><span class="line">참조변수가 참조하는 인스턴스 실제타입을 확인하기 위해 <span class="hljs-keyword">instanceof</span>연산자 사용.  </span><br><span class="line">주로 조건문에사용. </span><br><span class="line">* 값이 ull인 참조변수에 대해 <span class="hljs-keyword">instanceof</span>연산을 하면 <span class="hljs-keyword">false</span>나옴.  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">(Car c)</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(c <span class="hljs-keyword">instanceof</span> FireEngine)&#123;</span><br><span class="line">        FireEngine fe = (FireEngind) c;</span><br><span class="line">        fe.water();</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( c instance of Ambulance)&#123;</span><br><span class="line">        Ambulance a = (Ambulance) c;</span><br><span class="line">        a.siren();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InstanceOfTest</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String args[])</span></span>&#123;</span><br><span class="line">        FireEngine fe = <span class="hljs-keyword">new</span> FireEngine();</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span>(fe <span class="hljs-keyword">instanceof</span> FireEngine)&#123;</span><br><span class="line">            System.out.println(<span class="hljs-string">"FireEngine instance"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span>( fe <span class="hljs-keyword">instanceof</span> Car)&#123;</span><br><span class="line">            System.out.println(<span class="hljs-string">"Car instance"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span>( fe <span class="hljs-keyword">instanceof</span> Object)&#123;</span><br><span class="line">            System.out.println(<span class="hljs-string">"Object instance"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드를 실행할 경우<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FireEngine instance</span><br><span class="line">Car instance</span><br><span class="line">Object instance</span><br></pre></td></tr></table></figure></p><h3 id="5-4-참조변수와-인스턴스의-연결"><a href="#5-4-참조변수와-인스턴스의-연결" class="headerlink" title="5.4 참조변수와 인스턴스의 연결"></a>5.4 참조변수와 인스턴스의 연결</h3><p>멤버변수가 조상클래스와 자손클래스에 중복으로 정의된 경우, 조상 타입의 참조변수를 사용했을 때는 조상클래스에 선언된 멤버변수가 사용되고, 지손타입의 참조변수를 사용했을 때는 자손틀래스에 선언된 멤버변수가 사용된다.  </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BindingTest</span></span>&#123;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span><br><span class="line">            Parent p = <span class="hljs-keyword">new</span> Child();</span><br><span class="line">            Child c = <span class="hljs-keyword">new</span> Child();</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="hljs-string">"p.x ="</span> + p.x);</span><br><span class="line">            p.method();</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="hljs-string">"c.x= "</span>+c.x);</span><br><span class="line">            c.method();</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x = <span class="hljs-number">100</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Parent Method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x = <span class="hljs-number">200</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="hljs-string">"Child Method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실행결과<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p.x=<span class="hljs-number">100</span></span><br><span class="line">Child Method</span><br><span class="line">c.x=<span class="hljs-number">200</span></span><br><span class="line">Child Method</span><br></pre></td></tr></table></figure></p><h3 id="5-5-매개변수의-다형성"><a href="#5-5-매개변수의-다형성" class="headerlink" title="5.5 매개변수의 다형성"></a>5.5 매개변수의 다형성</h3><h3 id="5-6-여러-종류의-객체를-하나의-배열로-다루기"><a href="#5-6-여러-종류의-객체를-하나의-배열로-다루기" class="headerlink" title="5.6 여러 종류의 객체를 하나의 배열로 다루기"></a>5.6 여러 종류의 객체를 하나의 배열로 다루기</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;5-다형성&quot;&gt;&lt;a href=&quot;#5-다형성&quot; class=&quot;headerlink&quot; title=&quot;5. 다형성&quot;&gt;&lt;/a&gt;5. 다형성&lt;/h2&gt;&lt;h3 id=&quot;5-1-다형성이란&quot;&gt;&lt;a href=&quot;#5-1-다형성이란&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[CH7. 객체지향프로그래밍2] Package와 import</title>
    <link href="https://eunii.github.io/2019/05/05/tec/java/java7/"/>
    <id>https://eunii.github.io/2019/05/05/tec/java/java7/</id>
    <published>2019-05-05T11:40:25.000Z</published>
    <updated>2019-05-13T07:18:51.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-Package와-import"><a href="#3-Package와-import" class="headerlink" title="3 Package와 import"></a>3 Package와 import</h2><h3 id="3-1-패키지-package"><a href="#3-1-패키지-package" class="headerlink" title="3.1 패키지(package)"></a>3.1 패키지(package)</h3><p>패키지란, 클래스의 묶음. 물리적으로 하나의 디렉터리임.<br>ex) java.lang.String은 java/lang 디렉터리에 위치한 Strig 클래스이다.  </p><ul><li>하나의 소스파일에는 첫번째 문장으로 단 한번의 패키지 선언만을 허용한다.</li><li>모든 클래스는 반드시 하나의 패키지에 속해야 된다.</li><li>패키지는 점(.)을 구분자로 하여 계층구조로 구성할 수 있다.</li><li>패키지는 물리적으로 클래스 파일(.class)을 포함하는 하나의 디렉터리다.  </li></ul><h3 id="3-2-패키지의-선언"><a href="#3-2-패키지의-선언" class="headerlink" title="3.2 패키지의 선언"></a>3.2 패키지의 선언</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> 패키지명;</span><br></pre></td></tr></table></figure><h3 id="3-3-import-문"><a href="#3-3-import-문" class="headerlink" title="3.3 import 문"></a>3.3 import 문</h3><p>import 문은 컴파일러에게 소스파일에 사용된 클래스의 패키지에 대한 정보를 제공함.  </p><h3 id="3-4-import문의-선언"><a href="#3-4-import문의-선언" class="headerlink" title="3.4 import문의 선언"></a>3.4 import문의 선언</h3><p>일반적인 소스 파일(*.java)의 구성은 다음의 순서로 되어있다.  </p><ol><li>package문</li><li>import문</li><li>클래스선언  </li></ol><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> 패키지명.클래스명;</span><br><span class="line"><span class="hljs-keyword">import</span> 패키지명.*;</span><br></pre></td></tr></table></figure><h2 id="4-제어자"><a href="#4-제어자" class="headerlink" title="4 제어자"></a>4 제어자</h2><h3 id="4-1-제어자란"><a href="#4-1-제어자란" class="headerlink" title="4.1 제어자란?"></a>4.1 제어자란?</h3><p>클래스, 변수 또는 메서드의 선언부에 함께 사용되어 부가적인 의미를 부여함</p><ul><li>접근제어자 - public, protected, default, private</li><li>그외 - static, final, abstract, native, transient, synchronized, volatile, strictfp<br>제어자는 클래스, 멤버변수, 메서드에 주로 사용됨.<br>하나의 대상에 여러 제어자를 조합하는 것은 가능하나 접근제어자는 하나만 쓸 수 있다.  </li></ul><h3 id="4-2-static-클래스의-공통적인"><a href="#4-2-static-클래스의-공통적인" class="headerlink" title="4.2 static - 클래스의, 공통적인"></a>4.2 static - 클래스의, 공통적인</h3><ul><li>static 이 사용될 수 있는곳 : 멤머변수, 메서드, 초기화 블럭  </li></ul><p>*static  </p><table><thead><tr><th>대상</th><th>의미</th></tr></thead><tbody><tr><td>멤버변수</td><td>- 모든 인스턴스에 공통적으로 사용되는 클래스 변수가 된다.<br> - 클래스변수는 인스턴스를 생성하지 않고도 가능하다.<br> - 클래스가 메모리에 로드될 때 생성된다.</td></tr><tr><td>메서드</td><td>- 인스턴스를 생성하지 않고도 호룰이 가능한 static 메서드가 된다. <br> static 메서드 내에선 인스턴스 멤버들을 직접 사용할 수 없다.  </td></tr></tbody></table><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticTest</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> width =<span class="hljs-number">200</span>;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> height = <span class="hljs-number">120</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">static</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// static 변수의 초기화 수행</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> a&gt;b?a:b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-final-마지막의-변경될-수-없는"><a href="#4-3-final-마지막의-변경될-수-없는" class="headerlink" title="4.3 final - 마지막의, 변경될 수 없는"></a>4.3 final - 마지막의, 변경될 수 없는</h3><p>final이 사용될 수 있는 곳 - 클래스, 메서드, 멤버변수, 지역변수<br>*final  </p><table><thead><tr><th>대상</th><th>의미</th></tr></thead><tbody><tr><td>클래스</td><td>변경될 수 없는 클래스, 확장될 수 없는 클래스가 된다. <br> 그래서 final로 지정된 클래스는 다른 클래스의 조상이 될 수 없음</td></tr><tr><td>메서드</td><td>변경될 수 없는 메서드, final로 지정된 메서드는 오버라이딩을 통해 재정의 될 수 없다.</td></tr><tr><td>멤버변수/지역변수</td><td>변수 앞에 final이 붙으면 값을 변경할 수 없는 상수가 된다.</td></tr></tbody></table><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FinalTest</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_SIZE = <span class="hljs-number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getMaxSize</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LV = MAX_SIZE;</span><br><span class="line">        <span class="hljs-keyword">return</span> MAX_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-생성자를-이용한-final-멤버변수-초기화"><a href="#4-4-생성자를-이용한-final-멤버변수-초기화" class="headerlink" title="4.4 생성자를 이용한 final 멤버변수 초기화"></a>4.4 생성자를 이용한 final 멤버변수 초기화</h3><p>final 붙은 변수는 상수임으로 일반적으로 선언과 초기화를 동시에 하지만, 인스턴스 변수의 경우 생성자에서 초기화 되도록 할 수 있다.<br>각 인스턴스마다 final 이 붙은 멤버 변수가 다른 값을 갖도록 하는 것이 가능하다.<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Card</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> NUMBER;</span><br><span class="line">    <span class="hljs-keyword">final</span> String KIND;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> width = <span class="hljs-number">100</span>;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> height =<span class="hljs-number">250</span>;</span><br><span class="line">    </span><br><span class="line">    Card(String kind, <span class="hljs-keyword">int</span> num)&#123;</span><br><span class="line">        KIND = kind;</span><br><span class="line">        NUMBER = num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Card()&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>(<span class="hljs-string">"HEART"</span>,<span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-5-abstract-추상의-미완성의"><a href="#4-5-abstract-추상의-미완성의" class="headerlink" title="4.5 abstract - 추상의, 미완성의"></a>4.5 abstract - 추상의, 미완성의</h3><p>미완성의 의미를 가지고 있다.<br>메서드의 선언부만 작성하고 실제 수행내용은 구현하지 않은 추상 메서드를 선언하는데 사용함.  </p><ul><li>abstract가 사용될 수 있는 곳 - 클래스, 메서드</li></ul><p>*abstract    </p><table><thead><tr><th>대상</th><th>의미</th></tr></thead><tbody><tr><td>클래스</td><td>클래스 내에 추상메서드가 선언되어 있음을 의미한다.</td></tr><tr><td>메서드</td><td>선언부만 작성하고 구현부는 작성하지 않은 추상메서드임을 알린다.</td></tr></tbody></table><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractTest</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-접근제어자"><a href="#4-6-접근제어자" class="headerlink" title="4.6 접근제어자"></a>4.6 접근제어자</h3><ul><li>멤버 또는 클래스에 사용되어 외부에서 접근하지 못하게 제한하는 역할.</li><li>접근 제어자가 사용될 수 있는곳- 클래스, 멤버변수, 메서드, 생성자<ul><li>private : 같은 클래스 내에서만 접근이 가능하다.</li><li>default : 같은 패키지 내에서만 접근이 가은하다.</li><li>protected : 같은 패키지 내에서, 그리고 다른 패키지의 자손 클래스에서 접근이 가능하다.</li><li>public : 접근 제한이 없다.</li></ul></li></ul><h3 id="4-7-접근-제어자를-이용한-캡슐화"><a href="#4-7-접근-제어자를-이용한-캡슐화" class="headerlink" title="4.7 접근 제어자를 이용한 캡슐화"></a>4.7 접근 제어자를 이용한 캡슐화</h3><p>접근 제어자 사용하는 이유: </p><ul><li>외부로 부터 데이터를 보호하기 위해</li><li>외부에는 불필요한 내부적으로만 사용되는 부분을 감추기 위해</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Time</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> hour;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> minute;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> second;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getHour</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> hour;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHour</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hour)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(hour&lt;<span class="hljs-number">0</span> || hour &gt; <span class="hljs-number">23</span>)&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">this</span>.hour = hour;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMinute</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> minute;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMinute</span><span class="hljs-params">(<span class="hljs-keyword">int</span> min)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(min&lt;<span class="hljs-number">0</span> || hour &gt; <span class="hljs-number">59</span>)&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">this</span>.minute = min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSecond</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> second;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSecond</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sec)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(sec &lt;<span class="hljs-number">0</span> || sec &gt; <span class="hljs-number">59</span>)&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">this</span>.second = sec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-9-제어자의-조합"><a href="#4-9-제어자의-조합" class="headerlink" title="4.9 제어자의 조합"></a>4.9 제어자의 조합</h3><table><thead><tr><th>대상</th><th>사용가능한 제어자</th></tr></thead><tbody><tr><td>클래스</td><td>public, default, final, abstract</td></tr><tr><td>메서드</td><td>모든 접근제어자, final, abstract, static</td></tr><tr><td>멤버변수</td><td>모든 접근제어자, final, static</td></tr><tr><td>지역변수</td><td>final</td></tr></tbody></table><ol><li>메서드에 static과 abstract를 함께 사용할 수 없다.</li><li>클래스에 abstract와 final을 동시에 사용할 수 없다.</li><li>abstract메서드의 접근제어자가 private일 수 없다.</li><li>메서드에 private와 final을 같이 사용할 필요는 없다.(둘중 하나만 사용해도 충분)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-Package와-import&quot;&gt;&lt;a href=&quot;#3-Package와-import&quot; class=&quot;headerlink&quot; title=&quot;3 Package와 import&quot;&gt;&lt;/a&gt;3 Package와 import&lt;/h2&gt;&lt;h3 id=&quot;3-1-패
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[CH7. 객체지향프로그래밍2] 오버라이딩</title>
    <link href="https://eunii.github.io/2019/05/04/tec/java/java6/"/>
    <id>https://eunii.github.io/2019/05/04/tec/java/java6/</id>
    <published>2019-05-04T11:40:25.000Z</published>
    <updated>2019-05-13T07:21:05.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-오버라이딩"><a href="#2-오버라이딩" class="headerlink" title="2. 오버라이딩"></a>2. 오버라이딩</h2><h3 id="2-1-오버라이딩이란"><a href="#2-1-오버라이딩이란" class="headerlink" title="2.1 오버라이딩이란?"></a>2.1 오버라이딩이란?</h3><p>조상 클래스부터 상속받은 메서드의 내용을 변경하는것<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x;</span><br><span class="line">    <span class="hljs-keyword">int</span> y;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function">String <span class="hljs-title">getLocation</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"x : "</span>+x+<span class="hljs-string">", y : "</span> + y;</span><br><span class="line">    &#125;</span><br><span class="line">|</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point3D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Point</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> z;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function">String <span class="hljs-title">getLocation</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"x : "</span>+x+<span class="hljs-string">", y : "</span> + y+<span class="hljs-string">", z : "</span>+z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-2-오버라이딩의-조건"><a href="#2-2-오버라이딩의-조건" class="headerlink" title="2.2 오버라이딩의 조건"></a>2.2 오버라이딩의 조건</h3><p>메서드 선언부는 조상의 것과 완전 일치해야함.<br>자손 클래스에서 오버라이딩하는 메서드는 조상 클래스의 메서드와</p><ul><li>이름이 같아야 한다.</li><li>매개변수가 같아야 한다.</li><li>리턴 타입이 같아야 한다.</li></ul><ol><li>접근제어자는 조상 클래스의 메서드보다 좁은 범위로 변경할 수 없다.<br>ex) 조상클래스의 메서드의 접근 제어자가 protected라면<br>자식클래스에서 오버라이딩 하는 메서드의 접근 제어자는 protected나 public 이어야함.  </li><li>조상 클래스의 메서드보다 많은 수의 예외를 선언할 수 없다.</li></ol><ul><li>조상 클래스의 메서드를 자손클래스에서 오버라이딩할 때  <ol><li>접근제어자를 조상클래스의 메서드보다 좁은 범위로 할 수 없다.</li><li>예외는 조상 클래스의 메서드보다 많이 선언할 수 없다.</li><li>인스턴스메서드를 static메서드로 또는 그 반대로 변경할 수 없다.</li></ol></li></ul><h3 id="2-3-오버로딩-VS-오버라이딩"><a href="#2-3-오버로딩-VS-오버라이딩" class="headerlink" title="2.3 오버로딩 VS 오버라이딩"></a>2.3 오버로딩 VS 오버라이딩</h3><ul><li>오버로딩(overloading) : 기존에 없는 메서드를 정의하는것(new)</li><li>오버라이딩(overriding) : 상속받은 메서드의 내용을 변경하는 것(change, modify)</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parentMethod</span><span class="hljs-params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chile</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parentMethod</span><span class="hljs-params">()</span></span>&#123;&#125; <span class="hljs-comment">// 오버라이딩;</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parentMethod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;&#125; <span class="hljs-comment">//오버로딩</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">childMethod</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">childMethod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;&#125; <span class="hljs-comment">//오버로딩</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">childMethod</span><span class="hljs-params">()</span></span>&#123;&#125;<span class="hljs-comment">// 에러 함수가 중복됨</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-super"><a href="#2-4-super" class="headerlink" title="2.4 super"></a>2.4 super</h3><p>자손클래스에서 조상 클래스로부터 상속받은 멤버를 참조하는데 사용되는 참조변수.<br>조상클래스의 멤버와 자손클래스의 멤버가 중복 정의되서 구별해야 되지 않는 상황이면 super대신 this를 써도 됨.<br>static 메서드(클래스 메서드)에서는 사용 할 수 없다.</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SuperTest</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;</span><br><span class="line">        Child c = <span class="hljs-keyword">new</span> Child();</span><br><span class="line">        c.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x =<span class="hljs-number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x =<span class="hljs-number">20</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        system.out.println(<span class="hljs-string">"x="</span>+x);  </span><br><span class="line">        system.out.println(<span class="hljs-string">"this.x="</span>+<span class="hljs-keyword">this</span>.x);</span><br><span class="line">        system.out.println(<span class="hljs-string">"super.x="</span>+<span class="hljs-keyword">super</span>.x);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실행 결과<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="hljs-number">20</span></span><br><span class="line"><span class="hljs-keyword">this</span>.x=<span class="hljs-number">20</span>;</span><br><span class="line"><span class="hljs-keyword">super</span>.x=<span class="hljs-number">10</span>;</span><br></pre></td></tr></table></figure></p><h3 id="2-5-super-조상클래스의-생성자"><a href="#2-5-super-조상클래스의-생성자" class="headerlink" title="2.5 super() - 조상클래스의 생성자"></a>2.5 super() - 조상클래스의 생성자</h3><p>super()는 조상클래스의 생성자를 호출하는 생성자이다.<br>Object클래스를 제외한 모든 클래스의 생성자 첫 줄에는 생성자(같은 클래스의 다른 생성자 또는 조상의 생성자)를 호출 해야함.<br>그렇지 않으면 컴파일러가 super(); 를 자동으로 첫줄에 삽입.  </p><ol><li>클래스 - 어떤 클래스의 인스턴스를 생성할것인가?</li><li>생성자 - 선택한 클래스의 어떤 생성자를 이용해서 인스턴스를 생성할 것인가?</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2-오버라이딩&quot;&gt;&lt;a href=&quot;#2-오버라이딩&quot; class=&quot;headerlink&quot; title=&quot;2. 오버라이딩&quot;&gt;&lt;/a&gt;2. 오버라이딩&lt;/h2&gt;&lt;h3 id=&quot;2-1-오버라이딩이란&quot;&gt;&lt;a href=&quot;#2-1-오버라이딩이란&quot; class=&quot;
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[CH6. 객체지향프로그래밍1 ] 변수의 초기화</title>
    <link href="https://eunii.github.io/2019/05/03/tec/java/java4/"/>
    <id>https://eunii.github.io/2019/05/03/tec/java/java4/</id>
    <published>2019-05-03T11:40:25.000Z</published>
    <updated>2019-05-13T07:21:05.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="6-변수의-초기화"><a href="#6-변수의-초기화" class="headerlink" title="6. 변수의 초기화"></a>6. 변수의 초기화</h2><h3 id="6-1-변수의-초기화"><a href="#6-1-변수의-초기화" class="headerlink" title="6.1 변수의 초기화"></a>6.1 변수의 초기화</h3><p>변수를 선언하고 처읍으로 값을 저장하는것.<br>가능하면 선언과 동시에 초기화 하는게 바람직.  </p><ul><li>멤버변수(클래스변수와 인스턴스 변수)와 배열의 초기화는 선택적이지만,<br>지역변수는 반드시 초기화 후 사용해야함.</li></ul><p>멤버변수 추기화 방법</p><ol><li>명시적 초기화</li><li>생성자</li><li>초기화 블럭<ul><li>인스턴스 초기화 블럭: 인스턴스변수를 초기화 하는데 사용</li><li>클래스 초기화 블럭: 클래스를 초기화 하는데 사용  </li></ul></li></ol><h3 id="6-2-명시적-초기화"><a href="#6-2-명시적-초기화" class="headerlink" title="6.2 명시적 초기화"></a>6.2 명시적 초기화</h3><p> 변수 선언과 동시에 초기화 하는것<br> <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span></span>&#123;</span><br><span class="line">   <span class="hljs-keyword">int</span> door= <span class="hljs-number">4</span>;     <span class="hljs-comment">//기본형 변수 초기화</span></span><br><span class="line">   Engine = <span class="hljs-keyword">new</span> Engine();  <span class="hljs-comment">// 참조형 변수 초기화</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-3-초기화-블럭"><a href="#6-3-초기화-블럭" class="headerlink" title="6. 3 초기화 블럭"></a>6. 3 초기화 블럭</h3><ul><li>초기화 블럭 - 클래스변수의 복잡한 초기화에 사용</li><li>인스턴스 초기화 블럭 - 인스턴스 변수의 복잡한 초기화에 사용</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InitBlock</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">static</span>&#123;<span class="hljs-comment">/* 클래스 초기화 블럭*/</span>&#125;</span><br><span class="line">    &#123;<span class="hljs-comment">/*인스턴스 초기화 블럭 */</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클래스 초기화 블럭은 클래스가 메모리에 올라가 갈 때 한번만 수행.<br>인스턴스 초기화는 인스턴스 생성될때 생성자보다 먼저 수행됨.</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Car()&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"Car인스턴스가 생성되었습니다."</span>);</span><br><span class="line">    color= <span class="hljs-string">"withe"</span>;</span><br><span class="line">    gearType=<span class="hljs-string">"auto"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Car(String color, String gearType)&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"Car인스턴스가 생성되었습니다."</span>);</span><br><span class="line">    <span class="hljs-keyword">this</span>.color= color;</span><br><span class="line">    <span class="hljs-keyword">this</span>.gearType=gearType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>동일한 “Car인스턴스가 생성되었습니다.” 처리를 인스턴스 블럭으로 아래와 같이 처리   </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; System.out.println(<span class="hljs-string">"Car인스턴스가 생성되었습니다."</span>); &#125;</span><br><span class="line"></span><br><span class="line">Car()&#123;</span><br><span class="line">    color= <span class="hljs-string">"withe"</span>;</span><br><span class="line">    gearType=<span class="hljs-string">"auto"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Car(String color, String gearType)&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.color= color;</span><br><span class="line">    <span class="hljs-keyword">this</span>.gearType=gearType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-멤버변수의-초기화-시기와-순서"><a href="#6-4-멤버변수의-초기화-시기와-순서" class="headerlink" title="6.4 멤버변수의 초기화 시기와 순서"></a>6.4 멤버변수의 초기화 시기와 순서</h3><ul><li>클래스 변수 초기화 시점 - 클래스가 처음 로딩될 때 한번 초기화</li><li><p>인스턴스 변수의 초기화 시점 - 인스턴스가 생성될 때마다 각 인스턴스별로 초기화 이루어짐</p></li><li><p>클래스 변수 초기화 순서 : 기본값 -&gt; 명시적 초기화 -&gt; 클래스 초기화 블럭</p></li><li>인스턴스 변수 초기화 순서 : 기본값 -&gt; 명시적 초기화 -&gt; 인스턴스초기화 블럭 -&gt; 생성자  </li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count =<span class="hljs-number">0</span>; <span class="hljs-comment">//생성된 인스턴스 수를 저장하기 위한 변수</span></span><br><span class="line">    <span class="hljs-keyword">int</span> serialNo; <span class="hljs-comment">//인스턴스 고유 번호</span></span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        ++count;</span><br><span class="line">        serialNo = count; <span class="hljs-comment">// Product인스턴스가 생성될 때마다 count 값을 1증가시켜 serialNo에 저장</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">product</span><span class="hljs-params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;6-변수의-초기화&quot;&gt;&lt;a href=&quot;#6-변수의-초기화&quot; class=&quot;headerlink&quot; title=&quot;6. 변수의 초기화&quot;&gt;&lt;/a&gt;6. 변수의 초기화&lt;/h2&gt;&lt;h3 id=&quot;6-1-변수의-초기화&quot;&gt;&lt;a href=&quot;#6-1-변수의-초기화&quot;
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[CH7. 객체지향프로그래밍2] 상속</title>
    <link href="https://eunii.github.io/2019/05/03/tec/java/java5/"/>
    <id>https://eunii.github.io/2019/05/03/tec/java/java5/</id>
    <published>2019-05-03T11:40:25.000Z</published>
    <updated>2019-05-13T07:19:53.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-상속"><a href="#1-상속" class="headerlink" title="1. 상속"></a>1. 상속</h2><h3 id="1-1-상속의-정의와-장점"><a href="#1-1-상속의-정의와-장점" class="headerlink" title="1.1 상속의 정의와 장점"></a>1.1 상속의 정의와 장점</h3><p>기존의 클래스를 재사용하여 새로운 클래스를 작성하는것</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span></span>&#123;&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>조상클래스 -  부모클래스, 상위클래스, 기반 클래스</li><li>자손클래스 - 자식 클래스, 하위클래스, 파생된 클래스  </li></ul><ul><li>생성자와 초기화 블럭은 상속되지 않는다. 멤버만 상속된다.</li><li>자손 클래스의 멤버개수는 조상 클래스보다 항상 같거나 많다.    </li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tv</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> power;</span><br><span class="line">    <span class="hljs-keyword">int</span> channel;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">power</span><span class="hljs-params">()</span></span>&#123;power = !power;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">channelUp</span><span class="hljs-params">()</span></span>&#123;++chnannel;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">channelDown</span><span class="hljs-params">()</span></span>&#123;--channel;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CaptionTv</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Tv</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> caption;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">displayCaption</span><span class="hljs-params">(String text)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(caption)&#123;</span><br><span class="line">            system.out.println(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-클래스간의-관계-포함관계"><a href="#1-2-클래스간의-관계-포함관계" class="headerlink" title="1.2 클래스간의 관계 - 포함관계"></a>1.2 클래스간의 관계 - 포함관계</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x;</span><br><span class="line">    <span class="hljs-keyword">int</span> y;</span><br><span class="line">    <span class="hljs-keyword">int</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 클래스를</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> x; </span><br><span class="line">    <span class="hljs-keyword">int</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span></span>&#123;</span><br><span class="line">    Point point = <span class="hljs-keyword">new</span> Point();</span><br><span class="line">    <span class="hljs-keyword">int</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 표현할 수 있다.<br>Engine, Door 클래스를 미리 작성 후 아래와 같이 사용 가능.</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">car</span></span>&#123;</span><br><span class="line">    Engine e = <span class="hljs-keyword">new</span> Engine();</span><br><span class="line">    Door[] d = <span class="hljs-keyword">new</span> Door[<span class="hljs-number">4</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-클래스간-관계-결정하기"><a href="#1-3-클래스간-관계-결정하기" class="headerlink" title="1.3 클래스간 관계 결정하기"></a>1.3 클래스간 관계 결정하기</h3><p>어떨때 상속, 어떨때 포함관계를 맺을까?  </p><ul><li>상속: ~은 ~이다(is-a)</li><li>포함 : ~은 ~을 가지고 있다(has-a)  </li></ul><p>ex) 원은 점(point)이다 (X)<br>    원은 점을 가지고 있다(O)  -&gt; 포함관계<br>    SportCar는 Car이다(0) -&gt; 상속 관계</p><h3 id="1-4-단일-상속"><a href="#1-4-단일-상속" class="headerlink" title="1.4 단일 상속"></a>1.4 단일 상속</h3><p>부모클래스를 두개 이상 상속 받을 수 없다.</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//불가능한 경우</span></span><br><span class="line">calss TVCR extends TV, VCR&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tv</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> power;</span><br><span class="line">    <span class="hljs-keyword">int</span> channel;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">power</span><span class="hljs-params">()</span></span>&#123;power = !power;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">channelUp</span><span class="hljs-params">()</span></span>&#123;++chnannel;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">channelDown</span><span class="hljs-params">()</span></span>&#123;--channel;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VCR</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> power;</span><br><span class="line">    <span class="hljs-keyword">int</span> counter =<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">power</span><span class="hljs-params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rew</span><span class="hljs-params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ff</span><span class="hljs-params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TVCR</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Tv</span></span>&#123;</span><br><span class="line">    VCR vcr = <span class="hljs-keyword">new</span> VCR();</span><br><span class="line">    <span class="hljs-keyword">int</span> counter =vcr.counter;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        vcr.play();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        vcr.stop();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rew</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        vcr.rew();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ff</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        vcr.ff();</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h3 id="1-5-Object클래스-모든-클래스의-조상"><a href="#1-5-Object클래스-모든-클래스의-조상" class="headerlink" title="1.5 Object클래스 -모든 클래스의 조상"></a>1.5 Object클래스 -모든 클래스의 조상</h3><p>Object는 모든 클래스의 조상이다.  </p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tv</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>이것은 따지고 보면</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tv</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>이것임.<br>toString(), equals() 그냥 쓸 수 있는게 Object클래스에 정의 되어있어서 그렇다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-상속&quot;&gt;&lt;a href=&quot;#1-상속&quot; class=&quot;headerlink&quot; title=&quot;1. 상속&quot;&gt;&lt;/a&gt;1. 상속&lt;/h2&gt;&lt;h3 id=&quot;1-1-상속의-정의와-장점&quot;&gt;&lt;a href=&quot;#1-1-상속의-정의와-장점&quot; class=&quot;header
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[CH6. 객체지향프로그래밍1] 오버로딩</title>
    <link href="https://eunii.github.io/2019/05/02/tec/java/java3/"/>
    <id>https://eunii.github.io/2019/05/02/tec/java/java3/</id>
    <published>2019-05-02T11:40:25.000Z</published>
    <updated>2019-05-13T07:21:05.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-메서드-오버로딩"><a href="#4-메서드-오버로딩" class="headerlink" title="4. 메서드 오버로딩"></a>4. 메서드 오버로딩</h2><h3 id="4-1-메서드-오버로딩이란"><a href="#4-1-메서드-오버로딩이란" class="headerlink" title="4.1 메서드 오버로딩이란?"></a>4.1 메서드 오버로딩이란?</h3><p>한 클래스 내에 같은 이름의 메서드를 매개변수를 다르게 해서 여러개 정의 하는것.</p><h3 id="4-2-오버로딩의-조건"><a href="#4-2-오버로딩의-조건" class="headerlink" title="4.2 오버로딩의 조건"></a>4.2 오버로딩의 조건</h3><ol><li>메서드 이름이 같아야 한다.</li><li>매개변수의 개수 또는 타입이 달라야 한다.</li><li>매개변수는 같고 리턴타입이 다른 경우는 오버로딩이 성립되지 않는다.</li></ol><h3 id="4-3-오버로딩의-예"><a href="#4-3-오버로딩의-예" class="headerlink" title="4.3 오버로딩의 예"></a>4.3 오버로딩의 예</h3><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">()</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(booleand x)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-keyword">char</span> x)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] x)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-keyword">float</span> x)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-keyword">long</span> x)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(String x)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(Object x)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>매개 변수의 타입과 개수가 같아서 오버로딩 성립 안하는 예</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123; <span class="hljs-keyword">return</span> a+b;&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>&#123; <span class="hljs-keyword">return</span> x+y;&#125;</span><br></pre></td></tr></table></figure></li><li><p>리턴 타입만 다른 경우 오버라이딩 성립 안함</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123; <span class="hljs-keyword">return</span> a+b;&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123; <span class="hljs-keyword">return</span> (<span class="hljs-keyword">long</span>) a+b;&#125;</span><br></pre></td></tr></table></figure><ul><li>같은 매개변수를 순서만 바꿔서 작성하면 오버로딩이지만 헷갈리는 좋지 않은 방법<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">long</span> b)</span></span>&#123; <span class="hljs-keyword">return</span> a+b;&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">long</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123; <span class="hljs-keyword">return</span> a+b;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="4-4-오버로딩의-장점"><a href="#4-4-오버로딩의-장점" class="headerlink" title="4.4 오버로딩의 장점"></a>4.4 오버로딩의 장점</h3><ul><li>동일 기능의 메서드가 하나의 이름으로 정의될 수 있음</li><li>메서드 이름 절약가능</li></ul><h2 id="5-생성자-Constructor"><a href="#5-생성자-Constructor" class="headerlink" title="5. 생성자(Constructor)"></a>5. 생성자(Constructor)</h2><h3 id="5-1-생성자란"><a href="#5-1-생성자란" class="headerlink" title="5.1 생성자란?"></a>5.1 생성자란?</h3><p>인스턴스가 생성될 때 호출되는 인스턴스 초기화 메서드</p><ol><li>생성자의 이름은 클래스의 이름과 같아야함</li><li>생성자는 리턴 값이 없음</li></ol><ul><li>new 연산자가 인스턴스를 생성하는것이지, 생성자가 인스턴스를 생성하는것은 아님</li></ul><h3 id="5-2-기본-생성자-default-constructor"><a href="#5-2-기본-생성자-default-constructor" class="headerlink" title="5.2 기본 생성자(default constructor)"></a>5.2 기본 생성자(default constructor)</h3><p>생성자를 안 만들어도 컴파일러가 기본으로 생성자 하나 만들어줌.<br>publid 클래스이름(){};</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data1</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data2</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> value;</span><br><span class="line">    </span><br><span class="line">    Data2(<span class="hljs-keyword">int</span> x)&#123;</span><br><span class="line">        value = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConstructorTest</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> stataic <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span><br><span class="line">        Data1 d1 = <span class="hljs-keyword">new</span> Data1();</span><br><span class="line">        <span class="hljs-comment">//컴파일 에러 발생</span></span><br><span class="line">        Data2 d2 = <span class="hljs-keyword">new</span> Data2();</span><br><span class="line">        Data2 d2 = <span class="hljs-keyword">new</span> Data2(<span class="hljs-keyword">int</span> <span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-매개변수가-있는-생성자"><a href="#5-3-매개변수가-있는-생성자" class="headerlink" title="5.3 매개변수가 있는 생성자"></a>5.3 매개변수가 있는 생성자</h3><p>인스턴스 생성할때 초기값을 넣어 초기화 할 수 있음<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span></span>&#123;</span><br><span class="line">    String color;</span><br><span class="line">    String gearType;</span><br><span class="line">    <span class="hljs-keyword">int</span> door;</span><br><span class="line">    </span><br><span class="line">    Car()&#123;&#125;</span><br><span class="line">    Car(String c, String g, <span class="hljs-keyword">int</span> d)&#123;</span><br><span class="line">        color= c;</span><br><span class="line">        gearType = g;</span><br><span class="line">        door =d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>이렇게 사용하면 됨<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Car c = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">"white"</span>, <span class="hljs-string">"auto"</span>, <span class="hljs-number">4</span>&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="5-4-생성자에서-다른-생성자-호출하기-this-this"><a href="#5-4-생성자에서-다른-생성자-호출하기-this-this" class="headerlink" title="5.4 생성자에서 다른 생성자 호출하기 - this(), this"></a>5.4 생성자에서 다른 생성자 호출하기 - this(), this</h3><p>같은 클래스 내에서 생성자도 아래 조건을 만족 할 경우 서로 호출이 가능함</p><ul><li>생성자의 이름으로 클래스 이름 대신 this를 사용한다.</li><li><p>한 생성자엥서 다른 생성자를 호출할 때는 반드시 첫줄에서만 호출이 가능하다.</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span></span>&#123;</span><br><span class="line">    String color;</span><br><span class="line">    String gearType;</span><br><span class="line">    <span class="hljs-keyword">int</span> door;</span><br><span class="line">    </span><br><span class="line">    Car()&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>(<span class="hljs-string">"white"</span>, <span class="hljs-string">"auto"</span>, <span class="hljs-number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Car(String color)&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>(color, <span class="hljs-string">"auto"</span>, <span class="hljs-number">4</span>&#125;</span><br><span class="line">        </span><br><span class="line">    Car(String color, String gearType, <span class="hljs-keyword">int</span> door)&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.color= color;</span><br><span class="line">        <span class="hljs-keyword">this</span>.gearType = gearType;</span><br><span class="line">        <span class="hljs-keyword">this</span>.door =door;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>this - 인스턴스 자신을 가리키느 ㄴ참조변수, 인스턴스의 주소가 저장되어있다.<br>모든 인스턴스 메서드에 지역변수로 숨겨진 채로 존재한다.  </p><ul><li>this.(), this(매개변수) -  생성자, 같은 클래스의 다른 생성자를 호출 할 때 사용한다.  </li></ul></li></ul><h3 id="5-5-생성자를-이용한-인스턴스-복사"><a href="#5-5-생성자를-이용한-인스턴스-복사" class="headerlink" title="5.5 생성자를 이용한 인스턴스 복사"></a>5.5 생성자를 이용한 인스턴스 복사</h3><p> 동일한 현재 상태를 갖는 인트턴스 하나 더 생성할때 생성자를 사용함.<br> 어떤 상태인지 자세히 몰라도 똑같은 인스턴스 새로 추가 가능.<br> <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Car(Car c)&#123;</span><br><span class="line">     color= c.color;</span><br><span class="line">     gearType = c.gearType;</span><br><span class="line">     door =c.door;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span></span>&#123;</span><br><span class="line">    String color;</span><br><span class="line">    String gearType;</span><br><span class="line">    <span class="hljs-keyword">int</span> door;</span><br><span class="line">    </span><br><span class="line">    Car()&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>(<span class="hljs-string">"white"</span>, <span class="hljs-string">"auto"</span>, <span class="hljs-number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   Car(Car c)&#123;</span><br><span class="line">        color= c.color;</span><br><span class="line">        gearType = c.gearType;</span><br><span class="line">        door =c.door;</span><br><span class="line">   &#125;</span><br><span class="line">    Car(String color)&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>(color, <span class="hljs-string">"auto"</span>, <span class="hljs-number">4</span>&#125;</span><br><span class="line">        </span><br><span class="line">    Car(String color, String gearType, <span class="hljs-keyword">int</span> door)&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.color= color;</span><br><span class="line">        <span class="hljs-keyword">this</span>.gearType = gearType;</span><br><span class="line">        <span class="hljs-keyword">this</span>.door =door;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*** 인스턴스를 생성할 때는 아래 두가지 사항을 결정해야함</p><ol><li>클래스 - 어떤 클래스의 인스턴스를 생성할 것인가?</li><li>생성자 - 선택한 클래스의 어떤 생성자로 인스턴스를 생성할것인가?</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;4-메서드-오버로딩&quot;&gt;&lt;a href=&quot;#4-메서드-오버로딩&quot; class=&quot;headerlink&quot; title=&quot;4. 메서드 오버로딩&quot;&gt;&lt;/a&gt;4. 메서드 오버로딩&lt;/h2&gt;&lt;h3 id=&quot;4-1-메서드-오버로딩이란&quot;&gt;&lt;a href=&quot;#4-1-메
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[CH6. 객체지향프로그래밍1] 변수와 메서드</title>
    <link href="https://eunii.github.io/2019/05/01/tec/java/java2/"/>
    <id>https://eunii.github.io/2019/05/01/tec/java/java2/</id>
    <published>2019-05-01T11:40:26.000Z</published>
    <updated>2019-10-12T12:57:14.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-변수와-매서드"><a href="#3-변수와-매서드" class="headerlink" title="3. 변수와 매서드"></a>3. 변수와 매서드</h2><h3 id="3-1-선언위치에-따른-변수의-종류"><a href="#3-1-선언위치에-따른-변수의-종류" class="headerlink" title="3.1 선언위치에 따른 변수의 종류"></a>3.1 선언위치에 따른 변수의 종류</h3><table><thead><tr><th>변수의 종류</th><th>선언위치</th><th>생성시기</th></tr></thead><tbody><tr><td>클래스변수</td><td>클래스 영역</td><td>클래스가 메모리에 올라갔을 때</td></tr><tr><td>인스턴스 변수</td><td>클래스 영역</td><td>인스턴스가 생성되었을때</td></tr><tr><td>지역변수</td><td>클래스 영역 이외의 영역 (메서드, 생성자, 초기화 블럭 내부)</td><td>변수 선언문이 수행되었을때</td></tr></tbody></table><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Variables</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> iv; <span class="hljs-comment">//인스턴스 변수</span></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cv; <span class="hljs-comment">//클래스 변수(static 변수, 공유변수)</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> iv; <span class="hljs-comment">// 지역변수</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>인스턴스 변수<ul><li>클래스 영역에 선언, 인스턴스 생성때 만들어짐</li></ul></li><li>클래스 변수<ul><li>인스턴스 앞에 static을 붙임.<br>한 클래스의 모든 인스턴스들이 공통적 값을 유지해야 되는 경우 사용.<br>public을 붙이면 프로그램 내 전역에서 사용가능</li></ul></li><li>지역 변수<ul><li>매서드 내 선언. 메서드 내에서만 사용가능. 메서드 종료시 소멸.</li></ul></li></ol><h3 id="3-2-클래스변수와-인스턴스-변수"><a href="#3-2-클래스변수와-인스턴스-변수" class="headerlink" title="3.2 클래스변수와 인스턴스 변수"></a>3.2 클래스변수와 인스턴스 변수</h3> <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Card</span> </span>&#123;</span><br><span class="line">    String kind; <span class="hljs-comment">// 카드 무늬 - 인스턴스변수</span></span><br><span class="line">    <span class="hljs-keyword">int</span> number; <span class="hljs-comment">// 카드 숫자 - 인스턴스 변수</span></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> width = <span class="hljs-number">100</span>; <span class="hljs-comment">// 카드 폭 - 클래스 변수</span></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> height = <span class="hljs-number">250</span>; <span class="hljs-comment">//카드 높이 -클래스 변수</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>인스턴스 변수는 인스턴스가 생성될 때마다 각기 다른 값을 유지,<br>클래스 변수는 모든 인스턴스가 하나의 저장공간을 공유해서 항상 공통된 값 가짐</p><h3 id="3-3-메서드"><a href="#3-3-메서드" class="headerlink" title="3.3  메서드"></a>3.3  메서드</h3><ul><li>하나의 메서드는 되도록 하나의 기능만 수행하도록 하는것이 좋다.</li><li>반복적으로 수행되야 하는 여러 문장을 하나의 메서드로 정의해놓으면 좋다</li><li>관련된 여러 문장을 하나의 메서드로 만들어 놓는 것이 좋다.</li></ul><h3 id="3-4-return-문"><a href="#3-4-return-문" class="headerlink" title="3.4 return 문"></a>3.4 return 문</h3><ul><li>메서드가 정상적으로 종료되는 경우  <ol><li>메서드의 블럭{}내의 마지막 문장을 수행했을 때</li><li>메서드의 블럭{}내에 있는 문장을 수행중 return 문을 만났을때.</li></ol></li><li>return 문은 실행중인 메서드를 종료 후 호출 메서드로 되돌아감<ol><li>반환값이 없는 경우 : return;</li><li>반환값이 있는 경우 : return 반환값;</li></ol></li></ul><h3 id="3-5-메서드의-호출"><a href="#3-5-메서드의-호출" class="headerlink" title="3.5 메서드의 호출"></a>3.5 메서드의 호출</h3><p>참조변수.메서드이름();<br>참소변수.메서드이름(값1, 값2, ..);</p><h3 id="3-6-JVM의-메모리-구조"><a href="#3-6-JVM의-메모리-구조" class="headerlink" title="3.6 JVM의 메모리 구조"></a>3.6 JVM의 메모리 구조</h3><hr><ol><li>Method Area(메서드영역)<br>클래스/데이터  </li></ol><hr><ol start="3"><li>Call Stack(호출스택)<br>Main  </li></ol><hr><ol start="2"><li>Heap(힙)<br>인스턴스  </li></ol><hr><h3 id="3-7-기본형-매개변수와-참조형-매개변수"><a href="#3-7-기본형-매개변수와-참조형-매개변수" class="headerlink" title="3.7 기본형 매개변수와 참조형 매개변수"></a>3.7 기본형 매개변수와 참조형 매개변수</h3><p>기본형 매개변수 - 변수의 값 읽기만 할 수 있음<br>참조형 매개변수 - 변수의 값을 읽고 변경 할 수 있음.</p><h3 id="3-8-재귀호출"><a href="#3-8-재귀호출" class="headerlink" title="3.8 재귀호출"></a>3.8 재귀호출</h3><p>f(n) = n* f(n-1)</p><h3 id="3-9-클래스-static-메서드-와-인스턴스메서드"><a href="#3-9-클래스-static-메서드-와-인스턴스메서드" class="headerlink" title="3.9 클래스(static 메서드)와 인스턴스메서드"></a>3.9 클래스(static 메서드)와 인스턴스메서드</h3><ol><li>클래스 설계할 때, 멤버 변수 중 모든 인스턴스에 공통적으로 사용해야하는 것에 static 을 붙인다.</li><li>클래스 변수(static변수)는 인스턴스를 생성하지 않아도 사용할 수 있다.</li><li>클래스 메서드는 인스턴스 변수를 사용할 수 없다.</li><li>메서드 내에서 인스턴스 변수를 사용하지 않는다면, static을 붙이는 것을 고려한다.</li></ol><h3 id="3-10-클래스멤버와-인스턴스멤버간의-참조와-호출"><a href="#3-10-클래스멤버와-인스턴스멤버간의-참조와-호출" class="headerlink" title="3.10 클래스멤버와 인스턴스멤버간의 참조와 호출"></a>3.10 클래스멤버와 인스턴스멤버간의 참조와 호출</h3><p>인스턴스 멤버가 존재할때는 클래스멤버는 항상 존재하지만,<br>클래스맴버가 존재하는 시점에 인스턴스멤버가 존재할수도 있고 없을수도 있음.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-변수와-매서드&quot;&gt;&lt;a href=&quot;#3-변수와-매서드&quot; class=&quot;headerlink&quot; title=&quot;3. 변수와 매서드&quot;&gt;&lt;/a&gt;3. 변수와 매서드&lt;/h2&gt;&lt;h3 id=&quot;3-1-선언위치에-따른-변수의-종류&quot;&gt;&lt;a href=&quot;#3-1-
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[CH6. 객체지향프로그래밍1] 클래스와 객체</title>
    <link href="https://eunii.github.io/2019/05/01/tec/java/java1/"/>
    <id>https://eunii.github.io/2019/05/01/tec/java/java1/</id>
    <published>2019-05-01T11:40:25.000Z</published>
    <updated>2020-01-07T08:19:20.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-객체지향-언어"><a href="#1-객체지향-언어" class="headerlink" title="1. 객체지향 언어"></a>1. 객체지향 언어</h2><ol><li>코드의 재사용성이 높다.</li><li>코드의 관리가 용이하다.</li><li>신뢰성이 높은 프로그래밍을 가등하게 한다.</li></ol><h2 id="2-클래스와-객체"><a href="#2-클래스와-객체" class="headerlink" title="2. 클래스와 객체"></a>2. 클래스와 객체</h2><h3 id="2-1-클래스와-객체의-정의와-용도"><a href="#2-1-클래스와-객체의-정의와-용도" class="headerlink" title="2.1 클래스와 객체의 정의와 용도"></a>2.1 클래스와 객체의 정의와 용도</h3><p>클래스: 객체를 정의 해놓은것으로 객체를 생성할때 사용한다.  </p><table><thead><tr><th style="text-align:center">클래스</th><th style="text-align:center">객체</th></tr></thead><tbody><tr><td style="text-align:center">제품설계도</td><td style="text-align:center">제품</td></tr><tr><td style="text-align:center">TV설계도</td><td style="text-align:center">TV</td></tr><tr><td style="text-align:center">붕어빵 기계</td><td style="text-align:center">붕어빵</td></tr></tbody></table><h3 id="2-2-객체와-인스턴스"><a href="#2-2-객체와-인스턴스" class="headerlink" title="2.2 객체와 인스턴스"></a>2.2 객체와 인스턴스</h3><p>클래스 —(인스턴스화)—&gt; 인스턴스(객체)</p><h3 id="2-3-객체의-구성요소-속성과-기능"><a href="#2-3-객체의-구성요소-속성과-기능" class="headerlink" title="2.3 객체의 구성요소 - 속성과 기능"></a>2.3 객체의 구성요소 - 속성과 기능</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">속성(propertiy) - 맴버변수(member variable), 특성(attribute), 필드(field), 상태(state)  </span><br><span class="line">기능(function)- 매서드(method), 행위(behavior), 함수(function)</span><br></pre></td></tr></table></figure><ul><li>TV의 속성과 기능</li></ul><table><thead><tr><th style="text-align:center">속성</th><th style="text-align:center">기능</th></tr></thead><tbody><tr><td style="text-align:center">크기, 길이, 높이, 색상, 볼륨, 채널 등</td><td style="text-align:center">켜기, 끄기, 볼륨 높이기, 볼륨 낮추기, 채널 변경하기</td></tr></tbody></table><p>속성-&gt; 맴버변수<br>기능-&gt;매서드  </p><ul><li>TV 클래스<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tv</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//Tv의 속성(맴버변수)</span></span><br><span class="line">    String color;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> power;</span><br><span class="line">    <span class="hljs-keyword">int</span> channel;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//Tv의 기능(매서드)</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">power</span><span class="hljs-params">()</span></span>&#123; power=!power;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">channelUp</span><span class="hljs-params">()</span></span>&#123;++channel;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">channelDowun</span><span class="hljs-params">()</span></span>&#123;--channel;&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-인스턴스의-생성과-사용"><a href="#2-4-인스턴스의-생성과-사용" class="headerlink" title="2.4 인스턴스의 생성과 사용"></a>2.4 인스턴스의 생성과 사용</h3><p>클래스 변수명; // 클래스의 객체를 참조하기 위한 참조변수를 선언한다.<br>변수명 = new 클래스명(); // 클래스의 객체를 생성 후 , 객체의 주소를 참수변수에 저장한다.</p><p>Tv t;<br>t = new Tv();  </p><ul><li>TvTest.java<figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tv</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//Tv의 속성(맴버변수)</span></span><br><span class="line">    String color;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> power;</span><br><span class="line">    <span class="hljs-keyword">int</span> channel;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//Tv의 기능(매서드)</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">power</span><span class="hljs-params">()</span></span>&#123; power=!power;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">channelUp</span><span class="hljs-params">()</span></span>&#123;++channel;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">channelDowun</span><span class="hljs-params">()</span></span>&#123;--channel;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TvTest</span></span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;</span><br><span class="line">        Tv t; <span class="hljs-comment">// 메모리에 참조변수 t의 공간 생김</span></span><br><span class="line">        t = <span class="hljs-keyword">new</span> Tv(); <span class="hljs-comment">// t에 객체 주소값이 저장, 메모리 공간에 TV 클래스 인스턴스가 생김</span></span><br><span class="line">        t.channel = <span class="hljs-number">7</span>; <span class="hljs-comment">//t에 저장된 주소에 있는 인스턴스 멤버변수 channel에 7저장</span></span><br><span class="line">        t.channelDown(); <span class="hljs-comment">//t가 참조하는 Tv인스턴스 channelDowun매서드 호출-&gt;channel1감소</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-클래스의-또-다른-정의"><a href="#2-5-클래스의-또-다른-정의" class="headerlink" title="2.5 클래스의 또 다른 정의"></a>2.5 클래스의 또 다른 정의</h3><ol><li><p>클래스 - 데이터와 함수의 결합</p><ol><li>변수 - 하나의 데이터를 저장할 수 있는 공간</li><li>배열 - 같은 종류의 여러 데이터를 하나의 집합으로 저장할 수 있는 공간</li><li>구조체 - 서로 관련된 여러 데이터를 종류에 관계없이 하나의 집합으로 저장할 수 있는 공간</li><li><p>클래스 - 데이터와 함수의 결합(구조체+함수)</p></li><li><p>클래스 - 사용자 정의 타입</p></li></ol></li></ol><p>서로 관련된 변수를 묶어서 하나의 타입으로 새로 추가<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int hour;</span><br><span class="line">int minute;</span><br><span class="line">float second;</span><br></pre></td></tr></table></figure></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Time</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> hour;</span><br><span class="line">    <span class="hljs-keyword">int</span> minute;</span><br><span class="line">    <span class="hljs-keyword">float</span> second; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-객체지향-언어&quot;&gt;&lt;a href=&quot;#1-객체지향-언어&quot; class=&quot;headerlink&quot; title=&quot;1. 객체지향 언어&quot;&gt;&lt;/a&gt;1. 객체지향 언어&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;코드의 재사용성이 높다.&lt;/li&gt;
&lt;li&gt;코드의 관리가 용이하
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="java" scheme="https://eunii.github.io/categories/tec/java/"/>
    
    
      <category term="java의 정석" scheme="https://eunii.github.io/tags/java%EC%9D%98-%EC%A0%95%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>[Hexo와 깃허브로 블로그 만들기] 블로그에 Google Analytics 설치하기</title>
    <link href="https://eunii.github.io/2019/04/17/tec/blog/blog10/"/>
    <id>https://eunii.github.io/2019/04/17/tec/blog/blog10/</id>
    <published>2019-04-17T11:40:25.000Z</published>
    <updated>2019-05-13T07:24:39.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-구글-애널리틱스-사이트에-계정만들기"><a href="#1-구글-애널리틱스-사이트에-계정만들기" class="headerlink" title="1. 구글 애널리틱스 사이트에 계정만들기"></a>1. 구글 애널리틱스 사이트에 계정만들기</h2><p><a href="https://google.com/analytics" rel="external nofollow noopener noreferrer" target="_blank">google analytics 회원가입 하러가기</a> </p><h2 id="2-GA홈에서-관리할-사이트-계정을-추가한다"><a href="#2-GA홈에서-관리할-사이트-계정을-추가한다" class="headerlink" title="2. GA홈에서 관리할 사이트 계정을 추가한다."></a>2. GA홈에서 관리할 사이트 계정을 추가한다.</h2><ol><li><p>관리 클릭</p><img src="/assets/images/blog/ga1.JPG"></li><li><p>계정만들기 클릭</p><img src="/assets/images/blog/ga2.JPG"></li><li><p>정보 넣고 추적ID가져오기 클릭</p></li></ol><img src="/assets/images/blog/ga3.JPG"><ol start="4"><li>추적 아이디 값 복사하기</li></ol><img src="/assets/images/blog/ga4.JPG"><h2 id="3-blog-themes-icarus-config-yml-파일-수정"><a href="#3-blog-themes-icarus-config-yml-파일-수정" class="headerlink" title="3. /blog/themes/icarus/_config.yml 파일 수정"></a>3. /blog/themes/icarus/_config.yml 파일 수정</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins:</span><br><span class="line">    google-analytics:</span><br><span class="line">        tracking_id: XXXXXX (required)</span><br></pre></td></tr></table></figure><h2 id="4-사용자-분석"><a href="#4-사용자-분석" class="headerlink" title="4. 사용자 분석"></a>4. 사용자 분석</h2><p><a href="https://google.com/analytics" rel="external nofollow noopener noreferrer" target="_blank">구글 애널리틱스 사용자 분석하러 가기</a></p><img src="/assets/images/blog/ga5.JPG">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-구글-애널리틱스-사이트에-계정만들기&quot;&gt;&lt;a href=&quot;#1-구글-애널리틱스-사이트에-계정만들기&quot; class=&quot;headerlink&quot; title=&quot;1. 구글 애널리틱스 사이트에 계정만들기&quot;&gt;&lt;/a&gt;1. 구글 애널리틱스 사이트에 계정만들기
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/categories/tec/blog/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/tags/blog/"/>
    
      <category term="github" scheme="https://eunii.github.io/tags/github/"/>
    
      <category term="hexo" scheme="https://eunii.github.io/tags/hexo/"/>
    
      <category term="google-analytics" scheme="https://eunii.github.io/tags/google-analytics/"/>
    
  </entry>
  
  <entry>
    <title>[Hexo와 깃허브로 블로그 만들기] disque로 댓글 기능 활성화 하기</title>
    <link href="https://eunii.github.io/2019/04/16/tec/blog/blog9/"/>
    <id>https://eunii.github.io/2019/04/16/tec/blog/blog9/</id>
    <published>2019-04-16T11:40:25.000Z</published>
    <updated>2019-05-13T07:24:39.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-disque-회원가입"><a href="#1-disque-회원가입" class="headerlink" title="1. disque 회원가입"></a>1. disque 회원가입</h2><p><a href="https://disqus.com/profile/signup/" rel="external nofollow noopener noreferrer" target="_blank">disque 회원가입 하러가기</a><br><img src="/assets/images/blog/d1.JPG"></p><h2 id="2-UserName변경"><a href="#2-UserName변경" class="headerlink" title="2. UserName변경"></a>2. UserName변경</h2><p>Account에서 Username을 변경한다.(disque에서 유일해야함.)<br><img src="/assets/images/blog/d2.JPG"></p><h2 id="3-blog-themes-icarus-config-yml-파일-수정"><a href="#3-blog-themes-icarus-config-yml-파일-수정" class="headerlink" title="3. /blog/themes/icarus/_config.yml 파일 수정"></a>3. /blog/themes/icarus/_config.yml 파일 수정</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">comment:</span><br><span class="line">    type: disqus</span><br><span class="line">    shortname: xxxxxxxx</span><br></pre></td></tr></table></figure><h2 id="4-post-md-파일-Front-Matter부분-수정"><a href="#4-post-md-파일-Front-Matter부분-수정" class="headerlink" title="4. post.md 파일 Front-Matter부분 수정"></a>4. post.md 파일 Front-Matter부분 수정</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># (optional) a unique id to identify the post in Disqus system</span><br><span class="line">disqusId: xxxxxxxx</span><br><span class="line">---</span><br><span class="line">Post content...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-disque-회원가입&quot;&gt;&lt;a href=&quot;#1-disque-회원가입&quot; class=&quot;headerlink&quot; title=&quot;1. disque 회원가입&quot;&gt;&lt;/a&gt;1. disque 회원가입&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://disqus.
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/categories/tec/blog/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/tags/blog/"/>
    
      <category term="github" scheme="https://eunii.github.io/tags/github/"/>
    
      <category term="hexo" scheme="https://eunii.github.io/tags/hexo/"/>
    
      <category term="disque" scheme="https://eunii.github.io/tags/disque/"/>
    
  </entry>
  
  <entry>
    <title>[SQL] ORDER BY 정렬</title>
    <link href="https://eunii.github.io/2019/04/16/tec/sql/sql7/"/>
    <id>https://eunii.github.io/2019/04/16/tec/sql/sql7/</id>
    <published>2019-04-16T11:40:25.000Z</published>
    <updated>2019-05-13T07:27:08.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-ORDER-BY-정렬"><a href="#1-ORDER-BY-정렬" class="headerlink" title="1. ORDER BY 정렬"></a>1. ORDER BY 정렬</h2><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> 칼럼명 [<span class="hljs-keyword">ALIAS</span>명]</span><br><span class="line"><span class="hljs-keyword">FROM</span> 테이블명</span><br><span class="line">[<span class="hljs-keyword">WHERE</span> 조건식]</span><br><span class="line">[<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 칼럼또는 표현식]</span><br><span class="line">[<span class="hljs-keyword">HAVING</span> 그룹조건식]</span><br><span class="line">[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 칼럼이나 표현식 [<span class="hljs-keyword">ASC</span> 또는 <span class="hljs-keyword">DESC</span>];</span><br></pre></td></tr></table></figure><h2 id="2-SELECT-문장실행-순서"><a href="#2-SELECT-문장실행-순서" class="headerlink" title="2.SELECT 문장실행 순서"></a>2.SELECT 문장실행 순서</h2><p>5)SELECT<br>1)FROM<br>2)WHERE<br>3)GROUP BY<br>4)HAVING<br>6)ORDER BY    </p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> DNAME, LOC, DEPTNO</span><br><span class="line"><span class="hljs-keyword">FROM</span> DEPT</span><br><span class="line"><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">SELECT</span> JOB <span class="hljs-keyword">FROM</span> EMP</span><br><span class="line"><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> JOB</span><br><span class="line"><span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">COUNT</span>(*)&gt;<span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">MAX</span>(EMPNO), <span class="hljs-keyword">MAX</span>(MGR), <span class="hljs-keyword">SUM</span>(SAL), <span class="hljs-keyword">COUNT</span>(DEPTNO), <span class="hljs-keyword">MAX</span>(HIREDATE);</span><br></pre></td></tr></table></figure><h2 id="3-TOP-N-쿼리"><a href="#3-TOP-N-쿼리" class="headerlink" title="3. TOP N 쿼리"></a>3. TOP N 쿼리</h2><h3 id="ROWNUM"><a href="#ROWNUM" class="headerlink" title="ROWNUM"></a>ROWNUM</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">--ORDER BY가 제일 늦게 실행되기 때문에 원하는 값이 안 나옴</span></span><br><span class="line"><span class="hljs-keyword">SELECT</span> ENAME, SAL <span class="hljs-keyword">FROM</span> EMP</span><br><span class="line"><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">ROWNUM</span> &lt;<span class="hljs-number">4</span></span><br><span class="line"><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> SAL;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">--2중쿼리 이용</span></span><br><span class="line"><span class="hljs-keyword">SELECT</span> ENAME, SAL</span><br><span class="line"><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> ENAME, SAL <span class="hljs-keyword">FROM</span> EMP</span><br><span class="line">      <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> SAL <span class="hljs-keyword">DESC</span>)</span><br><span class="line"><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">ROWNUM</span>&lt;<span class="hljs-number">4</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-ORDER-BY-정렬&quot;&gt;&lt;a href=&quot;#1-ORDER-BY-정렬&quot; class=&quot;headerlink&quot; title=&quot;1. ORDER BY 정렬&quot;&gt;&lt;/a&gt;1. ORDER BY 정렬&lt;/h2&gt;&lt;figure class=&quot;highlight sq
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="sql" scheme="https://eunii.github.io/categories/tec/sql/"/>
    
    
      <category term="sql" scheme="https://eunii.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>[SQL] GROUP BY, HAVING절</title>
    <link href="https://eunii.github.io/2019/04/15/tec/sql/sql6/"/>
    <id>https://eunii.github.io/2019/04/15/tec/sql/sql6/</id>
    <published>2019-04-15T11:40:25.000Z</published>
    <updated>2019-05-13T07:27:08.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-집계함수-AGGREGATE-FUNCTION"><a href="#1-집계함수-AGGREGATE-FUNCTION" class="headerlink" title="1. 집계함수(AGGREGATE FUNCTION)"></a>1. 집계함수(AGGREGATE FUNCTION)</h2><ul><li>여러 행들의 그룹이 모여 그룹당 하나의 결과를 리턴하는 함수</li><li>GROUP BY 절은 행들을 소그룹화 함</li><li>SELECT절, HAVING절, ORDER BY 절에 사용할 수 있음.  </li></ul><h3 id="집계함수명-DISTINCT-칼럼이나-표현식"><a href="#집계함수명-DISTINCT-칼럼이나-표현식" class="headerlink" title="집계함수명([DISTINCT] 칼럼이나 표현식)"></a>집계함수명([DISTINCT] 칼럼이나 표현식)</h3><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT(*)"></a>COUNT(*)</h3><ul><li>NULL값을 포함한 행의 수 출력<h3 id="COUNT-표현식"><a href="#COUNT-표현식" class="headerlink" title="COUNT(표현식)"></a>COUNT(표현식)</h3></li><li>표현식의 값이 NULL값을 제외한 행의 수 출력<h3 id="SUM-DISTINCT-표현식"><a href="#SUM-DISTINCT-표현식" class="headerlink" title="SUM([DISTINCT] 표현식)"></a>SUM([DISTINCT] 표현식)</h3></li><li>NULL값을 제외한 합계출력<h3 id="AVG-DISTINCT-표현식"><a href="#AVG-DISTINCT-표현식" class="headerlink" title="AVG([DISTINCT] 표현식)"></a>AVG([DISTINCT] 표현식)</h3></li><li>NULL값을 제외한 평균출력<h3 id="MAX-DISTINCT-표현식"><a href="#MAX-DISTINCT-표현식" class="headerlink" title="MAX([DISTINCT] 표현식)"></a>MAX([DISTINCT] 표현식)</h3></li><li>표현식의 최대값 출력<h3 id="MIN-DISTINCT-표현식"><a href="#MIN-DISTINCT-표현식" class="headerlink" title="MIN([DISTINCT] 표현식)"></a>MIN([DISTINCT] 표현식)</h3></li><li>표현식의 최소값 출력<h3 id="STDDEV-D-표현식"><a href="#STDDEV-D-표현식" class="headerlink" title="STDDEV([D] 표현식)"></a>STDDEV([D] 표현식)</h3></li><li>표현식의 표준편차 출력<h3 id="VARIAN-D-표현식"><a href="#VARIAN-D-표현식" class="headerlink" title="VARIAN([D] 표현식)"></a>VARIAN([D] 표현식)</h3></li><li>표현식의 분산 출력   </li></ul><h2 id="2-GROUP-BY절"><a href="#2-GROUP-BY절" class="headerlink" title="2. GROUP BY절"></a>2. GROUP BY절</h2><ul><li>SQL문에서 FROM과 WHERE절 뒤에 위치, 데이터를 그룹으로 분류하여 소그룹에대한 항목별 통계정보를 얻을때 사용  </li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">DISTINCT</span>] 칼럼명 [<span class="hljs-keyword">ALIAS</span>명]</span><br><span class="line"><span class="hljs-keyword">FROM</span> 테이블명</span><br><span class="line">[<span class="hljs-keyword">WHERE</span> 조건식]</span><br><span class="line">[<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 칼럼이나 표현식]</span><br><span class="line">[<span class="hljs-keyword">HAVING</span> 그룹조건식];</span><br></pre></td></tr></table></figure><h3 id="GROUP-BY-HAVING절의-특성"><a href="#GROUP-BY-HAVING절의-특성" class="headerlink" title="GROUP BY, HAVING절의 특성"></a>GROUP BY, HAVING절의 특성</h3><ul><li>그룹바이로 소그룹의 기준을 정한후, SELECT 절에 집계함수를 사용</li><li>집계함수의 통계정보는 NULL값을 제외하고 수행함</li><li>WHERE절에는 집계함수 올 수 없음</li><li>HAVING절은 그룹바이절의 기준 항목이나 소그룹의 집계함수를 이용한 저건을 표시</li><li>그룹바이절에 의해 소그룹별로 만들어진 집계데이터 중, HAVING 절에 제한 조건을 두어 만족하는 내용만 출력</li><li>HAVING절은 일반적으로 GROUP BY절 뒤에 위치  </li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">POSITION</span> 포지션, <span class="hljs-keyword">AVG</span>(HEIGHT) 평균키</span><br><span class="line"><span class="hljs-keyword">FROM</span> PLAYER;</span><br><span class="line"><span class="hljs-comment">--&gt;&gt;ERROR : 단일 그룹의 집계함수가 아니다라고 나옴</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">POSITION</span> 포지션, <span class="hljs-keyword">AVG</span>(HEIGHT) 평균키</span><br><span class="line"><span class="hljs-keyword">FROM</span> PLAYER</span><br><span class="line"><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">POSITION</span> 포지션;</span><br><span class="line"><span class="hljs-comment">--&gt;&gt;ERROR SQL명령어가 올바르게 종료되지 않음--&gt;그룹바이에 별명ALIAS쓸 수 없음</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">--포지션별 최대키, 최소키, 평균키 출력</span></span><br><span class="line"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">POSITION</span> 포지션, <span class="hljs-keyword">MAX</span>(HEIGHT), <span class="hljs-keyword">MIN</span>(HEIGHT), <span class="hljs-keyword">AVG</span>(HEIGHT)</span><br><span class="line"><span class="hljs-keyword">FROM</span> PLAYER</span><br><span class="line"><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> PISITION;</span><br></pre></td></tr></table></figure><h2 id="3-HAVING-절"><a href="#3-HAVING-절" class="headerlink" title="3.HAVING 절"></a>3.HAVING 절</h2><ul><li>GROUP BY후에 조건을 달고 싶을때 WHERE 대신 씀</li><li>WHERE절은 GROUP BY절 전에 오기때문에 소그룹으로 묶인후의 조건을 걸 수없음.  </li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">POSITION</span> 포지션, <span class="hljs-keyword">ROUND</span>(<span class="hljs-keyword">AVG</span>(HEIGHT),<span class="hljs-number">2</span>) 평균키</span><br><span class="line"><span class="hljs-keyword">FROM</span> PLAYER</span><br><span class="line"><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">AVG</span>(HIGHT) &gt;=<span class="hljs-number">180</span></span><br><span class="line"><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">POSITION</span></span><br><span class="line"><span class="hljs-comment">--3행오류 : 집계함수가 허가되지 않음. 그룹바이로 소그룹화 되기전에 집계함수를 사용했기때문.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">POSITION</span>, <span class="hljs-keyword">ROUND</span>(<span class="hljs-keyword">AVG</span>(HEIGHT),<span class="hljs-number">2</span>)</span><br><span class="line"><span class="hljs-keyword">FROM</span> PLAYER</span><br><span class="line"><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">POSITION</span></span><br><span class="line"><span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">AVG</span>(HEIGNT)&gt;=<span class="hljs-number">180</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">--이렇게써야함</span></span><br><span class="line"><span class="hljs-comment">--예제)</span></span><br><span class="line"><span class="hljs-comment">--최대 키가 190CM이상인 선수를 가지고 포지션별 평균 키를 출력</span></span><br><span class="line"><span class="hljs-keyword">SELECT</span> POSICITON <span class="hljs-keyword">AVG</span>(HEIGHT)</span><br><span class="line"><span class="hljs-keyword">FROM</span> PLAYER</span><br><span class="line"><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">POSITION</span></span><br><span class="line"><span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">MAX</span>(HEIGHT) &gt;=<span class="hljs-number">190</span>;</span><br></pre></td></tr></table></figure><h2 id="4-CASE-표현을-활용한-월별-데이터-집계"><a href="#4-CASE-표현을-활용한-월별-데이터-집계" class="headerlink" title="4. CASE 표현을 활용한 월별 데이터 집계"></a>4. CASE 표현을 활용한 월별 데이터 집계</h2><ul><li>모델링의 제 1정규화로 반독되는 칼럼의 경우, 구분칼럼을 두고 여러개의 레코드로 만들어진 집합을 정해진 칼럼 수만큼 확장해서 집계 보고서를 만드는 유용한 기법  </li></ul><p>예제)<br>부서별 월별 입사자의 평균 급여를 조회, 입사후 1년마다 급여 인상이나 보너스 지급과 같은 일정이 정기적으로 잡히면 업무적으로 중요한 정보가 됨  </p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">--STEPT1</span></span><br><span class="line"><span class="hljs-comment">--개별입사정보에서 월별데이터 추출</span></span><br><span class="line"><span class="hljs-keyword">SELECT</span> ENAME, DEPOTNO, <span class="hljs-keyword">EXTRACT</span>(<span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">FROM</span> HIREDATE) <span class="hljs-keyword">MONTH</span>, SAL</span><br><span class="line"><span class="hljs-keyword">FROM</span> EMP;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">--STEPT2 월별데이터 구분</span></span><br><span class="line"><span class="hljs-keyword">SELECT</span> ENAME, DEPTNO,</span><br><span class="line">  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span> M01, <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span> M02,</span><br><span class="line">  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">3</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span> M03, <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">4</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span> M04,</span><br><span class="line">  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">5</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span> M05, <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">6</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span> M06,</span><br><span class="line">  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">7</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span> M07, <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">8</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span> M08,</span><br><span class="line">  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">9</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span> M09, <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">10</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span> M10,</span><br><span class="line">  <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">11</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span> M11, <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">12</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span> M12</span><br><span class="line"><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> ENAME, DEPTNO, <span class="hljs-keyword">EXTRACT</span>(<span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">FROM</span> HIREDATE) <span class="hljs-keyword">MONTH</span>, SAL</span><br><span class="line">      <span class="hljs-keyword">FROM</span> EMP);</span><br><span class="line">      </span><br><span class="line"><span class="hljs-comment">--STEPT3 2의구분을 부서별로 그룹화</span></span><br><span class="line"><span class="hljs-keyword">SELECT</span> DEPTNO,</span><br><span class="line">  <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span>) M01, <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span>) M02,</span><br><span class="line">  <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">3</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span>) M03, <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">4</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span>) M04,</span><br><span class="line">  <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">5</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span>) M05, <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">6</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span>) M06,</span><br><span class="line">  <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">7</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span>) M07, <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">8</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span>) M08,</span><br><span class="line">  <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">9</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span>) M09, <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">10</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span>) M10,</span><br><span class="line">  <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">11</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span>) M11, <span class="hljs-keyword">AVG</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">12</span> <span class="hljs-keyword">THEN</span> SAL <span class="hljs-keyword">END</span>) M12</span><br><span class="line"><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> ENAME, DEPTNO, <span class="hljs-keyword">EXTRACT</span>(<span class="hljs-keyword">MONTH</span> <span class="hljs-keyword">FROM</span> HIREDATE) <span class="hljs-keyword">MONTH</span>, SAL</span><br><span class="line">      <span class="hljs-keyword">FROM</span> EMP)</span><br><span class="line"><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPTNO;</span><br></pre></td></tr></table></figure><h2 id="5-집계함수와-NULL처리"><a href="#5-집계함수와-NULL처리" class="headerlink" title="5.집계함수와 NULL처리"></a>5.집계함수와 NULL처리</h2><ul><li>빈칸을 NULL이 아니라 0으로 처리하기 위해 NVL()을 사용하는 경우가 있는데, 오히려 불필요할 수 있음</li><li>행 함수는 건수가 NULL인 행을 빼고 계산함. SUM, AVG,..등 굳이 0을넣어 불필요하게 더 계산할 필요가 없음</li><li>ELSE  절 생략하면 DEFAULT 값이 NULL임</li><li>출력시 NULL이 아닌 0을 표현하고싶으면 NVL(SUM(SAL),0)이렇게 하면됨</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-집계함수-AGGREGATE-FUNCTION&quot;&gt;&lt;a href=&quot;#1-집계함수-AGGREGATE-FUNCTION&quot; class=&quot;headerlink&quot; title=&quot;1. 집계함수(AGGREGATE FUNCTION)&quot;&gt;&lt;/a&gt;1. 집계함수(A
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="sql" scheme="https://eunii.github.io/categories/tec/sql/"/>
    
    
      <category term="sql" scheme="https://eunii.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>[Hexo와 깃허브로 블로그 만들기] Hexo 블로그 포스트 쓰기</title>
    <link href="https://eunii.github.io/2019/04/15/tec/blog/blog8/"/>
    <id>https://eunii.github.io/2019/04/15/tec/blog/blog8/</id>
    <published>2019-04-15T11:40:25.000Z</published>
    <updated>2019-05-13T07:24:38.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-blog-source-posts-아래에-postname-md-파일-만들기"><a href="#1-blog-source-posts-아래에-postname-md-파일-만들기" class="headerlink" title="1. ~/blog/source/_posts/ 아래에 postname.md 파일 만들기."></a>1. ~/blog/source/_posts/ 아래에 postname.md 파일 만들기.</h2><p>파일을 만든 후 아래 내용을 입력한다. </p> <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: &quot;[Hexo와 깃허브로 블로그 만들기] Hexo 블로그 포스트 쓰기&quot;</span><br><span class="line">categories:</span><br><span class="line">   [test]</span><br><span class="line">tags:</span><br><span class="line">   [test]</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## Hello World!</span><br></pre></td></tr></table></figure><h2 id="2-jekyll-포스트-hexo로-옮기기"><a href="#2-jekyll-포스트-hexo로-옮기기" class="headerlink" title="2. jekyll 포스트 hexo로 옮기기"></a>2. jekyll 포스트 hexo로 옮기기</h2><p><a href="https://hexo.io/docs/migration#Jekyll" rel="external nofollow noopener noreferrer" target="_blank">jekyll migratorn 참고 링크</a></p><ol><li>지킬 프로젝트에서 _posts/하위 폴더 다 복사 후 hexo 프로젝트 /source/_posts/에다 붙여넣기.  </li><li>포스트 제목을 2019-01-01-name.md의 형식을 name.md로 변경.  </li><li>포스트 내용의 Front-matter 부분을 알맞게 수정</li><li>포스트안에 이미지나 다른 첨부 내용이 있다면 같이 옮겨줌. <ul><li>지킬의 /assests/images/ 폴더를 hexo의 blog/source/assets/images 로복사해줌</li></ul></li><li>이미지 첨부가 맞지 않을 경우 hexo 서버가 에러가 남.  </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-blog-source-posts-아래에-postname-md-파일-만들기&quot;&gt;&lt;a href=&quot;#1-blog-source-posts-아래에-postname-md-파일-만들기&quot; class=&quot;headerlink&quot; title=&quot;1. ~/blo
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/categories/tec/blog/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/tags/blog/"/>
    
      <category term="github" scheme="https://eunii.github.io/tags/github/"/>
    
      <category term="hexo" scheme="https://eunii.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[Hexo와 깃허브로 블로그 만들기] Hexo 테마 적용</title>
    <link href="https://eunii.github.io/2019/04/14/tec/blog/blog7/"/>
    <id>https://eunii.github.io/2019/04/14/tec/blog/blog7/</id>
    <published>2019-04-14T11:40:25.000Z</published>
    <updated>2019-07-06T06:40:04.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Hexo-테마-고르기"><a href="#1-Hexo-테마-고르기" class="headerlink" title="1. Hexo 테마 고르기"></a>1. Hexo 테마 고르기</h2><p><a href="https://hexo.io/themes/" rel="external nofollow noopener noreferrer" target="_blank">Hexo 이쁜 테마 고르러 가기</a></p><h2 id="2-icarus-테마-적용하기"><a href="#2-icarus-테마-적용하기" class="headerlink" title="2. icarus 테마 적용하기"></a>2. icarus 테마 적용하기</h2><p>블로그 프로젝트 경로($ cd ~/blog/) 아래 blog/themes/icarus 폴더를 만들어 git 테마를 clone한다. </p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><h2 id="3-blog-themes-icarus-config-yml-파일에서-theme-설정을-icarus로-변경한다"><a href="#3-blog-themes-icarus-config-yml-파일에서-theme-설정을-icarus로-변경한다" class="headerlink" title="3. ~/blog/themes/icarus/_config.yml 파일에서 theme 설정을 icarus로 변경한다."></a>3. ~/blog/themes/icarus/_config.yml 파일에서 theme 설정을 icarus로 변경한다.</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: icarus</span><br></pre></td></tr></table></figure><h2 id="4-hexo-서버-재시작-한다"><a href="#4-hexo-서버-재시작-한다" class="headerlink" title="4. hexo 서버 재시작 한다."></a>4. hexo 서버 재시작 한다.</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>localhost:4000에서 적용된 테마를 확인한다.  </p><h2 id="5-github에-배포한다"><a href="#5-github에-배포한다" class="headerlink" title="5. github에 배포한다."></a>5. github에 배포한다.</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Hexo-테마-고르기&quot;&gt;&lt;a href=&quot;#1-Hexo-테마-고르기&quot; class=&quot;headerlink&quot; title=&quot;1. Hexo 테마 고르기&quot;&gt;&lt;/a&gt;1. Hexo 테마 고르기&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/categories/tec/blog/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/tags/blog/"/>
    
      <category term="github" scheme="https://eunii.github.io/tags/github/"/>
    
      <category term="hexo" scheme="https://eunii.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[SQL] 함수</title>
    <link href="https://eunii.github.io/2019/04/14/tec/sql/sql5/"/>
    <id>https://eunii.github.io/2019/04/14/tec/sql/sql5/</id>
    <published>2019-04-14T11:40:25.000Z</published>
    <updated>2019-05-13T07:27:08.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-문자열-함수"><a href="#1-문자열-함수" class="headerlink" title="1. 문자열 함수"></a>1. 문자열 함수</h2><h3 id="LOWER-문자열"><a href="#LOWER-문자열" class="headerlink" title="LOWER(문자열)"></a>LOWER(문자열)</h3><ul><li>문자열 소문자로 변경  <h3 id="UPPER-문자열"><a href="#UPPER-문자열" class="headerlink" title="UPPER(문자열)"></a>UPPER(문자열)</h3></li><li>문자열 대문자로 변경<h3 id="ASCII-문자"><a href="#ASCII-문자" class="headerlink" title="ASCII(문자)"></a>ASCII(문자)</h3></li><li>문자, 숫자를 ASCII로 변경<h3 id="CONCAT-문자열1-문자열2"><a href="#CONCAT-문자열1-문자열2" class="headerlink" title="CONCAT(문자열1, 문자열2)"></a>CONCAT(문자열1, 문자열2)</h3></li><li>문자열1과 문자열 2 합침(||와 같은 기능)<h3 id="SUBSTR-문자열-M-N"><a href="#SUBSTR-문자열-M-N" class="headerlink" title="SUBSTR(문자열, M [,N])"></a>SUBSTR(문자열, M [,N])</h3></li><li>문자열 중에 M부터 N개의 문자 리턴(N이 없으면 M부터 끝까지 리턴)  <h3 id="LENGTH-문자열"><a href="#LENGTH-문자열" class="headerlink" title="LENGTH(문자열)"></a>LENGTH(문자열)</h3></li><li>문자열 개수 리턴<h3 id="LTRIM-문자열-지정문자"><a href="#LTRIM-문자열-지정문자" class="headerlink" title="LTRIM(문자열 [,지정문자])"></a>LTRIM(문자열 [,지정문자])</h3></li><li>문자열의 첫 문자부터 지정문자를 제거함(지정문자 생략시 “”공백 제거)<h3 id="RTRIM-문자열-지정문자"><a href="#RTRIM-문자열-지정문자" class="headerlink" title="RTRIM(문자열 [,지정문자])"></a>RTRIM(문자열 [,지정문자])</h3></li><li>문자열 제일 마지막부터 지정문자를 제거함(지정문자 생략시 “”공백제거)<h3 id="TRIM-지정문자-FROM-문자열"><a href="#TRIM-지정문자-FROM-문자열" class="headerlink" title="TRIM(지정문자 FROM 문자열)"></a>TRIM(지정문자 FROM 문자열)</h3></li><li>문자열의 양끝의 지정문자 제거  </li></ul><h2 id="2-숫자형-함수"><a href="#2-숫자형-함수" class="headerlink" title="2. 숫자형 함수"></a>2. 숫자형 함수</h2><h3 id="ABS-숫자"><a href="#ABS-숫자" class="headerlink" title="ABS(숫자)"></a>ABS(숫자)</h3><ul><li>숫자의 절대값 리턴<h3 id="SING-숫자"><a href="#SING-숫자" class="headerlink" title="SING(숫자)"></a>SING(숫자)</h3></li><li>숫자의 양수, 음수, 0을 구분(결과값 -1 OR 0 OR 1)<h3 id="MOD-숫자1-숫자2"><a href="#MOD-숫자1-숫자2" class="headerlink" title="MOD(숫자1, 숫자2)"></a>MOD(숫자1, 숫자2)</h3></li><li>숫자1/숫자2의 나머지 리턴<h3 id="CEIL-숫자"><a href="#CEIL-숫자" class="headerlink" title="CEIL(숫자)"></a>CEIL(숫자)</h3></li><li>숫자보다 크거나 같은 최소 정수리턴<h3 id="FLOOR-숫자"><a href="#FLOOR-숫자" class="headerlink" title="FLOOR(숫자)"></a>FLOOR(숫자)</h3></li><li>숫자봗 작거나 같은 최대정수리턴<h3 id="ROUND-숫자-M"><a href="#ROUND-숫자-M" class="headerlink" title="ROUND(숫자 [,M])"></a>ROUND(숫자 [,M])</h3></li><li>숫자를 M+1자리에서 반올림해서 리턴(M의 DEFAULT는 0)<h3 id="TRUNC-숫자-M"><a href="#TRUNC-숫자-M" class="headerlink" title="TRUNC(숫자[,M])"></a>TRUNC(숫자[,M])</h3></li><li>숫자를 M+1자리에서 버림해서 리턴(M의 DEFAULT는0)<h3 id="EXP-POWER-SQRT-LOG"><a href="#EXP-POWER-SQRT-LOG" class="headerlink" title="EXP(),POWER(),SQRT(),LOG()"></a>EXP(),POWER(),SQRT(),LOG()</h3></li><li>지수, 거듭제곱, 제곱근, 로그값 리턴  </li></ul><h2 id="3-날짜형-함수"><a href="#3-날짜형-함수" class="headerlink" title="3. 날짜형 함수"></a>3. 날짜형 함수</h2><h3 id="SYSDATE"><a href="#SYSDATE" class="headerlink" title="SYSDATE"></a>SYSDATE</h3><ul><li>현재 날짜, 시각 출력<h3 id="EXTRACT-‘YEAR’-FROM-d"><a href="#EXTRACT-‘YEAR’-FROM-d" class="headerlink" title="EXTRACT(‘YEAR’ FROM d)"></a>EXTRACT(‘YEAR’ FROM d)</h3></li><li>d 날짜에서 ‘YEAR’(년) 추출(YEAR에 MONTY, DAY 입력가능)<h3 id="TO-NUMBER-TO-CHAR-D-’YYYY’"><a href="#TO-NUMBER-TO-CHAR-D-’YYYY’" class="headerlink" title="TO_NUMBER(TO_CHAR(D,’YYYY’))"></a>TO_NUMBER(TO_CHAR(D,’YYYY’))</h3></li><li>날짜데이터에서 년도 출력<h3 id="TO-NUMBER-TO-CHAR-D-’MM’"><a href="#TO-NUMBER-TO-CHAR-D-’MM’" class="headerlink" title="TO_NUMBER(TO_CHAR(D,’MM’))"></a>TO_NUMBER(TO_CHAR(D,’MM’))</h3></li><li>날짜데이터에서 월도 출력<h3 id="TO-NUMBER-TO-CHAR-D-’DD’"><a href="#TO-NUMBER-TO-CHAR-D-’DD’" class="headerlink" title="TO_NUMBER(TO_CHAR(D,’DD’))"></a>TO_NUMBER(TO_CHAR(D,’DD’))</h3></li><li>날짜데이터에서 일 출력  </li></ul><h2 id="4-변환형-함수"><a href="#4-변환형-함수" class="headerlink" title="4. 변환형 함수"></a>4. 변환형 함수</h2><h3 id="TO-NUMBER-문자열"><a href="#TO-NUMBER-문자열" class="headerlink" title="TO_NUMBER(문자열)"></a>TO_NUMBER(문자열)</h3><ul><li>문자열을 숫자로 변환<h3 id="TO-CHAR-숫자-날짜-FOMAT"><a href="#TO-CHAR-숫자-날짜-FOMAT" class="headerlink" title="TO_CHAR(숫자|날짜 [,FOMAT])"></a>TO_CHAR(숫자|날짜 [,FOMAT])</h3></li><li>숫자나 날짜를 주어진 포맷형태로 문자열 타입으로 변환<h3 id="TO-DATE-문자열-FOMAT"><a href="#TO-DATE-문자열-FOMAT" class="headerlink" title="TO_DATE(문자열[,FOMAT])"></a>TO_DATE(문자열[,FOMAT])</h3></li><li>문자열을 주어진 포맷 형태로 날짜타입으로 변환  </li></ul><h2 id="5-CASE표현"><a href="#5-CASE표현" class="headerlink" title="5.CASE표현"></a>5.CASE표현</h2><h3 id="함수의-성질을-가지고-있어-중첨해서-사용할-수-있음"><a href="#함수의-성질을-가지고-있어-중첨해서-사용할-수-있음" class="headerlink" title="함수의 성질을 가지고 있어 중첨해서 사용할 수 있음"></a>함수의 성질을 가지고 있어 중첨해서 사용할 수 있음</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line">  SIMPLE_CASE_EXPRESSION 조건</span><br><span class="line">  ESLE 표현절</span><br><span class="line"><span class="hljs-keyword">END</span></span><br></pre></td></tr></table></figure><ul><li>예제)  <figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment">--예제1</span></span><br><span class="line"><span class="hljs-keyword">SELECT</span> ENAME,</span><br><span class="line">      <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> SAL&gt;<span class="hljs-number">2000</span></span><br><span class="line">           <span class="hljs-keyword">THEN</span> SAL</span><br><span class="line">           <span class="hljs-keyword">ELSE</span> <span class="hljs-number">2000</span></span><br><span class="line">      <span class="hljs-keyword">END</span> REVISED_SALARY</span><br><span class="line"><span class="hljs-keyword">FROM</span> EMP;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">--예제2)</span></span><br><span class="line"><span class="hljs-keyword">SELECT</span> LOC,</span><br><span class="line">     <span class="hljs-keyword">CASE</span> LOC</span><br><span class="line">     <span class="hljs-keyword">WHEN</span> <span class="hljs-string">'NEW YORK'</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">'EAST'</span></span><br><span class="line">     <span class="hljs-keyword">WHEN</span> <span class="hljs-string">'CHICAGO'</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">'CENTER'</span></span><br><span class="line">     <span class="hljs-keyword">ELSE</span> <span class="hljs-string">'ETC'</span></span><br><span class="line">     <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> AREA</span><br><span class="line"><span class="hljs-keyword">FROM</span> DEPT;</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-NULL관련함수"><a href="#6-NULL관련함수" class="headerlink" title="6.NULL관련함수"></a>6.NULL관련함수</h2><h3 id="연산"><a href="#연산" class="headerlink" title="연산"></a>연산</h3><p>NULL+숫자=NULL;(사칙연산 모두 포함)<br>NULL+문자열=NULL;  </p><h3 id="NVL-표현식1-표현식2"><a href="#NVL-표현식1-표현식2" class="headerlink" title="NVL(표현식1, 표현식2)"></a>NVL(표현식1, 표현식2)</h3><ul><li>표현식 1 이NULL이면 표현식 2를 출력(두 표현식의 데이터 타입이 같아야함)<h3 id="NULLIF-표현식1-표현식2"><a href="#NULLIF-표현식1-표현식2" class="headerlink" title="NULLIF(표현식1, 표현식2)"></a>NULLIF(표현식1, 표현식2)</h3></li><li>표현식1이 표현식2와 같으면 NULL, 아니면 표현식1 출력<h3 id="COALESCE-표현식1-표현식N"><a href="#COALESCE-표현식1-표현식N" class="headerlink" title="COALESCE(표현식1,..,표현식N)"></a>COALESCE(표현식1,..,표현식N)</h3></li><li>임의의 개수 표현식에서 NULL이 아닌 최초의 표현식 리턴,</li><li>모든 표현식이 NULL이면 NULLD을 리턴<h3 id="NULL과-공집합"><a href="#NULL과-공집합" class="headerlink" title="NULL과 공집합"></a>NULL과 공집합</h3>테이블 안에 값이 NULL이면 NULL, 테이블 이 선택안되면 공집합<br>공집합을 NULL로 바꾸기 위해 적절한 함수 사용 EX)MAX()</li></ul><h3 id="NULLIF"><a href="#NULLIF" class="headerlink" title="NULLIF"></a>NULLIF</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">--사원 테이블에서 MGR과 7698이 같으면 NULL, 다르면 MGR 표시하라. </span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">SELECT</span> ENAME, EMPNO, MGR, <span class="hljs-keyword">NULLIF</span>(MGR, <span class="hljs-number">7698</span>) NUIF</span><br><span class="line"><span class="hljs-keyword">FROM</span> EMP;</span><br></pre></td></tr></table></figure><h3 id="COALESCE"><a href="#COALESCE" class="headerlink" title="COALESCE"></a>COALESCE</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">--사원테이블에서 커미션을 1차선택값, 급여를 2차 선택값으로 선택하되 </span></span><br><span class="line"><span class="hljs-comment">--두 칼럼 모두 NULL이면 NULL로 표시</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">SELECT</span> ENAME, COMM, SAL, <span class="hljs-keyword">COALESCE</span>(COMM, SAL) COAL</span><br><span class="line"><span class="hljs-keyword">FROM</span> EMP;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">--다른방법</span></span><br><span class="line"><span class="hljs-keyword">SELECT</span> ENAME, COMM, SAL</span><br><span class="line">     <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> COMM <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span></span><br><span class="line">          <span class="hljs-keyword">THEN</span> COMM</span><br><span class="line">          <span class="hljs-keyword">ELSE</span> (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> SAL <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span></span><br><span class="line">                     <span class="hljs-keyword">THEN</span> SAL</span><br><span class="line">                     <span class="hljs-keyword">ELSE</span> <span class="hljs-literal">NULL</span></span><br><span class="line">                <span class="hljs-keyword">END</span>)</span><br><span class="line">      <span class="hljs-keyword">END</span> COAL</span><br><span class="line"><span class="hljs-keyword">FROM</span> EMP;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-문자열-함수&quot;&gt;&lt;a href=&quot;#1-문자열-함수&quot; class=&quot;headerlink&quot; title=&quot;1. 문자열 함수&quot;&gt;&lt;/a&gt;1. 문자열 함수&lt;/h2&gt;&lt;h3 id=&quot;LOWER-문자열&quot;&gt;&lt;a href=&quot;#LOWER-문자열&quot; class=&quot;
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="sql" scheme="https://eunii.github.io/categories/tec/sql/"/>
    
    
      <category term="sql" scheme="https://eunii.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>[Hexo와 깃허브로 블로그 만들기] jykell에서 hexo로 블로그 이전하기</title>
    <link href="https://eunii.github.io/2019/04/13/tec/blog/blog6/"/>
    <id>https://eunii.github.io/2019/04/13/tec/blog/blog6/</id>
    <published>2019-04-13T11:40:25.000Z</published>
    <updated>2019-07-06T06:37:07.074Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>hexo테마가 이쁜게 많아서 바꾸기로 함.  </p></blockquote><h2 id="1-Node-js설치"><a href="#1-Node-js설치" class="headerlink" title="1. Node.js설치"></a>1. Node.js설치</h2><p><a href="https://nodejs.org/en/" rel="external nofollow noopener noreferrer" target="_blank">nodejs 설치하러 가기</a></p><h2 id="2-Git-설치"><a href="#2-Git-설치" class="headerlink" title="2. Git 설치"></a>2. Git 설치</h2><p><a href="https://git-scm.com" rel="external nofollow noopener noreferrer" target="_blank">git 설치하러 가기</a></p><h2 id="3-Hexo-설치"><a href="#3-Hexo-설치" class="headerlink" title="3. Hexo 설치"></a>3. Hexo 설치</h2><p><a href="https://hexo.io/ko/docs/" rel="external nofollow noopener noreferrer" target="_blank">hexo 설치하러 가기</a></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="4-블로그-시작하기"><a href="#4-블로그-시작하기" class="headerlink" title="4. 블로그 시작하기"></a>4. 블로그 시작하기</h2><p>git bash쉘에서 블로그 프로젝트를 구성할 디렉터리 위치에 가서 아래와 같이 실행한다.</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="hljs-built_in">cd</span> blog</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>hexo server가 <a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000</a> 으로 실행됨.  </p><h2 id="5-blog-config-yml-파일-수정하기"><a href="#5-blog-config-yml-파일-수정하기" class="headerlink" title="5. blog/_config.yml 파일 수정하기"></a>5. blog/_config.yml 파일 수정하기</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">url: http://yoursite.com </span><br><span class="line"></span><br><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/crlo2/crlo2.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>deploy 항목을 저렇게 수정하면 hexo가 명령어로 자동 배포 및 생성을 해준다.</p><h2 id="6-hexo-deployer-설치"><a href="#6-hexo-deployer-설치" class="headerlink" title="6. hexo deployer 설치"></a>6. hexo deployer 설치</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="7-hexo-생성-및-git-레포지토리에-배포"><a href="#7-hexo-생성-및-git-레포지토리에-배포" class="headerlink" title="7. hexo 생성 및 git 레포지토리에 배포"></a>7. hexo 생성 및 git 레포지토리에 배포</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><p>이렇게 배포를 해줘야만 <a href="https://clro2.github.io" rel="external nofollow noopener noreferrer" target="_blank">https://clro2.github.io</a> 주소로 접속하면 블로그 화면이 보인다.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;hexo테마가 이쁜게 많아서 바꾸기로 함.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-Node-js설치&quot;&gt;&lt;a href=&quot;#1-Node-js설치&quot; class=&quot;headerlink&quot; title=&quot;1. Node.js
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/categories/tec/blog/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/tags/blog/"/>
    
      <category term="github" scheme="https://eunii.github.io/tags/github/"/>
    
      <category term="hexo" scheme="https://eunii.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[SQL] WHERE절</title>
    <link href="https://eunii.github.io/2019/04/13/tec/sql/sql4/"/>
    <id>https://eunii.github.io/2019/04/13/tec/sql/sql4/</id>
    <published>2019-04-13T11:40:25.000Z</published>
    <updated>2019-05-13T07:27:08.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-연산자-종류"><a href="#1-연산자-종류" class="headerlink" title="1. 연산자 종류"></a>1. 연산자 종류</h2><h3 id="비교연산자"><a href="#비교연산자" class="headerlink" title="비교연산자"></a>비교연산자</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">=</span><br><span class="line">&gt;</span><br><span class="line">&lt;=</span><br><span class="line">&gt;</span><br><span class="line">&gt;=</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### SQL연산자</span><br><span class="line">- BETWEEN a AND b  </span><br><span class="line">(a 이상, b이하의 값)</span><br><span class="line">- IN(a,b,c)  </span><br><span class="line">(a,b,c중 하나라도 일치하는 값이 있으면 true)</span><br><span class="line">- LKIE &apos;비교문자열&apos;  </span><br><span class="line">비교문자열과 형태일치(%, _)</span><br><span class="line">- IS NULL  </span><br><span class="line">NULL인 경우(=NULL은 사용할 수 없음)  </span><br><span class="line"></span><br><span class="line">### 논리연산자</span><br><span class="line">- AND</span><br><span class="line">- OR</span><br><span class="line">- NOT  </span><br><span class="line"></span><br><span class="line">### 부정비교연산자  </span><br><span class="line">- !=  </span><br><span class="line">(같지 않다)</span><br><span class="line">- NOT 칼럼명= a  </span><br><span class="line">(칼럼명의 값과 a가 같지 않다)</span><br><span class="line">- NOT 칼럼명 &gt; a  </span><br><span class="line">(a보다 칼럼명의 값이 크다)  </span><br><span class="line"></span><br><span class="line">### 부정SQL연산자</span><br><span class="line">- NOT BETWEEN a AND b  </span><br><span class="line">(a와 b사이에 있지 않다. a,b 포함하지 않음)</span><br><span class="line">- NOT IN(a,b,c)  </span><br><span class="line">(a,b,c값과 일치 하지 않음)</span><br><span class="line">- IS NOT NULL  </span><br><span class="line">(NULL 값을 갖지 않음, !=NULL 사용불가)  </span><br><span class="line"></span><br><span class="line">## 2.비교연산자</span><br><span class="line"></span><br><span class="line">- STRING은 &apos;&apos;나 &quot;&quot;으로 묶어서 사용</span><br><span class="line">- 숫자는 &quot;&quot;,&apos;&apos;사용 안 함</span><br><span class="line"></span><br><span class="line">예제)  </span><br><span class="line"></span><br><span class="line">COFFEELIST 테이블에서 브랜드가 스타벅스 커피중에 가격이 5000원 이하이고 용량이 200m이상인 커피의 브랜드, 종류, 가격, 용량순으로 조회하시오.  </span><br><span class="line">```sql</span><br><span class="line">SELECT  브랜드, 종류, 가격 FROM COFFEELIST</span><br><span class="line">WHERE 브랜드 = &apos;스타벅스&apos; AND 가격 &lt;=5000 AND 용량 &gt;=200;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### 문자유형 비교방법  </span><br><span class="line">**CHAR VS CHAR**</span><br><span class="line">- 길이가 다른 CHAR은 작은쪽에 SPACE추가하여 비교</span><br><span class="line">- 서로 다른 문자가 나올때 까지 비교</span><br><span class="line">- 달라진 첫 문자의 값에 따라 크기 결정</span><br><span class="line">- BLANK 수만 다르면 서로 같은 값으로 결정</span><br><span class="line"></span><br><span class="line">**VARCHAR2 VS CHAR**</span><br><span class="line">- 서로다른 문자가 나올때까지 비교</span><br><span class="line">- 길이다 다르면 짧은것이 끝날때까지만 비교 후 길이가 긴 것이 긴것으로 결정</span><br><span class="line">- 길이가 같고 같은것이 없으면 같은것으로 결정</span><br><span class="line">- VARCHAR2는  NOT NULL까지 길이를 말함(?)</span><br><span class="line"></span><br><span class="line">**NUMVER VS 문자열**</span><br><span class="line">- 상수를 변수 타입과 동일하겨 변경 후 비교</span><br><span class="line">- 변수쪽이 CHAR 유형 타입이면 CAHR VS CHAR 적용</span><br><span class="line">- 변수쪽이 VARCHAR2유형 타입이면 VARCHAR2 VS CHAR 적용  </span><br><span class="line"></span><br><span class="line">## 3. SQL 연산자</span><br><span class="line">- 모든 데이터 타입에 적용가능한 연산자 소개  </span><br><span class="line">### IN(a,b,c) 연산자</span><br><span class="line">- ()안에든 조건 중 하나와 일치하면 참    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">예제1)  </span><br><span class="line">COFFEELIST 테이블에서 브랜드가 스타벅스, 커피빈, 이디아인 데이터를 모두 조회하시오.  </span><br><span class="line">```sql</span><br><span class="line">SELECT * FROM COFFEELIST</span><br><span class="line">WHERE 브랜드 IN(&apos;스타벅스&apos;, &apos;커피빈&apos;, &apos;이디아&apos;);</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">예제2)  </span><br><span class="line">COFFEELIST  테이블에서 브랜드가 스타벅스이면서 가격이 5000원 이거나, 브랜드가 이디아이면서 가격이 3000원인 커피 데이터를 모두 조회 하시오.  </span><br><span class="line">* 결과 데이터 : 스벅 5000원커피 , 이디아 3000원 커피  </span><br><span class="line">```sql</span><br><span class="line">SELECT * FROM COFFEELIST</span><br><span class="line">WHERE (브랜드, 가격) IN((&apos;스타벅스&apos;,5000),(&apos;이디아&apos;, 3000));</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">예제3)  </span><br><span class="line">COFFEELIST 테이블에서  브랜드가 스타벅스이거나 이디아이고, 가격이 5000원이거나 3000원인 데이터를 모두 조회하시오.  </span><br><span class="line">(예제2번과 결과가 다르다 비교하길)  </span><br><span class="line">* 결과 데이터 : 스벅 5000원 커피, 스벅 3000원커피, 이디아 5000원 커피, 이디아 3000원 커피   </span><br><span class="line">```sql</span><br><span class="line">SELECT * FROM COFFEELIST</span><br><span class="line">WHERE 브랜드 IN(&apos;스타벅스&apos;,&apos;이디아&apos;) OR 가격 IN(5000, 3000);</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### LIKE 연산자</span><br><span class="line">- %는 아무 데이터나 다 받음</span><br><span class="line">- _는 한표시당 한 글자만 받음  </span><br><span class="line"></span><br><span class="line">예제)  </span><br><span class="line">COFFEELSIST테이블에서 종업원 성이 김 씨인 커피점 조회하시오.  </span><br><span class="line">```sql</span><br><span class="line">SELECT * FROM COFFEELIST</span><br><span class="line">WHERE 종업원 LIKE &apos;김%&apos;;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### BETWEEN a AND b 연산자  </span><br><span class="line"></span><br><span class="line">예제)  </span><br><span class="line">COFFEELIST테이블에서 가격이 3000에서 5000원인 데이터 조회.  </span><br><span class="line">* 결과값 : 커피가격이 3000원이상 5000원이하인 커피 데이터 리스트  </span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">SELECT * FROM COFFEELIST</span><br><span class="line">WHERE 가격 BETWEEN 3000 AND 5000;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### IS NULL 연산자</span><br><span class="line">- NULL 과 수치 연산은 NULL값 리턴</span><br><span class="line">- NULL과 비교연산은 FALSE리턴</span><br><span class="line">- 특정값과 비교할 수 없고  크기 비교 불가  </span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">SELECT * FROM COFFEELIST</span><br><span class="line">WHERE 브랜드 = NULL;</span><br><span class="line">--결과값 : 선택된 레고드가 없음. (브랜드 = NULL)이 FALSE이기 때문</span><br><span class="line"></span><br><span class="line">SELECT * FROM COFFEELIST</span><br><span class="line">WHERE 브랜드 IS NULL;</span><br><span class="line">--결과값 : 브랜드칼럼에 NULL이 들어가있는 데이터 조회</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">## 4. 논리연산자</span><br><span class="line">### AND  </span><br><span class="line">해당되는 조건이 모두 참이어야 참</span><br><span class="line">### OR  </span><br><span class="line">앞뒤의 조건 중 하나라도 참이면 참</span><br><span class="line">### NOT</span><br><span class="line">뒤에오는 조건과 반대되는 결과 리턴</span><br><span class="line">- 연산자의 우선순위  </span><br><span class="line">(), NOT, AND, OR 순서이므로 ()를 적절히 사용하여 원하는 조건을 형성해야함   </span><br><span class="line"></span><br><span class="line">## 5. 부정연산자</span><br><span class="line">### 논리부정연산자</span><br><span class="line">### 부정 SQL연산자  </span><br><span class="line"></span><br><span class="line">## 6. ROWNUM</span><br><span class="line">### ROWUNUM</span><br><span class="line">- 임시로 부여되는 행 번호</span><br><span class="line">- 테이블에서 원하는 행만 가져올때 WHERE절에서 행의 개수를 제한하는 목적으로 사용</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">--1행만 가져올때</span><br><span class="line">SELECT * FROM COFFEELIST WHERE ROWNUM=1;</span><br><span class="line">SELECT * FROM COFFEELIST WHERE ROWNUM&lt;=1;</span><br><span class="line">SELECT * FROM COFFEELIST WHERE ROWNUM&lt;2;</span><br><span class="line"></span><br><span class="line">--2행 이상 가져올때</span><br><span class="line">SELECT * FROM COFFEELIST WHERE ROWNUM&lt;=3;</span><br><span class="line">SELECT * FROM COFFEELIST WHERE ROWNUM=3;--이건 사용불가(무조건 1행부터 데이터를 가져오기때문)</span><br><span class="line">--고유한 키나 인덱스로 활용가능</span><br><span class="line">UPDATE MY_TABLE SET COLUMN1 = ROWNNUM;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-연산자-종류&quot;&gt;&lt;a href=&quot;#1-연산자-종류&quot; class=&quot;headerlink&quot; title=&quot;1. 연산자 종류&quot;&gt;&lt;/a&gt;1. 연산자 종류&lt;/h2&gt;&lt;h3 id=&quot;비교연산자&quot;&gt;&lt;a href=&quot;#비교연산자&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="sql" scheme="https://eunii.github.io/categories/tec/sql/"/>
    
    
      <category term="sql" scheme="https://eunii.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>[SQL] TCL(TRANSACTION CONTROL LANGUAGE)</title>
    <link href="https://eunii.github.io/2019/04/12/tec/sql/sql3/"/>
    <id>https://eunii.github.io/2019/04/12/tec/sql/sql3/</id>
    <published>2019-04-12T11:40:25.000Z</published>
    <updated>2019-05-13T07:27:08.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-개요"><a href="#1-개요" class="headerlink" title="1.개요"></a>1.개요</h2><ul><li>데이터베이스의 논리적 연산단위</li><li>한 개 이상의 데이터베이스 조작단위(하나 이상의 SQL구문포함)</li><li>ALL OR NOTHING개념</li><li>특성 :  <ul><li>원자성(atomicity)-정의된 연산이 모두 성공해야함.하나라도 실패시 모두 실행하지 않음.</li><li>일관성(consistency)-실행전에 내용잘못이 없다면 실행후 데이터베이스의 내용에 잘못이 있으면 안 됨</li><li>고립성(isolation)-다른 트랜잭션의 영향을 받으면 안 됨</li><li>지속성(durability)-성공한 트랜잭션이 생신한 데이터베이스내용은 영구적으로 저장  </li></ul></li></ul><h2 id="2-COMMIT"><a href="#2-COMMIT" class="headerlink" title="2.COMMIT"></a>2.COMMIT</h2><h3 id="COMMIT"><a href="#COMMIT" class="headerlink" title="COMMIT"></a>COMMIT</h3><ul><li>입력이나 수정한 자료를 저장하고싶을때 COMMIT명령을 내려 저장<br>(COMMIT전)  </li><li>BUFFER에만 영향을 받았기에 데이터 변경 이전상태로 복구가능</li><li>현재 사용자가 SELECT 문장으로 결과 확인 가능</li><li>다른 사용자는 현재 사용자가 수행한 명령의 결과를 볼 수 없음</li><li>변경된 행은 잠금(LOCKING)이 설정되어 다른 사용자가 변경할 수없음<br>(COMMIT후)</li><li>데이터 변경사항이 데이터베이스에 반영</li><li>이전데이터 영구삭제</li><li>모든 사용자가 결과 확인가능</li><li>관련된 행의 잠금이 해제, 다른사용자들이 조작가능</li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">-- 데이터 수정 변경 후</span></span><br><span class="line"><span class="hljs-keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h3 id="AUTO-COMMIT-SQL-Sever방식"><a href="#AUTO-COMMIT-SQL-Sever방식" class="headerlink" title="AUTO COMMIT(SQL Sever방식)"></a>AUTO COMMIT(SQL Sever방식)</h3><ul><li>DDL,DML이 수행될 때마다 DBMS가 트랜잭션 컨트롤하는방식,<br>명령이 성공적으로 수행되면 자동으로 COMMTI,<br>실패하면 ROLLBACK됨  </li></ul><h3 id="암시적트랜잭션-ORACLE방식"><a href="#암시적트랜잭션-ORACLE방식" class="headerlink" title="암시적트랜잭션(ORACLE방식)"></a>암시적트랜잭션(ORACLE방식)</h3><ul><li>트랜젝션 시작은 DBMS가, 끝은 사용자가 COMMIT, ROLLBACK으로 처리  </li></ul><h3 id="명시적트랜잭션"><a href="#명시적트랜잭션" class="headerlink" title="명시적트랜잭션"></a>명시적트랜잭션</h3><ul><li>트랜젝션 시작과 끝을 사용자가 BEGIN TRANSACTION || COMMIT TRANSACTION ,<br>ROLLBACK TRANSACTION으로 처리  </li></ul><h2 id="3-ROLLBACK"><a href="#3-ROLLBACK" class="headerlink" title="3.ROLLBACK"></a>3.ROLLBACK</h2><h3 id="ROLLBACK"><a href="#ROLLBACK" class="headerlink" title="ROLLBACK"></a>ROLLBACK</h3><ul><li>데이터 이전상태로 복구, 관련된 행에 대한 잠금이 풀림<figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">--데이터 수정 변경 후</span></span><br><span class="line"><span class="hljs-keyword">ROLLBACK</span>;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">## 4.SAVEPOINT</span></span><br><span class="line"><span class="hljs-comment">### SAVEPOINT</span></span><br><span class="line">- <span class="hljs-keyword">ROLLBACK</span>이 실행될 저장점을 지정</span><br><span class="line">- 복수저장점 정의가능</span><br><span class="line">- 먼저 정의된 <span class="hljs-keyword">SAVEPOINT</span>로 롤백할 경우 이후 저장된 <span class="hljs-keyword">SAVEPOINT</span>로 되돌릴 수 없음</span><br><span class="line">- <span class="hljs-keyword">DDL</span>문장을 실행하면 자동커밋됨</span><br><span class="line">- DML 명령 후 <span class="hljs-keyword">DDL</span>명령을 입력시 DML, <span class="hljs-keyword">DDL</span> 명령모두 자동커밋</span><br><span class="line">- 데이터베이스 정상종료하면 자동 커밋</span><br><span class="line">- 어플리케이션 이상 종료는 자동 롤백</span><br><span class="line"><span class="hljs-string">``</span><span class="hljs-string">`sql</span></span><br><span class="line"><span class="hljs-string">SAVEPOINT SVPT1;</span></span><br><span class="line"><span class="hljs-string">ROLLBACT TO SVPT1;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">SAVE TRANSACTION SVPT2;</span></span><br><span class="line"><span class="hljs-string">ROLLBACK TRANSACTION SVPT2;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-개요&quot;&gt;&lt;a href=&quot;#1-개요&quot; class=&quot;headerlink&quot; title=&quot;1.개요&quot;&gt;&lt;/a&gt;1.개요&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;데이터베이스의 논리적 연산단위&lt;/li&gt;
&lt;li&gt;한 개 이상의 데이터베이스 조작단위(하나 이상의 SQL
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="sql" scheme="https://eunii.github.io/categories/tec/sql/"/>
    
    
      <category term="sql" scheme="https://eunii.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>[JEKYLL과 깃허브로 블로그 만들기] 검색 메뉴(Search)만들기</title>
    <link href="https://eunii.github.io/2019/04/12/tec/blog/blog5/"/>
    <id>https://eunii.github.io/2019/04/12/tec/blog/blog5/</id>
    <published>2019-04-12T11:40:25.000Z</published>
    <updated>2019-05-13T07:24:39.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-config-yml-파일-수정하기"><a href="#1-config-yml-파일-수정하기" class="headerlink" title="1. /_config.yml 파일 수정하기"></a>1. /_config.yml 파일 수정하기</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search: true</span><br></pre></td></tr></table></figure><p>위의 내용 추가</p><h2 id="2-완성"><a href="#2-완성" class="headerlink" title="2. 완성"></a>2. 완성</h2><p><img src="/assets/images/nav.JPG" alt="캡쳐"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-config-yml-파일-수정하기&quot;&gt;&lt;a href=&quot;#1-config-yml-파일-수정하기&quot; class=&quot;headerlink&quot; title=&quot;1. /_config.yml 파일 수정하기&quot;&gt;&lt;/a&gt;1. /_config.yml 파일 수정하기
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/categories/tec/blog/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/tags/blog/"/>
    
      <category term="jekyll" scheme="https://eunii.github.io/tags/jekyll/"/>
    
      <category term="github" scheme="https://eunii.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>[JEKYLL과 깃허브로 블로그 만들기] 네비게이션 메뉴 (Navigation)만들기</title>
    <link href="https://eunii.github.io/2019/04/11/tec/blog/blog4/"/>
    <id>https://eunii.github.io/2019/04/11/tec/blog/blog4/</id>
    <published>2019-04-11T11:40:25.000Z</published>
    <updated>2019-05-13T07:24:39.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-data-navigation-yml-파일-만들기"><a href="#1-data-navigation-yml-파일-만들기" class="headerlink" title="1. /_data/navigation.yml 파일 만들기"></a>1. /_data/navigation.yml 파일 만들기</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line">  - title: &quot;TECHNOLOGY&quot;</span><br><span class="line">    url: /tec/</span><br><span class="line">  - title: &quot;WORLD-TRIP&quot;</span><br><span class="line">    url: /trip/</span><br><span class="line">  - title: &quot;OTHERS&quot;</span><br><span class="line">    url: /posts/</span><br></pre></td></tr></table></figure><p>위의 내용 추가</p><h2 id="2-완성"><a href="#2-완성" class="headerlink" title="2. 완성"></a>2. 완성</h2><p><img src="/assets/images/nav.JPG" alt="캡쳐"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-data-navigation-yml-파일-만들기&quot;&gt;&lt;a href=&quot;#1-data-navigation-yml-파일-만들기&quot; class=&quot;headerlink&quot; title=&quot;1. /_data/navigation.yml 파일 만들기&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/categories/tec/blog/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/tags/blog/"/>
    
      <category term="jekyll" scheme="https://eunii.github.io/tags/jekyll/"/>
    
      <category term="github" scheme="https://eunii.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>[SQL] DML(DATA MANIPULATION LANGUAGE)</title>
    <link href="https://eunii.github.io/2019/04/11/tec/sql/sql2/"/>
    <id>https://eunii.github.io/2019/04/11/tec/sql/sql2/</id>
    <published>2019-04-11T11:40:25.000Z</published>
    <updated>2019-05-13T07:27:08.220Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>생성된 테이블안에 데이터를 입력, 수정,삭제, 조회 하는 언어  </p><ul><li>AUTO COMMIT이 되질 않음  </li><li>입력후 COMMIT하면 저장, ROLLBACK하면 SAVEPOINT나 제일 최근 COMMIT전으로 돌아감  </li></ul></blockquote><h2 id="1-INSERT"><a href="#1-INSERT" class="headerlink" title="1. INSERT"></a>1. INSERT</h2><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><ul><li>한번에 한건의 행만 입력됨</li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">--원하는 칼럼에만 데이터 입력하는 방법</span></span><br><span class="line"><span class="hljs-comment">--칼럼명 입력하지 않은 칼럼은 NULL이나 DEFALUT값 입력됨</span></span><br><span class="line"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 테이블명 (칼럼명<span class="hljs-number">1</span>, 칼럼명<span class="hljs-number">2</span>, ... , 칼럼명N)</span><br><span class="line"><span class="hljs-keyword">VALUES</span> (값<span class="hljs-number">1</span>, 값<span class="hljs-number">2</span>,..., 값N);</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">--테이블에 설정된 모든 컬럼에 데이터 입력하는 방법</span></span><br><span class="line"><span class="hljs-comment">--생성한 컬럼 순서대로 모든 값을 입력</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 테이블명</span><br><span class="line"><span class="hljs-keyword">VALUES</span> (값<span class="hljs-number">1</span>, 값<span class="hljs-number">2</span>, ...,값N);</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">## 2.UPDATE</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">### UPDATE</span></span><br><span class="line">- 데이터 수정</span><br><span class="line">- WHERE절을 사용하지 않으면 컬럼 전체가 수정할 값으로 변경됨</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="hljs-keyword">UPDATE</span> 테이블명 <span class="hljs-keyword">SET</span> 수정할값이있는컬럼명 = 수정할값 [<span class="hljs-keyword">WHERE</span> 조건입력];</span><br></pre></td></tr></table></figure><h2 id="3-DELETE"><a href="#3-DELETE" class="headerlink" title="3.DELETE"></a>3.DELETE</h2><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><ul><li>데이터삭제</li><li>WHERE절 사용하지 않으면 컬럼전체 DATA가 삭제됨</li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">DELETE</span> [<span class="hljs-keyword">FROM</span>] 테이블명 [<span class="hljs-keyword">WHERE</span> 조건입력];</span><br></pre></td></tr></table></figure><h2 id="4-SELECT"><a href="#4-SELECT" class="headerlink" title="4. SELECT"></a>4. SELECT</h2><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><ul><li>사용자가 입력한 데이터 조회</li><li>DISTINCT옵션(ALL은 DEFAULT옵션임) : 중복된 데이터가 있으면 1번만 출력</li><li>*은 WILDCARD 모든 컬럼</li><li>ALIAS 컬럼에 별명붙이기: 컬럼바로 뒤에 옴, AS 생략가능<pre><code>&quot;&quot;는 공백, 특수문자를 포함할경우, 대소문자 구별이 필요할 경우 사용</code></pre></li><li>테이블에 있는 모든 데이터 조회(WILDCARD * 사용)</li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">ALL</span> | <span class="hljs-keyword">DISTINCT</span>]  * <span class="hljs-keyword">FROM</span> 테이블명</span><br></pre></td></tr></table></figure><ul><li>테이블에 있는 원하는 컬럼에 있는 데이터 조회(+별명붙이기)  </li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> 컬럼명<span class="hljs-number">1</span> [[<span class="hljs-keyword">AS</span>] <span class="hljs-string">"벌명1"</span>], 컬럼명<span class="hljs-number">2</span> [[<span class="hljs-keyword">AS</span>] <span class="hljs-string">"별명2"</span>], ..., 컬럼명<span class="hljs-number">3</span> [[<span class="hljs-keyword">AS</span>] <span class="hljs-string">"별명3"</span>] </span><br><span class="line"><span class="hljs-keyword">FROM</span> 테이블명;</span><br></pre></td></tr></table></figure><ul><li>DISTINCT옵션</li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 칼럼명<span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> 테이블명;</span><br></pre></td></tr></table></figure><h2 id="5-산술연산자-합성연산자"><a href="#5-산술연산자-합성연산자" class="headerlink" title="5.산술연산자 합성연산자"></a>5.산술연산자 합성연산자</h2><h2 id="산술연산자-NUMBER자료형에-사용"><a href="#산술연산자-NUMBER자료형에-사용" class="headerlink" title="산술연산자(NUMBER자료형에 사용)"></a>산술연산자(NUMBER자료형에 사용)</h2><p>()연산자 우선순위 괄호<br>‘* ‘<br>‘/‘<br>‘+’<br>‘-‘  </p><h3 id="CONCATENATION-합성연산자"><a href="#CONCATENATION-합성연산자" class="headerlink" title="(CONCATENATION)합성연산자"></a>(CONCATENATION)합성연산자</h3><ul><li>문자와 문자의 연결 ‘||’ 사용</li><li>CONCAT(STRING1, STRING2)</li><li>칼럼과 문자 또는 다른 칼럼과 연결</li><li>문자표현식의 결과의해 새로운 칼럼 생성   </li></ul><ul><li>산술연산자 예제</li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">SELECT</span> 칼럼명(숫자데이터타입)-칼럼명(숫자데이터타입) <span class="hljs-keyword">AS</span> 차이 <span class="hljs-keyword">FROM</span> 테이블명;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">- 합성연산자 예제  </span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="hljs-keyword">SELECT</span> 칼럼명(<span class="hljs-keyword">STRING</span>데이터타입) || 칼럼명(<span class="hljs-keyword">STRING</span>데이터타입) <span class="hljs-keyword">AS</span> 문자열합 <span class="hljs-keyword">FROM</span> 테이블명;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;생성된 테이블안에 데이터를 입력, 수정,삭제, 조회 하는 언어  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AUTO COMMIT이 되질 않음  &lt;/li&gt;
&lt;li&gt;입력후 COMMIT하면 저장, ROLLBACK하면 SAVEPOINT나 제일 최근
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="sql" scheme="https://eunii.github.io/categories/tec/sql/"/>
    
    
      <category term="sql" scheme="https://eunii.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>[JEKYLL과 깃허브로 블로그 만들기] 콜렉션(Collection)만들기</title>
    <link href="https://eunii.github.io/2019/04/10/tec/blog/blog3/"/>
    <id>https://eunii.github.io/2019/04/10/tec/blog/blog3/</id>
    <published>2019-04-10T11:40:25.000Z</published>
    <updated>2019-05-13T07:24:39.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-config-yml파일-수정하기"><a href="#1-config-yml파일-수정하기" class="headerlink" title="1. /_config.yml파일 수정하기"></a>1. /_config.yml파일 수정하기</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">collections:</span><br><span class="line">  trip:</span><br><span class="line">    output: true</span><br><span class="line">    permalink: /:collection/:path/</span><br></pre></td></tr></table></figure><p>위의 내용 추가</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">defaults:</span><br><span class="line">  # _trip</span><br><span class="line">  - scope:</span><br><span class="line">      path: &quot;&quot;</span><br><span class="line">      type: trip</span><br><span class="line">    values:</span><br><span class="line">      layout: single</span><br><span class="line">      author_profile: false</span><br><span class="line">      share: true</span><br><span class="line">      related: true</span><br></pre></td></tr></table></figure><p>위의 내용 추가</p><h2 id="2-pages-trip-archive-md-파일-만들기"><a href="#2-pages-trip-archive-md-파일-만들기" class="headerlink" title="2. _pages/trip-archive.md 파일 만들기"></a>2. _pages/trip-archive.md 파일 만들기</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 여행</span><br><span class="line">layout: collection</span><br><span class="line">permalink: /trip/</span><br><span class="line">collection: trip</span><br><span class="line">entries_layout: grid</span><br><span class="line">classes: wide</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="3-trip-post1-md-파일-만들기"><a href="#3-trip-post1-md-파일-만들기" class="headerlink" title="3._/trip/post1.md 파일 만들기"></a>3._/trip/post1.md 파일 만들기</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">itle: &quot;Trip1&quot;</span><br><span class="line">excerpt: &quot;첫번째 여행글 입니다..&quot;</span><br><span class="line">header:</span><br><span class="line">  image: /assets/images/별그림.png</span><br><span class="line">  #teaser: assets/images/unsplash-gallery-image-1-th.jpg</span><br><span class="line">sidebar:</span><br><span class="line">  - title: &quot;Role&quot;</span><br><span class="line">    image: /assets/images/별그림.png</span><br><span class="line">    image_alt: &quot;logo&quot;</span><br><span class="line">    text: &quot;Designer, Front-End Developer&quot;</span><br><span class="line">  - title: &quot;Responsibilities&quot;</span><br><span class="line">    text: &quot;Reuters try PR stupid commenters should isn&apos;t a business model&quot;</span><br><span class="line">gallery:</span><br><span class="line">  - url: /assets/images/별그림.png</span><br><span class="line">    image_path: /assets/images/별그림.png</span><br><span class="line">    alt: &quot;placeholder image 1&quot;</span><br><span class="line">  - url: /assets/images/unsplash-gallery-image-2.jpg</span><br><span class="line">    image_path: /assets/images/별그림.png</span><br><span class="line">    alt: &quot;placeholder image 2&quot;</span><br><span class="line">  - url: /assets/images/unsplash-gallery-image-3.jpg</span><br><span class="line">    image_path: /assets/images/별그림.png</span><br><span class="line">    alt: &quot;placeholder image 3&quot;</span><br><span class="line">categories: [아시아, 한국, korea]</span><br><span class="line">tags: [hot, summer]</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">이사진은 별그림 입니다</span><br><span class="line">&#123;% include gallery caption=&quot;This is a sample gallery to go along with this case study.&quot; %&#125;</span><br><span class="line"></span><br><span class="line">이건 마지막 글입니다.</span><br><span class="line">ude gallery caption=&quot;This is a sample gallery to go along with this case study.&quot; %&#125;</span><br></pre></td></tr></table></figure><h2 id="4-완성"><a href="#4-완성" class="headerlink" title="4. 완성"></a>4. 완성</h2><h2 id="참고-https-jekyllrb-ko-github-io-docs-collections"><a href="#참고-https-jekyllrb-ko-github-io-docs-collections" class="headerlink" title="참고:https://jekyllrb-ko.github.io/docs/collections/"></a>참고:<a href="https://jekyllrb-ko.github.io/docs/collections/" rel="external nofollow noopener noreferrer" target="_blank">https://jekyllrb-ko.github.io/docs/collections/</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-config-yml파일-수정하기&quot;&gt;&lt;a href=&quot;#1-config-yml파일-수정하기&quot; class=&quot;headerlink&quot; title=&quot;1. /_config.yml파일 수정하기&quot;&gt;&lt;/a&gt;1. /_config.yml파일 수정하기&lt;/h2
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/categories/tec/blog/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/tags/blog/"/>
    
      <category term="jekyll" scheme="https://eunii.github.io/tags/jekyll/"/>
    
      <category term="github" scheme="https://eunii.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>[SQL] DDL(Data Definiation Language)</title>
    <link href="https://eunii.github.io/2019/04/10/tec/sql/sql1/"/>
    <id>https://eunii.github.io/2019/04/10/tec/sql/sql1/</id>
    <published>2019-04-10T11:40:25.000Z</published>
    <updated>2019-05-13T07:27:08.198Z</updated>
    
    <content type="html"><![CDATA[<p>*자동으로 COMMIT됨(AUTO COMMIT)  </p><h2 id="1-자주쓰이는-데이터-유형"><a href="#1-자주쓰이는-데이터-유형" class="headerlink" title="1.자주쓰이는 데이터 유형"></a>1.자주쓰이는 데이터 유형</h2><h3 id="CHARCTER-s"><a href="#CHARCTER-s" class="headerlink" title="CHARCTER(s)"></a>CHARCTER(s)</h3><ul><li>고정길이 문자열정보  </li><li>(s)만큼의 최대 고정길이를 갖고 할당된 변수값의 길이가 s보다 작을때는 공백으로 채움  </li><li>‘AA’=’AA     ‘  </li></ul><h3 id="VARCHAR2-s"><a href="#VARCHAR2-s" class="headerlink" title="VARCHAR2(s)"></a>VARCHAR2(s)</h3><ul><li>가변길이 문자열정보  </li><li>s만큼 최대값 입력가능, s이하의 변수길이값입력시 변수길이만큼 바이트적용  </li><li>‘AA’ != ‘AA    ‘  </li></ul><h3 id="NUMBER-정수-실수-등-숫자정보"><a href="#NUMBER-정수-실수-등-숫자정보" class="headerlink" title="NUMBER-정수, 실수 등 숫자정보"></a>NUMBER-정수, 실수 등 숫자정보</h3><ul><li>NUMBER(4,2) 8은 전체자리수, 2는 소수점 자리수(1234.56)를 나타냄</li></ul><h3 id="DATE-날짜와-시각정보"><a href="#DATE-날짜와-시각정보" class="headerlink" title="DATE-날짜와 시각정보"></a>DATE-날짜와 시각정보</h3><ul><li>1초돤위로 관리*  </li></ul><h2 id="2-CREATE-TABLE"><a href="#2-CREATE-TABLE" class="headerlink" title="2.CREATE TABLE"></a>2.CREATE TABLE</h2><h3 id="테이블-생성식"><a href="#테이블-생성식" class="headerlink" title="테이블 생성식"></a>테이블 생성식</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> TABLENAME(</span><br><span class="line">     COLUMNNAME1 DATATYPE [<span class="hljs-keyword">DEFAULT</span> 형식] [<span class="hljs-literal">NULL</span> || <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>],</span><br><span class="line">     COLUMNNAME2 DATATYPE [<span class="hljs-keyword">DEFAULT</span> 형식] [<span class="hljs-literal">NULL</span> || <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>],</span><br><span class="line">     ...</span><br><span class="line">     COLUMNNAMEN DATATYPE [<span class="hljs-keyword">DEFAULT</span> 형식] [<span class="hljs-literal">NULL</span> || <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>테이블 생성시 주의사항</strong>    </p><ul><li>벤더에서 정의한 예약어는 쓸 수 없음  </li><li>A-Z(대소문자), 0-9, _, $, # 문자만 허용됨  </li><li>테이블명 칼럼명 첫 글자는 반드시 문자로 와야함   </li></ul><h2 id="제약조건-CONSTRAINT"><a href="#제약조건-CONSTRAINT" class="headerlink" title="제약조건(CONSTRAINT)"></a>제약조건(CONSTRAINT)</h2><ul><li>사용자가 원하는 조건의 데이터남 유지하기위한, 데이터 무결성을 유지하기위해 특정 칼럼에 설정하는 제약  </li><li>테이블 생성시 추가하거나 테이블 생성후 ALTER TABLE 이용해서 추가할 수 있음   </li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> MEMBERS <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> CK_MEMBERS_POINT <span class="hljs-keyword">CHECK</span>(POINT&lt;<span class="hljs-number">10</span>) <span class="hljs-keyword">NOVALIDATE</span>;<span class="hljs-comment">#PRIMARY KEY(기본키)-각 행의 고유의 식별 데이터-하나의 테이블당 한개만 설정 가능-NULL 입력 불가능#UNIQUE KEY(고유키)-행데이터를 고유하게 식별하기 위한 키-테이블당 여러개 설정 가능-NULL 입력 가능--기본키 및 외래키(TABLENAME1이름의 테이블이 생성되어 있다고 가정) 입력방법1</span></span><br><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> TABLENAME(</span><br><span class="line">     COLUMNNAME1 DATATYPE [<span class="hljs-keyword">DEFAULT</span> 형식] [<span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>],</span><br><span class="line">     COLUMNNAME2 DATATYPE [<span class="hljs-keyword">DEFAULT</span> 형식] [<span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>],</span><br><span class="line">     ...</span><br><span class="line">     COLUMNNAMEN DATATYPE [<span class="hljs-keyword">DEFAULT</span> 형식] [<span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>],</span><br><span class="line"></span><br><span class="line">     <span class="hljs-keyword">CONSTRAINT</span> PK_TABLENAME_COLUMNNAME1 PRIMARY <span class="hljs-keyword">KEY</span>(COLUMNNAME1),</span><br><span class="line">     <span class="hljs-keyword">CONSTRAINT</span> FK_TABLENAME_COLUMNNAME2 FOREGIN <span class="hljs-keyword">KEY</span>(COLUMNNAME2) </span><br><span class="line">         <span class="hljs-keyword">REFERENCES</span> TABLENAME2(COLMNUMNAME1)</span><br><span class="line">                                     </span><br><span class="line">);</span><br><span class="line"><span class="hljs-comment">--기본키 입력방법2</span></span><br><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> TABLENAME(</span><br><span class="line">     COLUMNNAME1 DATATYPE PRIMARYKEY [<span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>],</span><br><span class="line">     COLUMNNAME2 DATATYPE [<span class="hljs-keyword">DEFAULT</span> 형식] [<span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>],</span><br><span class="line">     ...</span><br><span class="line">     COLUMNNAMEN DATATYPE [<span class="hljs-keyword">DEFAULT</span> 형식] [<span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>],</span><br><span class="line">                                          </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">--기본키 및 외래키(TABLENAME1이름의 테이블이 생성되어 있다고 가정) 입력방법3</span></span><br><span class="line"><span class="hljs-comment">--테이블 생성 후(테이블 명 = TABLENAME)</span></span><br><span class="line"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TABLENAME </span><br><span class="line"><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> PK_TABLENAME_COLUMNNAME1 PRIMARYKEY(COLUMNNAME1);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TABLENAME</span><br><span class="line"><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> FK_TABLENAME_COLUMNNAME2 FOREGIN <span class="hljs-keyword">KEY</span>(COLUMNNAME2) </span><br><span class="line">         <span class="hljs-keyword">REFERENCES</span> TABLENAME2(COLMNUMNAME1)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">--기본키 및 외래키 삭제</span></span><br><span class="line"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TABLENAME</span><br><span class="line"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> PK_TABLENAME_CONLUNMNAME1;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TABLENAME</span><br><span class="line"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> FK_TABLENAME_CONLUMNNAME2;</span><br></pre></td></tr></table></figure><h3 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h3><ul><li>NULL 값 입력금지   </li><li>DEFAULT상태에서는 NULL 허가  </li><li>NULL : 공백(“”), 숫자0이 아님, 정의되지 않은 미지의 값, 현재 데이터를 입력하지 못하는 경우<br>NULL + 0 = NULL;<br>NULL + ‘CHAR’ = NULL;   </li></ul><h3 id="CHECK"><a href="#CHECK" class="headerlink" title="CHECK"></a>CHECK</h3><ul><li>입력할수 있는 값의 범위를 제한</li></ul><h3 id="FOREIGN-KEY-외래키"><a href="#FOREIGN-KEY-외래키" class="headerlink" title="FOREIGN KEY(외래키)"></a>FOREIGN KEY(외래키)</h3><ul><li>관계형데이터베이스에서 테이블간의 관계를 정의하기 위해 기본키를 다른 테이블의 외래키로 복사하는 경우 외래키 생성  </li><li>외래키 지정시 참조 무결성 제약옵선 선택가능  </li></ul><h3 id="생성된-테이블-구조확인"><a href="#생성된-테이블-구조확인" class="headerlink" title="생성된 테이블 구조확인"></a>생성된 테이블 구조확인</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">DESCRIBE</span> TABLENAME;</span><br><span class="line">DESC TABLENAME;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">### SELECT 문장을 통한 테이블 생성  </span></span><br><span class="line">TABLENAME과 같은 내용의 테이블 TABLENAME1을 복사해서 생성  </span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> TABLENAME1</span><br><span class="line"><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> TABLENAME;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">## 3.ALTER TABLE</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">### ADD COLUMN</span></span><br><span class="line">- 테이블에 컬럼 추가  </span><br><span class="line">- 추가된 칼럼은 테이블의 마지막 컬럼이 되고 컬럼위치를 지정하는것은 불가능  </span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TABLENAME </span><br><span class="line"><span class="hljs-keyword">ADD</span> NEWCOLUMNNAME DATATYPE;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">### DROP COLUNM </span></span><br><span class="line">- 컬럼 삭제</span><br><span class="line">- 데이터유무에 상관없이 삭제 가능</span><br><span class="line">- 한번에 하나의 칼럼만 삭제가능  </span><br><span class="line">- 삭제후 최소 하나이상의 칼럼이 테이블에 존재해야함</span><br><span class="line">- 삭제된 갈럼은 복구 불가능</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TABLENAME </span><br><span class="line"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> COLUMNNAME1;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">### MODIFY COLUMN</span></span><br><span class="line">- 칼럼 데이터 유형, 디폴트값(DEFAULT), NOT NULLL 제약조건 변경</span><br><span class="line">- 칼럼의 크기를 늘릴 수는 있지만 줄일수는 없음(기존데이터 훼손방지)</span><br><span class="line">- 칼럼이 NULL 값만 가지고 있으면 데이터 유형 변경가능\</span><br><span class="line">- 칼럼에 행이 없거나 NULL값만 가지고 있으면 칼럼의 폭 줄이기 가능</span><br><span class="line">- DEFALUT값 변경시, 변경작업 이후 발생하는 행 삽입에만 영향을 미침</span><br><span class="line">- 칼럼에 NULL값이 없을 경우에만 NOT NULL 제약조건을 추가할 수 있음  </span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TABLENAME </span><br><span class="line">MONIFY (COLUMNNAME1 DATATYPE [<span class="hljs-keyword">DEFAULT</span>] [<span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>],</span><br><span class="line">        COLUMNNAME2 DATATYPE [<span class="hljs-keyword">DEFAULT</span>] [<span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>],</span><br><span class="line">        ...</span><br><span class="line">        COLUMNNAMEN DATATYPE [<span class="hljs-keyword">DEFAULT</span>] [<span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>]</span><br><span class="line">); </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">### RENAME COLUMN </span></span><br><span class="line">- 칼럼명 변경</span><br><span class="line">- 해당 칼럼과 관계된 제약조건이 자동으로 변경</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TABLENAME</span><br><span class="line"><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">COLUMN</span> COLUMNNAME <span class="hljs-keyword">TO</span> NEWCOLUMNNAME;</span><br></pre></td></tr></table></figure><h3 id="DROP-CONSTRAINT"><a href="#DROP-CONSTRAINT" class="headerlink" title="DROP CONSTRAINT"></a>DROP CONSTRAINT</h3><ul><li>테이블 생성시 부여했던 제약조건 삭제  </li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TABLENAME</span><br><span class="line"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> PK_TABELNAME_COLUMNNNAME;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">### ADD CONSTRAINT </span></span><br><span class="line">- 제약조건 추가</span><br><span class="line">- 외래키설정하면 참조된 테이블의 데이터 삭제가 불가능 할수도 있음  </span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TALBENAME</span><br><span class="line"><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> PK_TALBENAME_COLUMNNAME PRIMARY <span class="hljs-keyword">KEY</span>(COLUMNNAME);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> TABLENAME</span><br><span class="line"><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> FK_TABLENAME_COLUMNNAME </span><br><span class="line">FOREGIN <span class="hljs-keyword">KEY</span>(COLUMNNAME) <span class="hljs-keyword">REFERENCES</span> TABLENAME1(COLUMNNAME1);  </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">## 4. RENAEM TABLE</span></span><br><span class="line"><span class="hljs-comment">### RENAME TABLE</span></span><br><span class="line">- 테이블 이름변경</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">TABLE</span> TABLENAME <span class="hljs-keyword">TO</span> NEWTABLENAME;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">## 5.DROP TABLE</span></span><br><span class="line"><span class="hljs-comment">### DROPT TABLE</span></span><br><span class="line">- 테이블 삭제</span><br><span class="line">- CASCADE CONSTRAINT는 해당 테이블과 관계있던 참조 제약조건도 삭제한다는 뜻</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> TABLENAME [<span class="hljs-keyword">CASCADE</span> <span class="hljs-keyword">CONSTRAINT</span>];</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">## 6. TRUNCATE TABLE</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">### TURNCATE TABLE</span></span><br><span class="line">- 테이블의 모든 행(데이터)삭제</span><br><span class="line">- DML로 분류할수도 있지만 AOUTO <span class="hljs-keyword">COMMIT</span>특성이 있어 <span class="hljs-keyword">DDL</span>로도 구분가능</span><br><span class="line">- <span class="hljs-keyword">DELETE</span>와는 다름 </span><br><span class="line">- 정상적인복구가 불가능  </span><br><span class="line"></span><br><span class="line"><span class="hljs-string">``</span><span class="hljs-string">`sql</span></span><br><span class="line"><span class="hljs-string">TURNCATE TABLE TABLENAME;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;*자동으로 COMMIT됨(AUTO COMMIT)  &lt;/p&gt;
&lt;h2 id=&quot;1-자주쓰이는-데이터-유형&quot;&gt;&lt;a href=&quot;#1-자주쓰이는-데이터-유형&quot; class=&quot;headerlink&quot; title=&quot;1.자주쓰이는 데이터 유형&quot;&gt;&lt;/a&gt;1.자주쓰이는 
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="sql" scheme="https://eunii.github.io/categories/tec/sql/"/>
    
    
      <category term="sql" scheme="https://eunii.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>[JEKYLL과 깃허브로 블로그 만들기] 포스트(Post) 쓰기</title>
    <link href="https://eunii.github.io/2019/04/09/tec/blog/blog2/"/>
    <id>https://eunii.github.io/2019/04/09/tec/blog/blog2/</id>
    <published>2019-04-09T11:40:25.000Z</published>
    <updated>2019-05-13T07:24:38.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-posts-2019-01-01-md파일-생성하기"><a href="#1-posts-2019-01-01-md파일-생성하기" class="headerlink" title="1. /_posts/2019-01-01.md파일 생성하기"></a>1. /_posts/2019-01-01.md파일 생성하기</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: &quot;테스트 포스팅&quot;</span><br><span class="line">date: 2017-10-20 08:26:28 -0400</span><br><span class="line">categories:</span><br><span class="line">  - test</span><br><span class="line">tags:</span><br><span class="line">  - test</span><br><span class="line">---</span><br><span class="line">## 안녕하세요.</span><br></pre></td></tr></table></figure><h2 id="2-완성"><a href="#2-완성" class="headerlink" title="2. 완성"></a>2. 완성</h2><p><img src="/assets/images/testpost.JPG" alt="캡처"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-posts-2019-01-01-md파일-생성하기&quot;&gt;&lt;a href=&quot;#1-posts-2019-01-01-md파일-생성하기&quot; class=&quot;headerlink&quot; title=&quot;1. /_posts/2019-01-01.md파일 생성하기&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/categories/tec/blog/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/tags/blog/"/>
    
      <category term="jekyll" scheme="https://eunii.github.io/tags/jekyll/"/>
    
      <category term="github" scheme="https://eunii.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>[JEKYLL과 깃허브로 블로그 만들기] 지킬 테마 복사하기</title>
    <link href="https://eunii.github.io/2019/04/08/tec/blog/blog1/"/>
    <id>https://eunii.github.io/2019/04/08/tec/blog/blog1/</id>
    <published>2019-04-08T11:40:25.000Z</published>
    <updated>2019-05-13T07:24:38.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-닉네임-github-io-레포지토리-만들기"><a href="#1-닉네임-github-io-레포지토리-만들기" class="headerlink" title="1. 닉네임.github.io 레포지토리 만들기"></a>1. <code>닉네임.github.io</code> 레포지토리 만들기</h2><p>위와 같이 <code>닉네임.github.io</code> 이름으로 public 레포지토리를 만듭니다.</p><p><img src="/assets/images/createrepo.JPG" alt="캡쳐"></p><h2 id="2-사용할-템틀릿-정하기"><a href="#2-사용할-템틀릿-정하기" class="headerlink" title="2. 사용할 템틀릿 정하기"></a>2. 사용할 템틀릿 정하기</h2><p>여기서<a href="https://github.com/topics/jekyll-theme" rel="external nofollow noopener noreferrer" target="_blank">(jekyll-theme)</a>{: target=”_blank”} 원하는 테마프로젝트를 선택합니다. </p><p>minimal-mistakes 테마를 선택하였습니다.</p><p><img src="/assets/images/chtemplet.JPG" alt="캡쳐"></p><h2 id="3-config-yml-파일-복사하기"><a href="#3-config-yml-파일-복사하기" class="headerlink" title="3. _config.yml 파일 복사하기"></a>3. _config.yml 파일 복사하기</h2><p><code>remote_theme : mmistakes/minimal-mistakes</code>추가 및 수정하기</p><p><img src="/assets/images/_config.JPG" alt="이미지"></p><h2 id="4-index-html-복사하기"><a href="#4-index-html-복사하기" class="headerlink" title="4.index.html 복사하기"></a>4.index.html 복사하기</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---layout: home---</span><br></pre></td></tr></table></figure><p>위와 같이 index.html파일을 만듭니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-닉네임-github-io-레포지토리-만들기&quot;&gt;&lt;a href=&quot;#1-닉네임-github-io-레포지토리-만들기&quot; class=&quot;headerlink&quot; title=&quot;1. 닉네임.github.io 레포지토리 만들기&quot;&gt;&lt;/a&gt;1. &lt;code&gt;닉
      
    
    </summary>
    
      <category term="tec" scheme="https://eunii.github.io/categories/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/categories/tec/blog/"/>
    
    
      <category term="tec" scheme="https://eunii.github.io/tags/tec/"/>
    
      <category term="blog" scheme="https://eunii.github.io/tags/blog/"/>
    
      <category term="jekyll" scheme="https://eunii.github.io/tags/jekyll/"/>
    
      <category term="github" scheme="https://eunii.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 13] 아이슬란드에서-헬싱키-한국으로</title>
    <link href="https://eunii.github.io/2019/04/06/trip/europ/iceland30/"/>
    <id>https://eunii.github.io/2019/04/06/trip/europ/iceland30/</id>
    <published>2019-04-06T11:40:25.000Z</published>
    <updated>2019-05-15T03:50:12.381Z</updated>
    
    <content type="html"><![CDATA[<p>아침 일찍 일어나 조식을 먹고 (새벽 4신가?)  셔틀을 타고 공항에 갔다.<br>인건비가 비싸서 직원이 없어 셀프 체크인을 했다.<br>짐까지 스스로 붙이는건 처음이었다.<br>어찌저찌 비행기를 타고 자고 일어나니 커피를 줬다.<br>밖이 밝아졌다.<br><img src="/assets/images/is/ap2.jpg"><br>노르웨이 헬싱키에서(맞나?) 환승을 하려고 내렸다.<br>여기서 점심을 먹었다.<br>화페 단위를 몰라 쩔쩔맸다.<br><img src="/assets/images/is/ap3.jpg"><br>무민샵에서 기념품을 사고 구경을 했다.<br>귀여운게 완전 많아.<br><img src="/assets/images/is/ap4.jpg"><br>우리 엄마가 점심때 좀 삐져서 따로 우동을 드셨다.<br>엄마 미안 ㅎㅎ<br><img src="/assets/images/is/ap5.jpg"><br>드디어 인천공항에 도착했다.<br>영화를 한 두편은 본 것 같다.<br>스위치도 좀 하구<br><img src="/assets/images/is/ap7.jpg"><br>한국에서 출국할 때 언니가 노트북을 공항에서 잃어버렸는데<br>무사히 분실물 센터에서 찾았다.<br>이제 진짜 집에 간다.<br><img src="/assets/images/is/ap6.jpg"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;아침 일찍 일어나 조식을 먹고 (새벽 4신가?)  셔틀을 타고 공항에 갔다.&lt;br&gt;인건비가 비싸서 직원이 없어 셀프 체크인을 했다.&lt;br&gt;짐까지 스스로 붙이는건 처음이었다.&lt;br&gt;어찌저찌 비행기를 타고 자고 일어나니 커피를 줬다.&lt;br&gt;밖이 밝아
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 12] B&amp;B Hotel 마지막 밤</title>
    <link href="https://eunii.github.io/2019/04/05/trip/europ/iceland29/"/>
    <id>https://eunii.github.io/2019/04/05/trip/europ/iceland29/</id>
    <published>2019-04-05T11:40:25.000Z</published>
    <updated>2019-05-15T03:50:12.396Z</updated>
    
    <content type="html"><![CDATA[<p>블루라군에서 실컷 놀고 조심히 숙소로 돌아왔다.<br>렌트카를 반납하러 갔다.<br>렌트카 반납할때 트집 잡아서 비싸게 물어달라는 업체가 있다고 해서<br>두근두근했지만 생각보다 휙~후레쉬로 대충 비춰보고 ok해줬다.<br>걱정했던 일까지 잘 마무리 되니까 이제서야 한시름 놓았다.<br>업체에서 친절하게 숙소로 데려다 주고<br>숙소에서 우리는 마지막 만찬을 먹었다.<br>한국에서 음식을 많이 싸갔는데 좀 남았다.<br>아깝지만 먹고 남은건 정리하고 잠자리에 들었다.  </p><p>공항 근처에 있는 호텔로 공항까지 셔틀로 데려다 준다.<br>새벽일찍 출발한다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;블루라군에서 실컷 놀고 조심히 숙소로 돌아왔다.&lt;br&gt;렌트카를 반납하러 갔다.&lt;br&gt;렌트카 반납할때 트집 잡아서 비싸게 물어달라는 업체가 있다고 해서&lt;br&gt;두근두근했지만 생각보다 휙~후레쉬로 대충 비춰보고 ok해줬다.&lt;br&gt;걱정했던 일까지 잘 마
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 12] 블루라군 with 옐로우스톰 경보</title>
    <link href="https://eunii.github.io/2019/04/04/trip/europ/iceland28/"/>
    <id>https://eunii.github.io/2019/04/04/trip/europ/iceland28/</id>
    <published>2019-04-04T11:40:25.000Z</published>
    <updated>2019-05-16T09:45:42.764Z</updated>
    
    <content type="html"><![CDATA[<p>여행 마지막을 앞두고 있는데 옐로우스톰 경보가 발생했다.<br>초속 20미터가 넘는 바람이 불었다.<br>오늘은 블루라군 온천을 예약해놨었는데<br>사람이 정상적으로 걷기는 힘든 바람세기여서 걱정이 됐다.<br>호텔 직원한테 물어보니 너무나 태연하게 괜찮다고 말을 해서 그나마 다행이었다.  </p><p>블루라군이 2시에 예약 되어있어 아침에 은행을 들러 이쿠레이리에서 끊은 주차위반 벌금을 내러 갔다.<br>3일 이낸가 벌금을 내면 30%할인해준다.<br>만약 벌금을 내지 않고 귀국하면 렌트카에서 내주고 수수료를 붙여 보증금에서 제외한다.<br>은행에 가니 커피를 뽑아 먹을 수 있어서 커피를 내려 마셨다.<br>벌금이 2만원인가 그랬는데 커피값으로 퉁친것 같다.   </p><p>블루라군 가는길에 이끼 군락이 있어서 잠깐 내려봤다.<br>나는 거의 바람에 날아갈 뻔했다.<br>엄마가 진지하게 나 날아갈까봐 꼭 붙드셨다ㅋㅋ<br><img src="/assets/images/is/옐로우스톰으니.gif"> </p><img src="/assets/images/is/bl1.jpg"> <img src="/assets/images/is/bl3.jpg"><p>블루라군에 가니 하늘색 물색이 너무 이뻤다.<br>처음에 아빠를 잃어버려 갈등이 좀 있었지만 곧 상봉했다.<br>티켓값에 포함된 음료를 하나씩 들고 온천을 즐겼다.  </p><img src="/assets/images/is/bl5.jpg"> <img src="/assets/images/is/bl4.jpg"> <p>샌드위치랑 코코아를 마셨다.<br>싱싱해서 맛잇었는데 저거 하나가 만원이 넘었다.  </p><img src="/assets/images/is/bl6.jpg"> <p>팩을 하고 실컷 놀고 숙소로 다시 돌아왔다.  </p><img src="/assets/images/is/bl7.jpg"> <p>여기까지가 우리의 마지막 아이슬란드 일정이었다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;여행 마지막을 앞두고 있는데 옐로우스톰 경보가 발생했다.&lt;br&gt;초속 20미터가 넘는 바람이 불었다.&lt;br&gt;오늘은 블루라군 온천을 예약해놨었는데&lt;br&gt;사람이 정상적으로 걷기는 힘든 바람세기여서 걱정이 됐다.&lt;br&gt;호텔 직원한테 물어보니 너무나 태연
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 11] 마지막 쇼핑데이!</title>
    <link href="https://eunii.github.io/2019/04/03/trip/europ/iceland27/"/>
    <id>https://eunii.github.io/2019/04/03/trip/europ/iceland27/</id>
    <published>2019-04-03T11:40:25.000Z</published>
    <updated>2019-05-15T03:49:25.758Z</updated>
    
    <content type="html"><![CDATA[<p>심벨리어 국립공원산책?을 마치고 큰 쇼핑센터에 쇼핑하러 갔다.<br>꽤 넓고 구경하고 선물들을 조금 샀다.<br><img src="/assets/images/is/rs2.jpg"><br>장소를 옮겨 크로난 마트에 왔다.<br>크로난은 유기농? 싱싱한 식료품을 많이 가지고 있는 곳이라고 했다.<br><img src="/assets/images/is/rs3.jpg"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;심벨리어 국립공원산책?을 마치고 큰 쇼핑센터에 쇼핑하러 갔다.&lt;br&gt;꽤 넓고 구경하고 선물들을 조금 샀다.&lt;br&gt;&lt;img src=&quot;/assets/images/is/rs2.jpg&quot;&gt;&lt;br&gt;장소를 옮겨 크로난 마트에 왔다.&lt;br&gt;크로난은 유기농? 싱
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 11] 골든서클 - 싱벨리어 국립공원</title>
    <link href="https://eunii.github.io/2019/04/03/trip/europ/iceland26/"/>
    <id>https://eunii.github.io/2019/04/03/trip/europ/iceland26/</id>
    <published>2019-04-03T11:40:25.000Z</published>
    <updated>2019-05-15T03:49:25.818Z</updated>
    
    <content type="html"><![CDATA[<p>여행 둘째날 못간 싱벨리어 국립공원에 다시 가보기로 했다.<br>오늘은 날씨가 너무 좋았다.  </p><img src="/assets/images/is/sb2.jpg"> <p>여기는 두개의 지각판이 만나는 곳이다.<br>물이 너무 맑아서 깊이가 가늠이 안 된다고 했다.<br>사람들이 동전을 던져놨는데 빤작빤작 이뻤다.<br><img src="/assets/images/is/sb3.jpg"><br>공원 나무에 눈꽃이 내려 앉았다.<br><img src="/assets/images/is/sb4.jpg"><br>눈도 치우지 않은 구간에는 저렇게 많이 쌓여있었다.<br>미바튼에서 놀지 못한 한을 여기서 조금이나마? 풀었다.<br><img src="/assets/images/is/sb5.jpg"><br>스노쿨링 장비를 한 사람들이 지나간다는 표지판<br>스노쿨링을 투어가 몸무게 제한이 있어서 아쉽게 못했다..<br><img src="/assets/images/is/sb6.jpg"><br>물에 비친 하늘이 너무 이뻣다.<br>해를 중심으로 원을 그린 무지개도 봤었다.<br><img src="/assets/images/is/sb7.jpg"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;여행 둘째날 못간 싱벨리어 국립공원에 다시 가보기로 했다.&lt;br&gt;오늘은 날씨가 너무 좋았다.  &lt;/p&gt;
&lt;img src=&quot;/assets/images/is/sb2.jpg&quot;&gt; 
&lt;p&gt;여기는 두개의 지각판이 만나는 곳이다.&lt;br&gt;물이 너무 맑아서 깊이
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 10] 할그림스키르캬</title>
    <link href="https://eunii.github.io/2019/04/02/trip/europ/iceland25/"/>
    <id>https://eunii.github.io/2019/04/02/trip/europ/iceland25/</id>
    <published>2019-04-02T11:40:25.000Z</published>
    <updated>2019-05-17T00:45:22.690Z</updated>
    
    <content type="html"><![CDATA[<p>아침에 레이캬비크의 상징 할그림스키르캬에 갔다.<br><img src="/assets/images/is/rr2.jpg"><br>10:30분쯤인가서 오르간 연주 하는것을 감상했다.<br>전망대에 올라갔다.<br>전망대는 정말 별거 없었다.<br>그냥 회색 시멘트에 창문이 하나 있고 발판 하나 띡.<br><img src="/assets/images/is/rr4.jpg"></p><p>창문밖으로 보이는 풍경이 좋았다.<br>알록달록한 집들이 옹기종기 모여있었다.<br><img src="/assets/images/is/rr3.jpg"></p><p>점심은 아슬 두번째 외식으로 유명한 핫도그 집에 갔다.<br>사실 비싸기만하고 크게 맛이 있어보이진 않았지만 여기까지 와서 안먹을 수도 없었다.<br><img src="/assets/images/is/rr6.jpg"></p><p>그다음은 주말 벼룩시장에 갔다.<br>주말시장 가는 길에 오리랑 백조.<br><img src="/assets/images/is/rr5.jpg"><br>주말 벼룩시장을 보려고 일부러 날짜를 맞춰서 왔었다.<br>책 옷, 초콜릿 등을 팔고 있었는데 딱히 사고싶은 물건은 없었다.  </p><img src="/assets/images/is/rr7.jpg"><img src="/assets/images/is/rr8.jpg"><img src="/assets/images/is/rr9.jpg"><img src="/assets/images/is/rr10.jpg"><p>쇼핑을 마치고 저녁 먹고<br>수영장에 또 갔다.<br>여기는 수영장 내부는 사진을 찍을 수 없엇다.<br>따듯한 곳에는 사람이 너무 많고 미끄럼틀도 탈수 없어서 좀 아쉬웠다.  </p><img src="/assets/images/is/rr11.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;아침에 레이캬비크의 상징 할그림스키르캬에 갔다.&lt;br&gt;&lt;img src=&quot;/assets/images/is/rr2.jpg&quot;&gt;&lt;br&gt;10:30분쯤인가서 오르간 연주 하는것을 감상했다.&lt;br&gt;전망대에 올라갔다.&lt;br&gt;전망대는 정말 별거 없었다.&lt;br&gt;그
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 9] 월터의 현실은 상상이된다 카페</title>
    <link href="https://eunii.github.io/2019/04/01/trip/europ/iceland23/"/>
    <id>https://eunii.github.io/2019/04/01/trip/europ/iceland23/</id>
    <published>2019-04-01T11:40:25.000Z</published>
    <updated>2019-05-16T09:45:42.802Z</updated>
    
    <content type="html"><![CDATA[<p>아쿠레이리의 2박3일을 마치고 아이슬란드 수도 레이캬비크에 가는 날이다.<br>가는 길에 월터의 현실은 상상이 된다에 나왔던 파파존스건물에 가보기로 했다.<br>지금은 파파존스가 아니라 카페로 바꼈다.<br><img src="/assets/images/is/hk2.jpg"></p><p>아이슬란드에서 첫 외식.<br>커피 종류와 빵을 샀다.<br>몇개 안 샀는데 되게 비싸다ㅠㅠ<br>카페 전망이 완전 좋다.<br><img src="/assets/images/is/hk3.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;아쿠레이리의 2박3일을 마치고 아이슬란드 수도 레이캬비크에 가는 날이다.&lt;br&gt;가는 길에 월터의 현실은 상상이 된다에 나왔던 파파존스건물에 가보기로 했다.&lt;br&gt;지금은 파파존스가 아니라 카페로 바꼈다.&lt;br&gt;&lt;img src=&quot;/assets/ima
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 9] 아이슬란드 수도, 레이캬비크</title>
    <link href="https://eunii.github.io/2019/04/01/trip/europ/iceland24/"/>
    <id>https://eunii.github.io/2019/04/01/trip/europ/iceland24/</id>
    <published>2019-04-01T11:40:25.000Z</published>
    <updated>2019-05-15T03:49:25.806Z</updated>
    
    <content type="html"><![CDATA[<p>북쪽에서 남쪽으로 향할수록 확실히 눈이 줄어들고 있었다.  </p><p>한참 길을 달려 도시에 도착하니 이번 여행에서 봤던 차들보다 훨씬 많은 차들이 도로에 있었다.  </p><img src="/assets/images/is/rv2.jpg"><p>이번 숙소는 노란 예쁜집이었다.<br>방음이 좀 안되긴 했지만 깔끔하고 좋았다.<br><img src="/assets/images/is/rv3.jpg"><br><img src="/assets/images/is/rv4.jpg"><br><img src="/assets/images/is/rv5.jpg"><br><img src="/assets/images/is/rv6.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;북쪽에서 남쪽으로 향할수록 확실히 눈이 줄어들고 있었다.  &lt;/p&gt;
&lt;p&gt;한참 길을 달려 도시에 도착하니 이번 여행에서 봤던 차들보다 훨씬 많은 차들이 도로에 있었다.  &lt;/p&gt;
&lt;img src=&quot;/assets/images/is/rv2.jpg&quot;&gt;
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 8] 아쿠레이리도시 2박3일 숙소</title>
    <link href="https://eunii.github.io/2019/03/30/trip/europ/iceland22/"/>
    <id>https://eunii.github.io/2019/03/30/trip/europ/iceland22/</id>
    <published>2019-03-30T11:40:25.000Z</published>
    <updated>2019-05-16T09:45:42.831Z</updated>
    
    <content type="html"><![CDATA[<p>여기서 하루 더 머물기로 했다.<br>숙소는 아파트형태로 방 2개 거실 부엌 세탁기가 있었다.<br>깔끔해서 편하게 지냈던것 같다.<br><img src="/assets/images/is/aa2.jpg"><br>엄마가 둘째날 저녁 요리하다가 화재 경보기를 울렸다.<br>해외에서 요란한 소리가 나니 너무 놀랐다.<br>다행히 큰 소란 없이 잘 마무리 되었다.<br><img src="/assets/images/is/aa3.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;여기서 하루 더 머물기로 했다.&lt;br&gt;숙소는 아파트형태로 방 2개 거실 부엌 세탁기가 있었다.&lt;br&gt;깔끔해서 편하게 지냈던것 같다.&lt;br&gt;&lt;img src=&quot;/assets/images/is/aa2.jpg&quot;&gt;&lt;br&gt;엄마가 둘째날 저녁 요리하다가 화재
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 8] 아쿠레이리도시 구경하기- 쇼핑</title>
    <link href="https://eunii.github.io/2019/03/29/trip/europ/iceland21/"/>
    <id>https://eunii.github.io/2019/03/29/trip/europ/iceland21/</id>
    <published>2019-03-29T11:40:25.000Z</published>
    <updated>2019-05-16T09:45:42.824Z</updated>
    
    <content type="html"><![CDATA[<p>수영을 마치고 운전으로 고생하신 아빠는 쉬러 숙소에 가셨다.<br>우리 세 모녀는 도시를 구경했다.<br>숙소 옆 루터 성당이다..<br><img src="/assets/images/is/as5.jpg"><br>도시 구경을 마치고 쇼핑몰 센터에 갔다.<br><img src="/assets/images/is/as3.jpg"><br>눈이 발목까지 쌓이고 계속 왔다.<br>도시는 아기자기한 가게 들이 많았다.<br>옷같은것도 팔고 했는데 딱히 맘에 드는 옷들은 없었다.<br><img src="/assets/images/is/as2.jpg"><br>여기는 특산품이 따로 없어서 그냥 구경만 많이하고<br>엄마 친구들 기념품 사고 저녁 먹을거랑 간식이랑 샀다.  </p><p>숙소에 돌아와보니 주차 위반 딱지를 뗐다ㅠㅠ</p><img src="/assets/images/is/as4.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;수영을 마치고 운전으로 고생하신 아빠는 쉬러 숙소에 가셨다.&lt;br&gt;우리 세 모녀는 도시를 구경했다.&lt;br&gt;숙소 옆 루터 성당이다..&lt;br&gt;&lt;img src=&quot;/assets/images/is/as5.jpg&quot;&gt;&lt;br&gt;도시 구경을 마치고 쇼핑몰 센터에 
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 8] 아쿠레이리에서 수영하기</title>
    <link href="https://eunii.github.io/2019/03/28/trip/europ/iceland20/"/>
    <id>https://eunii.github.io/2019/03/28/trip/europ/iceland20/</id>
    <published>2019-03-28T11:40:25.000Z</published>
    <updated>2019-05-16T09:45:42.816Z</updated>
    
    <content type="html"><![CDATA[<p>큰 도시에 와서 맘 편히 휴식을 취하기로 했다.<br>아이슬란드는 수영장이 유명한데 숙소 근처에 수영장이 있어 가보기로 했다.<br>여태 지냈던 도시들은 다 작은 마을이었는데 여기는 되게 컸다.  </p><img src="/assets/images/is/sw2.jpg"><p>수영장에 도착했다.<br>공용 샤워장에서 어린 아이슬란드 꼬맹이들이 황인종 처음 봣는지 넘 신기 하게 처다보더라..<br>옷을 갈아입고 밖에 야외로 나가니까 눈은 여전히 많이 내렸다.<br>수영장 물온도와 날씨 차이 때문에 물안개가 껴서 포근한 느낌이 들었다.<br>아침이라 그런지 사람들도 많이없었고, 관광객들은 우리 가족뿐인것 같았다.<br>눈 맞으면서 수영하니까 재밌었다.  </p><img src="/assets/images/is/sw3.jpg"><p>신나게 수영하고 한 서너군데 온천 물이 있어서 추우면 거기서 몸을 녹였다.<br>너무 추워서 물 밖을 나갈때는 후다닥 이동했다.<br>미끄럼틀도 있었는데 잠깐 운영하는 시간이 있어 울 가족들만 신나게 탔다.<br>현지인들은 자주와서 재미 없나보다.ㅎㅎ</p><img src="/assets/images/is/sw4.jpg"><img src="/assets/images/is/sw5.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;큰 도시에 와서 맘 편히 휴식을 취하기로 했다.&lt;br&gt;아이슬란드는 수영장이 유명한데 숙소 근처에 수영장이 있어 가보기로 했다.&lt;br&gt;여태 지냈던 도시들은 다 작은 마을이었는데 여기는 되게 컸다.  &lt;/p&gt;
&lt;img src=&quot;/assets/imag
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 7] 극적으로 미바튼 탈출하기</title>
    <link href="https://eunii.github.io/2019/03/27/trip/europ/iceland19/"/>
    <id>https://eunii.github.io/2019/03/27/trip/europ/iceland19/</id>
    <published>2019-03-27T11:40:25.000Z</published>
    <updated>2019-05-16T09:45:42.778Z</updated>
    
    <content type="html"><![CDATA[<p>아침이 되었다.<br>눈은 더 많이 내렸다.<br>전날 눈때문에 많이 고생했던 우리는 빨리 미바튼을 떠나고 싶었다.<br>점심 도시락을 싸고 출발하려는데 눈이 너무 많이와서 도저히 차에까지 갈 수 없었다.<br>고립되었다ㅠㅠ<br>아무래도 금방 출발하기는 힘들 것 같아 커피와 음식을 가질러 차에 가기로 했다.<br>차에 가는것도 너무 힘들었다.<br>눈이 너무 많이 와서 얼굴을 때리고, 지형을 몰라서 몸이 푹푹 눈속에 파묻혔다.<br><img src="/assets/images/is/미바튼고립.gif"></p><p>나는 결국 차에 올라가는것을 실패하고 엄빠만 다녀오셨다.<br>친절한 숙소 호스트가 추가 요금 없이 숙소에서 지내게 해주었다.<br><img src="/assets/images/is/m3.jpg"></p><p>점심시간이 다 되어도 눈이 그칠 기미가 안 보였다.<br>싸놓은 도시락을 먹었다.<br>자는것 밖에는 할일이 없었다.<br>사실 이런 눈은 경험하기 힘들어서 밖에 나가서 눈에 파묻히기 놀이하면 좋았을텐데ㅠㅠ라는 생각이 한국에서 들었다.  </p><img src="/assets/images/is/m4.jpg"><p>세시? 네시쯤 드디어 눈이 조금 잦아들고 바람이 너무 거세 도로 위의 눈을 다 날려버렸다.<br>우리는 눈이 더내리기 전에 첩보 영화처럼 캐리어를 들고 눈위를 막 뛰었다.<br>웃음이 나왔다.<br>차에 겨우겨우 도착한 후 엉금엉금 기어서 겨우 1번 메인로드에 도착했다.<br>메인도로를 채10분도 달리지 않았을때 눈에 처박힌 차를 볼 수 있었다.  </p><img src="/assets/images/is/m1.jpg"><p>일몰시간이 다 되서야 우리는 제2의 도시 아쿠레이리로 출발할 수 있었다.<br>사실 미바튼에서 아쿠레이리 가는길목에 폭포가 하나 더 있는데 구경할 새도 없이 빨리 이동했다.<br>해가 다 지고 숙소에 도착했다.<br>눈이 역시 많았지만 사람들도 많았기에 굉장히 안도했다.<br>늦은 저녁을 먹고 푹 쉬었다.<br><img src="/assets/images/is/m2.jpg"></p><p>내일은 도시구경을 다닐 예정이다.  </p><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d210431.40991207212!2d-17.785130091192528!3d65.66646795991183!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48cd9e68213ddccb%3A0x195ccac63dc376ff!2zSGxpZCBDb3R0YWdlcyBNw712YXRuLCBIcmF1bmJyw7puLCA2NjAgUmV5a2phaGzDrcOwLCDslYTsnbTsiqzrnoDrk5w!3m2!1d65.64941329999999!2d-16.9187157!4m5!1s0x48d28f10e2315807%3A0x751d357649f68c5f!2z7Zi47YWUIOyVhOy_oOugiOydtOumrA!3m2!1d65.67824399999999!2d-18.089834!5e0!3m2!1sko!2skr!4v1557476546400!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;아침이 되었다.&lt;br&gt;눈은 더 많이 내렸다.&lt;br&gt;전날 눈때문에 많이 고생했던 우리는 빨리 미바튼을 떠나고 싶었다.&lt;br&gt;점심 도시락을 싸고 출발하려는데 눈이 너무 많이와서 도저히 차에까지 갈 수 없었다.&lt;br&gt;고립되었다ㅠㅠ&lt;br&gt;아무래도 금방 
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 6] 미바튼 숙소 외딴 코지</title>
    <link href="https://eunii.github.io/2019/03/26/trip/europ/iceland18/"/>
    <id>https://eunii.github.io/2019/03/26/trip/europ/iceland18/</id>
    <published>2019-03-26T11:40:25.000Z</published>
    <updated>2019-05-13T08:03:27.756Z</updated>
    
    <content type="html"><![CDATA[<p>테티포스에서 한바탕 고생을 한탓에 우리는 빨리 숙소에 들어가서 쉬고싶었다.<br>1번 링로드와 완전 가까운 숙소를 예약했다.<br>약간의 문제가 있었다.<br>눈이 많이 쌓여서 차를 숙소까지 가져갈 수가 없었다.<br>차는 큰도로 옆 공터에 대고, 우리가 하루동안 필요한 짐만 캐리어에 챙겨서 눈밭을 굴러 내려갔다.<br>차가 있는 위치와 숙소는 경사가 심했고 길이 보이지 않아 호스트 아저씨가 길을 걸으며 내 주었다.<br>우리는 길을 더 크게 내며 킬킬거리며 걸었다.</p><p>숙소는 깔끔하고 좋았다.<br>다락방 작은 창에서는 별이 아주 잘 보였다.</p><p>고생한 우리를 위해 엄마가 닭볶음탕을 해주셨다.<br>먹고 다들 뻗어서 쉬었다.  </p><p>자다 일어니 창밖에서 오로라가 보였다.<br>언능 식구들을 다 깨워서 이번엔 의자를 가지고 밖으로 나갔다.<br>옆 숙소 불빛이 넘 밝아 아쉬웠지만 이렇게 별이 많은 하늘은 처음 봤다.<br>나름 별 보는 것을 좋아해서 여러 나라에서 별을 보러 다녔는데 미바튼에서 본 하늘은 정말 최고였다.<br>그렇게 세번째 오로라를 볼 수 있었다.<br>실컷 또 하늘을 구경하고 야식으로 라면을 먹고 잤다.  </p><img src="/assets/images/is/mv1.jpg"><img src="/assets/images/is/mv2.jpg"><img src="/assets/images/is/mv3.jpg"><img src="/assets/images/is/mv5.jpg"><img src="/assets/images/is/mv6.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d423124.86339105276!2d-15.75767952540511!3d65.52712851242012!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48cbfefc843cd699%3A0xefc553adda96809d!2z7JWE7J207Iqs656A65OcIOyEuOydtOuUlOyKpO2UvOyZuOultOuSpOultA!3m2!1d65.2598494!2d-14.010115599999999!4m5!1s0x48cd068ace5f4fb9%3A0x404278759828237a!2z642w7Yuw7Y-s7IqkIOyVhOydtOyKrOuegOuTnA!3m2!1d65.81466619999999!2d-16.384576!5e0!3m2!1sko!2skr!4v1556886862709!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;테티포스에서 한바탕 고생을 한탓에 우리는 빨리 숙소에 들어가서 쉬고싶었다.&lt;br&gt;1번 링로드와 완전 가까운 숙소를 예약했다.&lt;br&gt;약간의 문제가 있었다.&lt;br&gt;눈이 많이 쌓여서 차를 숙소까지 가져갈 수가 없었다.&lt;br&gt;차는 큰도로 옆 공터에 대고
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="오로라" scheme="https://eunii.github.io/tags/%EC%98%A4%EB%A1%9C%EB%9D%BC/"/>
    
      <category term="숙소" scheme="https://eunii.github.io/tags/%EC%88%99%EC%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 6] 데티포스</title>
    <link href="https://eunii.github.io/2019/03/25/trip/europ/iceland17/"/>
    <id>https://eunii.github.io/2019/03/25/trip/europ/iceland17/</id>
    <published>2019-03-25T11:40:25.000Z</published>
    <updated>2019-05-15T04:49:23.552Z</updated>
    
    <content type="html"><![CDATA[<p>날씨나 도로사정때문에 겨울에는 보기 힘들다는 데티포스를 가기로 했다.<br>하필 이런 눈내리는 날씨에.<br>아이슬란드는 겨울에 눈때문에 도로가 통제되는 일이 빈번하여<br>도로상황을 보는 앱을 항상 보면서 다녔다.<br><img src="/assets/images/is/아슬제설차.gif"></p><p>초록색은 clear 1단계.<br>빨간색은 impassable 8단계.<br>북쪽의 도로는 대부분 주황색, spots of ice, 하늘색 slippery 상태였다.<br>데티포스를 향하는 길은 핑크 땡땡이.<br>dif.driving 6단계 이었다.<br>4륜 구동차는 다닐수 있다고 공지되어 있어 우리는 가보기로 했다.<br>처음 들어가는 길은 신났다.<br>모험심이 넘쳤고 스릴 있었다.<br><img src="/assets/images/is/df1.jpg"><br>한 10분쯤 들어갔을까. 갑자기 눈이 쏟아지며 가시거리가 좁아졌다.<br>1미터 앞도 거의 안 보이는데다가 눈이 너무 쌓여 폭포를 포기하고 돌아나오기로 했다.<br>도로에는 우리 차 밖에 없었다.<br>차를 돌리는데 바퀴가 헛돌았다.<br>여행 처음으로 사고의 위험을 느꼈다.<br><img src="/assets/images/is/데티포스.gif"></p><p>다같이 내려서 차를 밀고 겨우 돌렸다.<br>한창 차가 눈에 빠져서 끙끙댈 때 다른 차가 들어왔다.<br>우리 차를 보더니 곧 돌려서 나갔다.<br>그 차가 낸 눈길을 따라 천천히 왔던 길을 되돌아 나갔다.<br><img src="/assets/images/is/데티포스2.gif"></p><p>겨우 1번도로로 탈출할 수 있었다.<br>빨리 숙소로 가서 쉬고 싶었다.<br>우리의 시련은 이게 시작이었다… </p><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d423124.86339105276!2d-15.75767952540511!3d65.52712851242012!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48cbfefc843cd699%3A0xefc553adda96809d!2z7JWE7J207Iqs656A65OcIOyEuOydtOuUlOyKpO2UvOyZuOultOuSpOultA!3m2!1d65.2598494!2d-14.010115599999999!4m5!1s0x48cd068ace5f4fb9%3A0x404278759828237a!2z642w7Yuw7Y-s7IqkIOyVhOydtOyKrOuegOuTnA!3m2!1d65.81466619999999!2d-16.384576!5e0!3m2!1sko!2skr!4v1556886862709!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;날씨나 도로사정때문에 겨울에는 보기 힘들다는 데티포스를 가기로 했다.&lt;br&gt;하필 이런 눈내리는 날씨에.&lt;br&gt;아이슬란드는 겨울에 눈때문에 도로가 통제되는 일이 빈번하여&lt;br&gt;도로상황을 보는 앱을 항상 보면서 다녔다.&lt;br&gt;&lt;img src=&quot;/as
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 6] 세이디스피외르뒤르</title>
    <link href="https://eunii.github.io/2019/03/24/trip/europ/iceland16/"/>
    <id>https://eunii.github.io/2019/03/24/trip/europ/iceland16/</id>
    <published>2019-03-24T11:40:25.000Z</published>
    <updated>2019-05-14T02:16:22.199Z</updated>
    
    <content type="html"><![CDATA[<p>아침에 일어나보니 눈이 많이 쌓여있었다.<br>여행일정중 가장 많은 눈이 쌓였다고 생각했다.<br>그래도 새로운 곳으로 떠나보기로 했다.<br>아빠가 제일 가보고 싶어했던 세이디스피외르뒤르.<br>월터의 현실은 상상이 된다에 나왔던 곳이다.<br>월터가 스케이트 보드 타고 달리던 그 푸른 길을<br>우리는 눈과 싸우며 조심히 드라이브 했다.  </p><p>도시에 들어갈수록 길이 위험해지고 눈이 많이 내렸다.<br>도착했을땐 하얀 마을이 보였다.<br>눈이 없다면 알록달록 파스텔 톤의 이쁜 마을이었을 것 같다.<br>시그니쳐 하늘색 교회에서 사진을 찍고.<br>더 눈이 많이 내리기 전에 빨리 출발하기로 했다.<br>정말 눈이 많이왔다.  </p><img src="/assets/images/is/wh1.jpg"><img src="/assets/images/is/wh3.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d239245.47652164946!2d-14.753785795542592!3d65.21523919442501!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48cc04800da89ed3%3A0x95bf416b2c7c7f54!2z7JWE7J207Iqs656A65OcIOyXkOydtOydvOyKpO2DgOuUlOultA!3m2!1d65.2668743!2d-14.3948468!4m5!1s0x48cbfefc843cd699%3A0xefc553adda96809d!2z7JWE7J207Iqs656A65OcIOyEuOydtOuUlOyKpO2UvOyZuOultOuSpOultA!3m2!1d65.2598494!2d-14.010115599999999!5e0!3m2!1sko!2skr!4v1556886474952!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;아침에 일어나보니 눈이 많이 쌓여있었다.&lt;br&gt;여행일정중 가장 많은 눈이 쌓였다고 생각했다.&lt;br&gt;그래도 새로운 곳으로 떠나보기로 했다.&lt;br&gt;아빠가 제일 가보고 싶어했던 세이디스피외르뒤르.&lt;br&gt;월터의 현실은 상상이 된다에 나왔던 곳이다.&lt;br
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 5] 하얀 집 - 에이일스타디르</title>
    <link href="https://eunii.github.io/2019/03/23/trip/europ/iceland15/"/>
    <id>https://eunii.github.io/2019/03/23/trip/europ/iceland15/</id>
    <published>2019-03-23T11:40:25.000Z</published>
    <updated>2019-05-13T08:03:27.714Z</updated>
    
    <content type="html"><![CDATA[<p>또다시 두시간 정도 달려 에이일스타디르에 도착했다.<br>디위피보귀르에서 직선 거리는 멀지 않은데 해안선을 따라 달리느라 오래 걸렸다.<br>오늘은 관광 코스가 없다고 그랬었는데<br>해안선을 따라 달리는 풍경이 너무나 좋았다.<br>하루종일 운전하는 아빠는 힘드셨을듯..<br>바람이 세지고 어두워지니  낭떠러지 같은 해안가 도로가 굉장히 위험했다.<br>드디어 숙소 도착.<br>도시에 거의 다 와서 눈이 굉장히 많이 내렸다.<br>무릎까지 순식간에 쌓였다.<br>숙소 문이 잠겨있어 친절한 주인 아져씨가 와서 문을 열어주고 갔다.<br>아저씨가 날씨가 안 좋아서 하루 더 지내게 되면 방을 알아봐준다고 했다.<br>여기서 하루 더 보낼수도 있겠다 싶었다.  </p><p>여태 지냈던 방중에 가장 넓고 좋았다.<br>부얶도 크고 깨끗했고. 식자재료도 많이있었다.<br>가장 중요했던 세탁기가 있어서 그동안 밀렸던 빨래를 몰아서 했다.  </p><img src="/assets/images/is/es1.jpg"><img src="/assets/images/is/es2.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m33!1m12!1m3!1d431568.48785812827!2d-14.934145040077524!3d65.0084984412641!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m18!3e0!4m4!1s0x0%3A0x7f23d2cc33c8b130!3m2!1d65.26913!2d-14.398055!4m5!1s0x48ceae66e0c4966d%3A0x2133e0ae592c8983!2zUmV5w7BhcmZqw7Zyw7B1cg!3m2!1d65.0354339!2d-14.2159929!4m5!1s0x48cec38f02292149%3A0x3b5e271b6c5b9d8b!2zRGrDunBpdm9ndXIsIOyVhOydtOyKrOuegOuTnA!3m2!1d64.656888!2d-14.290050899999999!5e0!3m2!1sko!2skr!4v1556877831734!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;또다시 두시간 정도 달려 에이일스타디르에 도착했다.&lt;br&gt;디위피보귀르에서 직선 거리는 멀지 않은데 해안선을 따라 달리느라 오래 걸렸다.&lt;br&gt;오늘은 관광 코스가 없다고 그랬었는데&lt;br&gt;해안선을 따라 달리는 풍경이 너무나 좋았다.&lt;br&gt;하루종일 운
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="숙소" scheme="https://eunii.github.io/tags/%EC%88%99%EC%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 5] 디위피보귀르-어촌마을</title>
    <link href="https://eunii.github.io/2019/03/22/trip/europ/iceland14/"/>
    <id>https://eunii.github.io/2019/03/22/trip/europ/iceland14/</id>
    <published>2019-03-22T11:40:25.000Z</published>
    <updated>2019-05-14T02:16:22.227Z</updated>
    
    <content type="html"><![CDATA[<p>오늘은 관광보다는 이동이 주 목적이었다.<br>아이슬란드 두번째 도시 에이일스타디르에 도착해야했다.<br>차를 오래 타면 힘드니까 중간 어촌도시에 내려서 쉬어갔다.<br>기름도 넣고 네토에서 장도 봤다.<br>네토마트는 전반적으로 보너스마트 보다 비싸다..<br>항구도 있는 예쁜마을이었다.<br>여기서 하루를 보냈어도 좋았을것 같다.<br>아직 에이일스타디르까지 갈 길이 멀다.  </p><img src="/assets/images/is/dv2.jpg"><img src="/assets/images/is/dv3.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m27!1m12!1m3!1d222992.87385726158!2d-16.322503270503844!3d64.11002414796697!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m12!3e0!4m4!1s0x0%3A0x4202e865f907845a!3m2!1d64.04433399999999!2d-16.1776622!4m5!1s0x48cec38f02292149%3A0x3b5e271b6c5b9d8b!2zRGrDunBpdm9ndXIsIOyVhOydtOyKrOuegOuTnA!3m2!1d64.656888!2d-14.290050899999999!5e0!3m2!1sko!2skr!4v1556876019487!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;오늘은 관광보다는 이동이 주 목적이었다.&lt;br&gt;아이슬란드 두번째 도시 에이일스타디르에 도착해야했다.&lt;br&gt;차를 오래 타면 힘드니까 중간 어촌도시에 내려서 쉬어갔다.&lt;br&gt;기름도 넣고 네토에서 장도 봤다.&lt;br&gt;네토마트는 전반적으로 보너스마트 보다
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 5] 다이아몬드 비치-빙하 해변</title>
    <link href="https://eunii.github.io/2019/03/21/trip/europ/iceland13/"/>
    <id>https://eunii.github.io/2019/03/21/trip/europ/iceland13/</id>
    <published>2019-03-21T11:40:25.000Z</published>
    <updated>2019-05-14T02:16:22.186Z</updated>
    
    <content type="html"><![CDATA[<p>요쿨살론 근처에 다이아몬드 비치가 있다.<br>두군데가 있는데 아무곳이나 봐도 이쁘다.<br>아침 햇살에 빙하가 너무 아름다웠다.<br>왜 다이아몬드 비치라고 불리는지 너무나 이해가 갔다.<br>바닷가에서 수달? 같은것도 봤다.<br>오래있고 싶었지만 바닷물이 슬슬 들어오는것 같기도 하고..<br>다음여행지가 밀려있어서 잠깐 보구 출발했다.  </p><img src="/assets/images/is/di2.jpg"><img src="/assets/images/is/di3.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d27922.81401172801!2d-16.23882460842084!3d64.0614232131121!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48cfd6ecd73a3819%3A0xcd05c959e10146a9!2zSsO2a3Vsc8OhcmzDs24sIOyVhOydtOyKrOuegOuTnA!3m2!1d64.0784458!2d-16.230553699999998!4m5!1s0x48cfd719a4fb06f3%3A0x4202e865f907845a!2zRGlhbW9uZCBCZWFjaCwg7JWE7J207Iqs656A65Oc!3m2!1d64.04433399999999!2d-16.1776622!5e0!3m2!1sko!2skr!4v1556872117993!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;요쿨살론 근처에 다이아몬드 비치가 있다.&lt;br&gt;두군데가 있는데 아무곳이나 봐도 이쁘다.&lt;br&gt;아침 햇살에 빙하가 너무 아름다웠다.&lt;br&gt;왜 다이아몬드 비치라고 불리는지 너무나 이해가 갔다.&lt;br&gt;바닷가에서 수달? 같은것도 봤다.&lt;br&gt;오래있고 싶
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 5] 요쿨살론-빙하호수</title>
    <link href="https://eunii.github.io/2019/03/20/trip/europ/iceland12/"/>
    <id>https://eunii.github.io/2019/03/20/trip/europ/iceland12/</id>
    <published>2019-03-20T11:40:25.000Z</published>
    <updated>2019-05-14T02:16:22.213Z</updated>
    
    <content type="html"><![CDATA[<p>빙하가 떠내려온 호수인 요쿨살론에 도착했다.<br>오로라 뷰 포인트라던데 우리는 이른 아침에 도착했다.<br>사실 해가 짧아서 새벽도 아닌데 어스름 했다.<br>얼음을 너무 좋아하는 내가 빙하를 먹어 볼 수 있다니!!<br>미리 잔에 음료수를 담아가서 빙하를 넣어서 먹었다.<br>빙하는 엄청압축되었던지 시간이 꽤 오래지나도 형태를 유지했다.<br>여기에 정신이 팔려서 다이아몬드 비치에 못 갈뻔했다.<br>못갔으면 너무 아쉬웠을듯.</p><img src="/assets/images/is/j1.jpg"><img src="/assets/images/is/j2.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d55790.54782356903!2d-16.19353286698807!3d64.08890705488062!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48cfd204c28a3b7b%3A0xc0d8f68f87d104ae!2z7Iqk7Lm07J2066Oo7Iuc65OcIOqyjOyKpO2KuO2VmOyasOyKpCDDnmrDs8OwdmVndXIsIOyVhOydtOyKrOuegOuTnA!3m2!1d64.1293546!2d-16.0160906!4m5!1s0x48cfd6ecd73a3819%3A0xcd05c959e10146a9!2zSsO2a3Vsc8OhcmzDs24sIOyVhOydtOyKrOuegOuTnA!3m2!1d64.0784458!2d-16.230553699999998!5e0!3m2!1sko!2skr!4v1556872082330!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;빙하가 떠내려온 호수인 요쿨살론에 도착했다.&lt;br&gt;오로라 뷰 포인트라던데 우리는 이른 아침에 도착했다.&lt;br&gt;사실 해가 짧아서 새벽도 아닌데 어스름 했다.&lt;br&gt;얼음을 너무 좋아하는 내가 빙하를 먹어 볼 수 있다니!!&lt;br&gt;미리 잔에 음료수를 담
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="빙하" scheme="https://eunii.github.io/tags/%EB%B9%99%ED%95%98/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 4] 스카이루스 게스트하우스</title>
    <link href="https://eunii.github.io/2019/03/19/trip/europ/iceland11/"/>
    <id>https://eunii.github.io/2019/03/19/trip/europ/iceland11/</id>
    <published>2019-03-19T11:40:25.000Z</published>
    <updated>2019-05-13T08:03:27.604Z</updated>
    
    <content type="html"><![CDATA[<p>여태껏 숙소는 다 개별룸으로 지냈는데<br>방이 없어서 이날 하루 게스트 하우스에서 지냈다.<br>깐깐해보이는 주인 아줌마가 계셨는데 친절했다.<br>공용주방이 너무 작아서 두팀밖에 밥을 못 먹었다.<br>공용화장실이지만 그래도 깨끗했다.<br>아침에 시끄러운 공사소리가 기억에 남는다.  </p><img src="/assets/images/is/ge2.jpg"><img src="/assets/images/is/ge3.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m27!1m12!1m3!1d375940.2071939442!2d-17.6044811089338!3d64.03554429869675!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m12!3e0!4m4!1s0x0%3A0xd47cf30a57e565ea!3m2!1d64.016205!2d-16.9667285!4m5!1s0x48cfd204c28a3b7b%3A0xc0d8f68f87d104ae!2z7Iqk7Lm07J2066Oo7Iuc65OcIOqyjOyKpO2KuO2VmOyasOyKpCDDnmrDs8OwdmVndXIsIOyVhOydtOyKrOuegOuTnA!3m2!1d64.1293546!2d-16.0160906!5e0!3m2!1sko!2skr!4v1556872025660!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;여태껏 숙소는 다 개별룸으로 지냈는데&lt;br&gt;방이 없어서 이날 하루 게스트 하우스에서 지냈다.&lt;br&gt;깐깐해보이는 주인 아줌마가 계셨는데 친절했다.&lt;br&gt;공용주방이 너무 작아서 두팀밖에 밥을 못 먹었다.&lt;br&gt;공용화장실이지만 그래도 깨끗했다.&lt;br&gt;
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="숙소" scheme="https://eunii.github.io/tags/%EC%88%99%EC%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 4] 스카프타펠-빙하 투어</title>
    <link href="https://eunii.github.io/2019/03/18/trip/europ/iceland10/"/>
    <id>https://eunii.github.io/2019/03/18/trip/europ/iceland10/</id>
    <published>2019-03-18T11:40:25.000Z</published>
    <updated>2019-05-13T08:03:27.566Z</updated>
    
    <content type="html"><![CDATA[<p>전날밤 스카프타펠 빙하트레킹 투어를 신청했다.<br>두시시작이었나.<br>눈이 와서 걱정했는데 다행이 투어시간에는 눈이 안 왔다.<br>빙하사이를 걷는것은 굉장한 일이라고 생갔했었다.<br>멀리서 눈에 덮인 빙하가 보였다.<br>빙하가 아니라 눈으로 보였다.<br>푸른 얼음 덩어리를 기대한 나는 조금 실망하기는 했다.<br>그래도 언제 빙하를 걸어 보겠어.<br>신기하긴했다.  </p><p>제시카 가이드가 사진찍는 시간도 많이 주고<br>설명도 친절하게 잘 해줬다.<br>얼음동굴도 들어가봤다.<br>얼음이 천천히 녹아 동굴이 생긴거다.<br>겨울에만 볼 수 있는 투어여서 특별했다.<br>위험해서 걷는 도중에 사진을 찍을 수 는 없었는데<br>고프로를 머리에 붙이고 가서 동영상은 건질 수 있었다.<br>노을을 내내보며 빙하 트레킹 하는것도 나쁘지는 않았다.  </p><img src="/assets/images/is/it1.jpg"><img src="/assets/images/is/it2.jpg"><img src="/assets/images/is/it3.jpg"><img src="/assets/images/is/it4.jpg"><img src="/assets/images/is/it5.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d223991.26907721715!2d-17.671654296108418!3d63.9854506561288!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48d0fed653ebf4bf%3A0x8108d56e3cd604c7!2z7JWE7J207Iqs656A65OcIEvDoWxmYWZlbGwsIOuLrOyHvO2UhOuUlCDqsozsiqTtirjtlZjsmrDsiqQ!3m2!1d63.911345!2d-17.837642!4m5!1s0x48d035dd195fd15b%3A0x7aeae20830cc34d0!2z7JWE7J207Iqs656A65OcIOugiOydtOy6rOu5hO2BrCDsiqTsubTtlITtg4DtjqA!3m2!1d64.070414!2d-16.9751755!5e0!3m2!1sko!2skr!4v1556871966119!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;전날밤 스카프타펠 빙하트레킹 투어를 신청했다.&lt;br&gt;두시시작이었나.&lt;br&gt;눈이 와서 걱정했는데 다행이 투어시간에는 눈이 안 왔다.&lt;br&gt;빙하사이를 걷는것은 굉장한 일이라고 생갔했었다.&lt;br&gt;멀리서 눈에 덮인 빙하가 보였다.&lt;br&gt;빙하가 아니라 눈
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="눈" scheme="https://eunii.github.io/tags/%EB%88%88/"/>
    
      <category term="빙하" scheme="https://eunii.github.io/tags/%EB%B9%99%ED%95%98/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 3] 스노우볼 달쇼프디 게스트하우스</title>
    <link href="https://eunii.github.io/2019/03/17/trip/europ/iceland9/"/>
    <id>https://eunii.github.io/2019/03/17/trip/europ/iceland9/</id>
    <published>2019-03-17T11:40:25.000Z</published>
    <updated>2019-05-13T08:03:27.639Z</updated>
    
    <content type="html"><![CDATA[<p>이동시간이 길어서 어느덧 해가 져버렸다.<br>점점 눈이 많아졌다. 깜깜해졌다.<br>까만 세상속에 마을 불빛이 혼자 깜박였다.<br>그 불빛이 없었으면 너무 무서웠을것 같다.<br>잘 보이지도 않는 눈길을 조심히 달려 겨우 숙소에 도착했다.<br>숙소빼고 주변에 건물이 세채 밖에 없었다.<br>정말 동화속 같았다.<br>주변이 모두 평지여서 여기서 오로라와 별을 보고싶었지만,<br>구름이 잔뜩있었다.<br>우리는 숙소가 너무 마음에 들어 하루를 조금 쉬어가기로 했다.<br>오랜만에 늦잠자고, 조식을 즐기기로 했다.  </p><p>다음날<br>새벽에 깨서 혼자 산책을 나갔다.<br>온통 눈밭에 하늘도 구름에 어스름한 안개까지 정말 스노우 볼 속에 있는 기분이었다.<br>해가 뜨자 아쉽게 그 분위기는 사라졌지만 동화속 풍경은 여전했다.<br>아마 가족들도 모두 이번 여행에서 가장 기억에 남는 숙소가 아니었을까.<br>여름에 다시 오고싶은 숙소 중에 하나다.</p><img src="/assets/images/is/d1.jpg"><img src="/assets/images/is/d3.jpg"><img src="/assets/images/is/d4.jpg"><img src="/assets/images/is/d5.jpg"><img src="/assets/images/is/d6.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d453208.1720700995!2d-18.965367688530847!3d63.65881085950817!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48d74984d567267d%3A0xe07954a3f4b36bd5!2zUmV5bmlzZmphcmEsIOyVhOydtOyKrOuegOuTnA!3m2!1d63.4057404!2d-19.0716193!4m5!1s0x48d0fed653ebf4bf%3A0x8108d56e3cd604c7!2z7JWE7J207Iqs656A65OcIEvDoWxmYWZlbGwsIOuLrOyHvO2UhOuUlCDqsozsiqTtirjtlZjsmrDsiqQ!3m2!1d63.911345!2d-17.837642!5e0!3m2!1sko!2skr!4v1556871903602!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이동시간이 길어서 어느덧 해가 져버렸다.&lt;br&gt;점점 눈이 많아졌다. 깜깜해졌다.&lt;br&gt;까만 세상속에 마을 불빛이 혼자 깜박였다.&lt;br&gt;그 불빛이 없었으면 너무 무서웠을것 같다.&lt;br&gt;잘 보이지도 않는 눈길을 조심히 달려 겨우 숙소에 도착했다.&lt;b
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="숙소" scheme="https://eunii.github.io/tags/%EC%88%99%EC%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 3] 레이니스피아라</title>
    <link href="https://eunii.github.io/2019/03/16/trip/europ/iceland8/"/>
    <id>https://eunii.github.io/2019/03/16/trip/europ/iceland8/</id>
    <published>2019-03-16T11:40:25.000Z</published>
    <updated>2019-05-13T08:03:27.614Z</updated>
    
    <content type="html"><![CDATA[<p>폭포를 보고 검은모래 해변을 보러왔다.<br>아빠가 무려 2천원짜리 화장실에 다녀왔다.<br>여긴 신기하게 바닷가 특유 비릿한 냄새가 안 난다.<br>파도와 바람이 거세어 사진찍다 사고를 당한 사람이 많다고 조심하란다.<br>아이슬란드에서 사고가 자주 일어나니 조심히 다녀야겠다.<br>주상절리도 보고 나름 섬 국가인데 바다에 처음 왔다.<br>해가 지는걸 보니 이제 숙소로 돌아가야 된다.<br>숙소잡는데 애를 좀 먹었지만 너무 좋았다.</p><img src="/assets/images/is/r1.jpg"><img src="/assets/images/is/r3.jpg"><img src="/assets/images/is/r4.jpg"><img src="/assets/images/is/r5.jpg"><img src="/assets/images/is/r6.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d114059.58594015245!2d-19.4209869543067!3d63.46898094097938!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48d73b7639a58c15%3A0xf60c71fcdfe7948!2z7JWE7J207Iqs656A65OcIOyKpOy9lOqwgO2PrOyKpA!3m2!1d63.5320523!2d-19.511370499999998!4m5!1s0x48d74984d567267d%3A0xe07954a3f4b36bd5!2zUmV5bmlzZmphcmEsIOyVhOydtOyKrOuegOuTnA!3m2!1d63.4057404!2d-19.0716193!5e0!3m2!1sko!2skr!4v1556871869711!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;폭포를 보고 검은모래 해변을 보러왔다.&lt;br&gt;아빠가 무려 2천원짜리 화장실에 다녀왔다.&lt;br&gt;여긴 신기하게 바닷가 특유 비릿한 냄새가 안 난다.&lt;br&gt;파도와 바람이 거세어 사진찍다 사고를 당한 사람이 많다고 조심하란다.&lt;br&gt;아이슬란드에서 사고가
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="해변" scheme="https://eunii.github.io/tags/%ED%95%B4%EB%B3%80/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 3] 스코가포스 폭포</title>
    <link href="https://eunii.github.io/2019/03/15/trip/europ/iceland7/"/>
    <id>https://eunii.github.io/2019/03/15/trip/europ/iceland7/</id>
    <published>2019-03-15T11:40:25.000Z</published>
    <updated>2019-05-13T08:03:27.724Z</updated>
    
    <content type="html"><![CDATA[<p>셀야란즈포스에서 조금 더 지나면 스코가포스 폭포가 나온다.<br>조금 더 컸다.<br>스코카포스 폭포는 폭포위로 올라가볼 수 있다.<br>발이 아픈 언니를 빼고 가족들은 계단을 걸어 올라갔다.<br>위에서 내려다 보는 폭포도 멋졌고 올라가니 수평선이 보였다.<br>설산봉우리가 작은 스위스 같아 보이기도 했다.<br>언니는 못 올라와서 아쉬웠겠다.<br>폭포 근처라 계단에 얼음이 많아 오르고 내릴때 아주 위험했다.<br>우리 가족은 아이젠을 신었지만 그래도 조심.<br>특히 내려갈때 미끄러지는 사람들을 많이 봤다.<br>나는 그냥 계단 옆길에 얼음 빙판길에 미끄럼틀을 타기로 했다.<br>엄청 금방 안전하게 내려왔다.ㅎㅎ  </p><img src="/assets/images/is/sp2.jpg"><img src="/assets/images/is/sp3.jpg"><img src="/assets/images/is/sp4.jpg"><img src="/assets/images/is/sp5.jpg"><img src="/assets/images/is/sp6.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d113663.98742072926!2d-19.89096263948583!3d63.56815153846766!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48d71eade8ef2415%3A0xae01e6205209178d!2z7JWE7J207Iqs656A65OcIOyFgOyVvOuegOymiO2PrOyKpA!3m2!1d63.615623199999995!2d-19.9885688!4m5!1s0x48d73b7639a58c15%3A0xf60c71fcdfe7948!2z7JWE7J207Iqs656A65OcIOyKpOy9lOqwgO2PrOyKpA!3m2!1d63.5320523!2d-19.511370499999998!5e0!3m2!1sko!2skr!4v1556871829638!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;셀야란즈포스에서 조금 더 지나면 스코가포스 폭포가 나온다.&lt;br&gt;조금 더 컸다.&lt;br&gt;스코카포스 폭포는 폭포위로 올라가볼 수 있다.&lt;br&gt;발이 아픈 언니를 빼고 가족들은 계단을 걸어 올라갔다.&lt;br&gt;위에서 내려다 보는 폭포도 멋졌고 올라가니 수평
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="폭포" scheme="https://eunii.github.io/tags/%ED%8F%AD%ED%8F%AC/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 3] 셀애란즈포스 폭포</title>
    <link href="https://eunii.github.io/2019/03/14/trip/europ/iceland6/"/>
    <id>https://eunii.github.io/2019/03/14/trip/europ/iceland6/</id>
    <published>2019-03-14T11:40:25.000Z</published>
    <updated>2019-05-13T08:03:27.592Z</updated>
    
    <content type="html"><![CDATA[<p>벌써 세째날 아침.<br>셀야란즈포스에서 멈춰섰다.<br>링로드 1번도로에서 폭포가 멀리서 보여 찾기 쉬웠다.<br>입장료는 없지만 주차비가 있다. 하루에 7천원정도였나.<br>잠깐들러 사진만 찍고 가기에는 조금은 아까웠다.<br>여름엔 폭포 뒤로 들어가볼 수도 있다고 했는데<br>겨울이라 막혀있엇다.아쉽..<br>맑은날에는 쌍문지개도 보인다고한다.<br>조금은 우중충한 날씨. 춥진 않았다.  </p><img src="/assets/images/is/sc2.jpg"><img src="/assets/images/is/sc3.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d113048.83555266072!2d-20.337055716438048!3d63.72219169163856!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48d6e5527e87039d%3A0xf3bb79c859710655!2zUmFuZ8OhcmJha2thciwg7JWE7J207Iqs656A65Oc!3m2!1d63.8339449!2d-20.404695!4m5!1s0x48d71eade8ef2415%3A0xae01e6205209178d!2z7JWE7J207Iqs656A65OcIOyFgOyVvOuegOymiO2PrOyKpA!3m2!1d63.615623199999995!2d-19.9885688!5e0!3m2!1sko!2skr!4v1556872292507!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;벌써 세째날 아침.&lt;br&gt;셀야란즈포스에서 멈춰섰다.&lt;br&gt;링로드 1번도로에서 폭포가 멀리서 보여 찾기 쉬웠다.&lt;br&gt;입장료는 없지만 주차비가 있다. 하루에 7천원정도였나.&lt;br&gt;잠깐들러 사진만 찍고 가기에는 조금은 아까웠다.&lt;br&gt;여름엔 폭포 뒤
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="폭포" scheme="https://eunii.github.io/tags/%ED%8F%AD%ED%8F%AC/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 2] 헬라(Hella)-통나무집</title>
    <link href="https://eunii.github.io/2019/03/13/trip/europ/iceland5/"/>
    <id>https://eunii.github.io/2019/03/13/trip/europ/iceland5/</id>
    <published>2019-03-13T11:40:25.000Z</published>
    <updated>2019-05-13T08:03:27.745Z</updated>
    
    <content type="html"><![CDATA[<p>골든서클 투어중 싱벨리어 국립공원을 이때 못갔다.<br>차 드라이브한게 국립공원을 다 둘러본거라고 생각했다.<br>골든서클 투어를 마치고 근처 작은 마을인 헬라에서 묶었다.<br>숙소 가는 길 핑크핓 하늘에 엄마가 너무 좋아하셨다.<br>숙소뒤에 강가와 노을을 감상했다.<br>마트에서 장을 처음 보고 저녁을 먹은 후 쉬었다.<br>오두막집의 나무 향이 너무 좋았다.<br>언니가 호들갑을 떨며 깨웠는데.<br>숙소밖에서 오로라가 보였다.<br>당장 모든 식구들을 깨워 밖으로 나갔다.<br>아빠언니에겐 첫번째, 엄마와 나에겐 두번째 오로라였다.</p><img src="/assets/images/is/he1.jpg"><img src="/assets/images/is/he3.jpg"><img src="/assets/images/is/he4.jpg"><img src="/assets/images/is/he5.jpg"><img src="/assets/images/is/he6.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d223229.28793745683!2d-20.690106786787396!3d64.08053778597261!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48d6a574af45b6c9%3A0x2c6347db0b411601!2z6rW07Y-s7IqkIOyVhOydtOyKrOuegOuTnA!3m2!1d64.3270716!2d-20.1199478!4m5!1s0x48d6e5527e87039d%3A0xf3bb79c859710655!2zUmFuZ8OhcmJha2thciwg7JWE7J207Iqs656A65Oc!3m2!1d63.8339449!2d-20.404695!5e0!3m2!1sko!2skr!4v1556872261022!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;골든서클 투어중 싱벨리어 국립공원을 이때 못갔다.&lt;br&gt;차 드라이브한게 국립공원을 다 둘러본거라고 생각했다.&lt;br&gt;골든서클 투어를 마치고 근처 작은 마을인 헬라에서 묶었다.&lt;br&gt;숙소 가는 길 핑크핓 하늘에 엄마가 너무 좋아하셨다.&lt;br&gt;숙소뒤에
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="오로라" scheme="https://eunii.github.io/tags/%EC%98%A4%EB%A1%9C%EB%9D%BC/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 2] 골든서클-굴포스</title>
    <link href="https://eunii.github.io/2019/03/12/trip/europ/iceland4/"/>
    <id>https://eunii.github.io/2019/03/12/trip/europ/iceland4/</id>
    <published>2019-03-12T11:40:25.000Z</published>
    <updated>2019-05-13T08:03:27.780Z</updated>
    
    <content type="html"><![CDATA[<p>굴포스 폭포로 향했다.<br>여기는 바람이 너무 세다고 유명했던덴데<br>우리가 갔을때는 너무나 맑고 바람이 많이 안 불었다.<br>덕분에 폭포 소리가 정말 잘 들렸다.<br>맑은 날씨 덕분에 무지개도 볼 수 있었다.<br>자연속에서 이렇게 즐길 수 있는것도 행운이었다.<br>여긴 화장실이 유료였던것 같다.<br><img src="/assets/images/is/gp1.jpg"><br><img src="/assets/images/is/gp3.jpg"></p><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d27667.130190615688!2d-20.2462592060944!3d64.3163394990393!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48d6a39f03424f3f%3A0xb4751c1a62e2283f!2z6rKM7J207Iuc66W0IOyVhOydtOyKrOuegOuTnA!3m2!1d64.31037189999999!2d-20.3023605!4m5!1s0x48d6a574b2fc6401%3A0x80847fefde7e1962!2z6rW07Y-s7IqkIOyVhOydtOyKrOuegOuTnCBHdWxsZm9zc2ksIEd1bGxmb3NzIFBhcmtpbmc!3m2!1d64.3270716!2d-20.1199478!5e0!3m2!1sko!2skr!4v1556871703709!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;굴포스 폭포로 향했다.&lt;br&gt;여기는 바람이 너무 세다고 유명했던덴데&lt;br&gt;우리가 갔을때는 너무나 맑고 바람이 많이 안 불었다.&lt;br&gt;덕분에 폭포 소리가 정말 잘 들렸다.&lt;br&gt;맑은 날씨 덕분에 무지개도 볼 수 있었다.&lt;br&gt;자연속에서 이렇게 즐길
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="무지개" scheme="https://eunii.github.io/tags/%EB%AC%B4%EC%A7%80%EA%B0%9C/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 2] 골든서클-게이시르</title>
    <link href="https://eunii.github.io/2019/03/11/trip/europ/iceland3/"/>
    <id>https://eunii.github.io/2019/03/11/trip/europ/iceland3/</id>
    <published>2019-03-11T11:40:25.000Z</published>
    <updated>2019-05-15T05:04:14.644Z</updated>
    
    <content type="html"><![CDATA[<p>아이슬란드 대표 관광지 골든서클 투어를 하기로 했다.<br>첫번째 게이시르.<br>예전에 옐로우스톤국립공원에서 간헐천을 보면서 가족들 생각이 많이났는데<br>여기서 같이 볼수 있어서 정말 기뻤다.<br>지구가 방구뀌는곳<br><img src="/assets/images/is/게이셔.gif"></p><p>생각보다 냄새는 많이 안 났고 분출도 자주 있었다.<br>나는 고프로를 들고다니며 동영상을 찍었는데<br>아빠가 카메라 의식을 너무 많이한다.  </p><img src="/assets/images/is/g3.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d265047.02439091995!2d-21.44606820016161!3d64.12446207976525!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e0!4m5!1s0x48d6735b5b6a54db%3A0xea55745367827c1f!2zU3R1ZGlvIEU4LCBFbmdpaGphbGxpIDgsIEvDs3Bhdm9ndXIsIOyVhOydtOyKrOuegOuTnA!3m2!1d64.1098152!2d-21.858184899999998!4m5!1s0x48d6a39f03424f3f%3A0xb4751c1a62e2283f!2z6rKM7J207Iuc66W0IOyVhOydtOyKrOuegOuTnA!3m2!1d64.31037189999999!2d-20.3023605!5e0!3m2!1sko!2skr!4v1556868958914!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;아이슬란드 대표 관광지 골든서클 투어를 하기로 했다.&lt;br&gt;첫번째 게이시르.&lt;br&gt;예전에 옐로우스톤국립공원에서 간헐천을 보면서 가족들 생각이 많이났는데&lt;br&gt;여기서 같이 볼수 있어서 정말 기뻤다.&lt;br&gt;지구가 방구뀌는곳&lt;br&gt;&lt;img src=&quot;/
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="골든서클" scheme="https://eunii.github.io/tags/%EA%B3%A8%EB%93%A0%EC%84%9C%ED%81%B4/"/>
    
  </entry>
  
  <entry>
    <title>[DAY 1] 첫 오로라</title>
    <link href="https://eunii.github.io/2019/03/10/trip/europ/iceland2/"/>
    <id>https://eunii.github.io/2019/03/10/trip/europ/iceland2/</id>
    <published>2019-03-10T11:40:25.000Z</published>
    <updated>2019-05-13T08:03:27.703Z</updated>
    
    <content type="html"><![CDATA[<p>거의 20시간 넘게 비행기를 타고 숙소에 도착했다.<br>첫번째 식사는 김치찌개.<br>밤이 되었다.<br>첫날 밤을 그냥 자고싶진 않았다.<br>아픈 언니와 피곤한 아빠를 뒤로하고 엄마랑 그로타 등대로 향했다.<br>기대가 크면 실망이 클까봐 기대를 꾹꾹 눌렀다.<br>등대를 향하는 바닷가도로 위 푸른 구름이 보였다.<br>이거 오로라 아냐?<br>사진을 찍어보는데 흥분을 가라앉히기 힘들었다.<br>결국 등대 가기전 불빛이 없는 공터에 차를 대고 내렸다.<br>그냥 막 흥분이되었었다.<br>카메라로 어떻게 찍는지 연습을 못해서…<br>아쉽게 사진은 제대로 찍지 못하였다.<br>눈으로 담아도 충분했다고 생각했다.(이때는ㅜㅜ)<br>가족들이 다 오지 못한게 아쉬워 숙소로 돌아가 아빠를 모시고 왔지만<br>아빠는 오로라 흔적만 보셨다.<br>오로라 없는 겨울 밤하늘도 예뻤다.<br>첫 오로라는 성공적이였다.</p><img src="/assets/images/is/ar1.jpg"><img src="/assets/images/is/ar2.jpg"><iframe src="https://www.google.com/maps/embed?pb=!1m34!1m12!1m3!1d111720.49854761273!2d-22.40078156554797!3d64.05412644502664!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m19!3e0!4m5!1s0x4929fdfce2ab799f%3A0x27f88d0a15c328cd!2z7LyA7ZSM652867mE7YGsIOq1reygnOqzte2VrSBLZWZsYXbDrWt1cmZsdWd2w7ZsbHVyLCAyMzUgS2VmbGF2w61rLCDslYTsnbTsiqzrnoDrk5w!3m2!1d63.9786029!2d-22.635036!4m5!1s0x48d6735b5b6a54db%3A0xea55745367827c1f!2zU3R1ZGlvIEU4LCBFbmdpaGphbGxpIDgsIEvDs3Bhdm9ndXIsIOyVhOydtOyKrOuegOuTnA!3m2!1d64.1098152!2d-21.858184899999998!4m5!1s0x48d60aeea2eeaa69%3A0xb7c61001611f14e3!2zR3LDs3R0YSwg7IWA7Yuw7JWE66W065Oc64KY66W065Oc64Sk7IqkIOyVhOydtOyKrOuegOuTnA!3m2!1d64.1645565!2d-22.021600199999998!5e0!3m2!1sko!2skr!4v1556868566275!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;거의 20시간 넘게 비행기를 타고 숙소에 도착했다.&lt;br&gt;첫번째 식사는 김치찌개.&lt;br&gt;밤이 되었다.&lt;br&gt;첫날 밤을 그냥 자고싶진 않았다.&lt;br&gt;아픈 언니와 피곤한 아빠를 뒤로하고 엄마랑 그로타 등대로 향했다.&lt;br&gt;기대가 크면 실망이 클까봐 
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="오로라" scheme="https://eunii.github.io/tags/%EC%98%A4%EB%A1%9C%EB%9D%BC/"/>
    
  </entry>
  
  <entry>
    <title>[DAY -1] 아이슬란드로</title>
    <link href="https://eunii.github.io/2019/03/09/trip/europ/iceland1/"/>
    <id>https://eunii.github.io/2019/03/09/trip/europ/iceland1/</id>
    <published>2019-03-09T11:40:25.000Z</published>
    <updated>2019-05-13T08:03:27.681Z</updated>
    
    <content type="html"><![CDATA[<p>운이 좋게 가족 모두 2주정도 시간이 생겨 첫 가족 해외여행 기회가 찾아왔다.<br>오로라 보러갈래?<br>내가던진 한마디에 엄빠가 짠듯이 케나다 옐로나이프를 찾아오셨다.<br>오로라가 유명하지만-30도. 여행 일정을 대충 짠 다음에 비행기표를 예약했다.<br>결제 직전 언니 일정때문에 하루만 더 생각해보자고 하고 결제를 미뤘다.<br>하루가 지나고 여행지가 변경됐다.<br>아이슬란드로.<br>엄마가 생소한 여행지여서 탐탁치 않아하셨지만 어떻게 설득을했다.<br>결론적으로 너무 잘된 결정이었던것 같다. 어딜가든 좋았겠지만<br>가족들끼리 그렇게 하루종일 오랜시간 같이 지내는것도 오랜만이었다.  </p><img src="/assets/images/is/is2.jpg"><img src="/assets/images/is/is3.jpg" class="[class names]" title="[width] [height] [title text [alt text]]"><iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d46072479.00833075!2d17.133995610168032!3d45.18626719080648!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e4!4m5!1s0x357b9a833a5efa59%3A0x8d4ba096cb5cbed4!2z7J247LKc6rSR7Jet7IucIOykkeq1rCDqs7Xtla3roZwg7J247LKc6rWt7KCc6rO17ZWtIChJQ04p!3m2!1d37.4601908!2d126.44069569999999!4m5!1s0x4929fdfce2ab799f%3A0x27f88d0a15c328cd!2z7LyA7ZSM652867mE7YGsIOq1reygnOqzte2VrSAoS0VGKSBLZWZsYXbDrWt1cmZsdWd2w7ZsbHVyLCBLZWZsYXbDrWssIOyVhOydtOyKrOuegOuTnA!3m2!1d63.9786029!2d-22.635036!5e0!3m2!1sko!2skr!4v1556868025804!5m2!1sko!2skr" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;운이 좋게 가족 모두 2주정도 시간이 생겨 첫 가족 해외여행 기회가 찾아왔다.&lt;br&gt;오로라 보러갈래?&lt;br&gt;내가던진 한마디에 엄빠가 짠듯이 케나다 옐로나이프를 찾아오셨다.&lt;br&gt;오로라가 유명하지만-30도. 여행 일정을 대충 짠 다음에 비행기표를 
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="island" scheme="https://eunii.github.io/categories/trip/island/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="유럽" scheme="https://eunii.github.io/tags/%EC%9C%A0%EB%9F%BD/"/>
    
      <category term="아이슬란드" scheme="https://eunii.github.io/tags/%EC%95%84%EC%9D%B4%EC%8A%AC%EB%9E%80%EB%93%9C/"/>
    
      <category term="오로라" scheme="https://eunii.github.io/tags/%EC%98%A4%EB%A1%9C%EB%9D%BC/"/>
    
  </entry>
  
  <entry>
    <title>[2014.08.] 미국 옐로우스톤 1</title>
    <link href="https://eunii.github.io/2019/02/01/trip/n.america/ws1/"/>
    <id>https://eunii.github.io/2019/02/01/trip/n.america/ws1/</id>
    <published>2019-02-01T11:40:25.000Z</published>
    <updated>2019-07-06T06:09:06.689Z</updated>
    
    <content type="html"><![CDATA[<p>금요일 오전수업을 마치고 하나 듣고 3박4일간의 옐로우스톤으로 향하는 길을 떠났다.<br>옐로우스톤은 미국에서 가장 오래된 국립공원으로 학교에서 차로 대략 6시간걸릴 예정이다..   </p><img src="/assets/images/yellowstone/day1-2.jpg">  <p>쭉 뻗은 길, 각자 취향의 노래, 간식, 평화로운 풍경에 첫 여행이라는 설렘까지, 정말 신이났다.<br>드라이브 길 풍경은 아무리 보아도 질리지 않을것 같다.<br><img src="/assets/images/yellowstone/day1-3.jpg"><br>운전만 잘하면 나도 저 쭉 뻗은 도로 운전해보고 싶었다.<br>구글맵으로 길을 찾았는데 미국은 정말 운전하기 쉬운 것 같다.<br><img src="/assets/images/yellowstone/day1-4.jpg">  </p><p>중간 화장실을 가기위해 마트에 들렀다. 간식도 간단히 산것 같은데 기억이 안난다.  </p><img src="/assets/images/yellowstone/day1-5.jpg">  <p>잠깐 화장실만 갔다 온것 같은데 벌써 해가 떨어지고 있다. 오랜 시간운전자들 넘 고생한다.  </p><p>차 뒷좌석 가운데 앉은 내 엉덩이 허리도 엄청 수고했다.  </p><p>하지만 아직 갈길이 멀다.<br><img src="/assets/images/yellowstone/day1-6.jpg">  </p><p>같은 음악을 몇번을 반복해서 들었는지 다 외우고 질릴 정도. 차라리 아직 더 가야한다.   </p><p>해지는 석양도 정말 멋있긴하다.<br><img src="/assets/images/yellowstone/day1-7.jpg"><br>밤이 되고 있다. 가로등이 하나 없는 차도를 헤드라이터에 의지해 달리고 있다.   </p><p>점점 잠이오지만 운전자들의 잠을 깨주기위해 교대로 대화를 나눈다. 한번 더 쉴때가 온것 같다.  </p><img src="/assets/images/yellowstone/day1-8.jpg">  <p>잠깐 주유소에 들렀다.<br>오랜만에 편 허리때문인지 걸어오는 발걸음이 아주 신났다.  </p><p>이제 숙소가 얼마 안남아서 더 힘이 솟는것 같다.<br><img src="/assets/images/yellowstone/day1-9.jpg"><br>드디어 숙소에 도착했다.<br>어두운데 비슷한 숙소가 여러개라 처음에 다른 숙소에 들어갈뻔했다.  </p><p>미국은 인건비가 비싸서인지 밤에 체크인을 하면 사람은 없고 숙박객이 숨김통 같은곳에 열쇠를 숨겨놓고 알아서 찾아 들어가야한다.<br>넘 피곤해서 도착때 사진이 없는듯.  </p><img src="/assets/images/yellowstone/day1-10.jpg">  <p>옐로우스톤은 보지도 못했는데 벌써 여행의 하루가 지났다.<br>하지만 학교에서 챙겨온 라면과 아인슈타인 베이글로 아침을 먹고 드디어 국립공원으로 향한다.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;금요일 오전수업을 마치고 하나 듣고 3박4일간의 옐로우스톤으로 향하는 길을 떠났다.&lt;br&gt;옐로우스톤은 미국에서 가장 오래된 국립공원으로 학교에서 차로 대략 6시간걸릴 예정이다..   &lt;/p&gt;
&lt;img src=&quot;/assets/images/yello
      
    
    </summary>
    
      <category term="trip" scheme="https://eunii.github.io/categories/trip/"/>
    
      <category term="america" scheme="https://eunii.github.io/categories/trip/america/"/>
    
    
      <category term="여행" scheme="https://eunii.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
      <category term="미국" scheme="https://eunii.github.io/tags/%EB%AF%B8%EA%B5%AD/"/>
    
      <category term="옐로우스톤" scheme="https://eunii.github.io/tags/%EC%98%90%EB%A1%9C%EC%9A%B0%EC%8A%A4%ED%86%A4/"/>
    
  </entry>
  
</feed>
